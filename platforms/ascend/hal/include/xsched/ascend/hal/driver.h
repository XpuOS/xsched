/// This file is auto-generated by command "python3 tools/autogen/gen.py --source platforms/ascend/hal/include/xsched/ascend/hal/acl.h --lib /usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64/libascendcl.so --platform ascend --prefix acl"
#pragma once

#include "xsched/protocol/def.h"
#include "xsched/utils/common.h"
#include "xsched/utils/symbol.h"
#include "xsched/utils/function.h"
#include "xsched/ascend/hal/acl.h"

namespace xsched::ascend
{

typedef int64_t aclSetTensorShapeRange_arg2_t[][ACL_TENSOR_SHAPE_RANGE_NUM];
typedef int64_t aclSetTensorValueRange_arg2_t[][ACL_TENSOR_SHAPE_RANGE_NUM];
typedef const aclDataType aclopSetAttrListDataType_arg3_t[];
typedef const int64_t *const aclopSetAttrListListInt_arg4_t[];
typedef const aclTensorDesc *const aclopExecute_arg2_t[];
typedef const aclDataBuffer *const aclopExecute_arg3_t[];
typedef const aclTensorDesc *const aclopExecute_arg5_t[];
typedef aclDataBuffer *const aclopExecute_arg6_t[];
typedef aclTensorDesc * aclopExecuteV2_arg2_t[];
typedef aclDataBuffer * aclopExecuteV2_arg3_t[];
typedef aclTensorDesc * aclopExecuteV2_arg5_t[];
typedef aclDataBuffer * aclopExecuteV2_arg6_t[];
typedef const aclTensorDesc *const aclopCreateHandle_arg2_t[];
typedef const aclTensorDesc *const aclopCreateHandle_arg4_t[];
typedef const aclDataBuffer *const aclopExecWithHandle_arg2_t[];
typedef aclDataBuffer *const aclopExecWithHandle_arg4_t[];
typedef const aclTensorDesc *const aclopUpdateParams_arg2_t[];
typedef const aclTensorDesc *const aclopUpdateParams_arg4_t[];
typedef aclTensorDesc * aclopInferShape_arg2_t[];
typedef aclDataBuffer * aclopInferShape_arg3_t[];
typedef aclTensorDesc * aclopInferShape_arg5_t[];
typedef const aclTensorDesc *const aclopCompile_arg2_t[];
typedef const aclTensorDesc *const aclopCompile_arg4_t[];
typedef const aclTensorDesc *const aclopCompileAndExecute_arg2_t[];
typedef const aclDataBuffer *const aclopCompileAndExecute_arg3_t[];
typedef const aclTensorDesc *const aclopCompileAndExecute_arg5_t[];
typedef aclDataBuffer *const aclopCompileAndExecute_arg6_t[];
typedef aclTensorDesc * aclopCompileAndExecuteV2_arg2_t[];
typedef aclDataBuffer * aclopCompileAndExecuteV2_arg3_t[];
typedef aclTensorDesc * aclopCompileAndExecuteV2_arg5_t[];
typedef aclDataBuffer * aclopCompileAndExecuteV2_arg6_t[];
typedef const aclTensorDesc *const aclGenGraphAndDumpForOp_arg2_t[];
typedef const aclDataBuffer *const aclGenGraphAndDumpForOp_arg3_t[];
typedef const aclTensorDesc *const aclGenGraphAndDumpForOp_arg5_t[];
typedef aclDataBuffer *const aclGenGraphAndDumpForOp_arg6_t[];


class Driver
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, XSCHED_ASCEND_LIB_ENV_NAME,
                           std::vector<std::string>({"libascendcl.so"}),
                           std::vector<std::string>({"/usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64"}));

public:
    STATIC_CLASS(Driver);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclFloat16ToFloat"), float, Float16ToFloat, aclFloat16, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclFloatToFloat16"), aclFloat16, FloatToFloat16, float, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclCreateDataBuffer"), aclDataBuffer *, CreateDataBuffer, void *, data, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclDestroyDataBuffer"), aclError, DestroyDataBuffer, const aclDataBuffer *, dataBuffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclUpdateDataBuffer"), aclError, UpdateDataBuffer, aclDataBuffer *, dataBuffer, void *, data, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetDataBufferAddr"), void *, GetDataBufferAddr, const aclDataBuffer *, dataBuffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetDataBufferSize"), uint32_t, GetDataBufferSize, const aclDataBuffer *, dataBuffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetDataBufferSizeV2"), size_t, GetDataBufferSizeV2, const aclDataBuffer *, dataBuffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclDataTypeSize"), size_t, DataTypeSize, aclDataType, dataType);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclCreateTensorDesc"), aclTensorDesc *, CreateTensorDesc, aclDataType, dataType, int, numDims, const int64_t *, dims, aclFormat, format);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclDestroyTensorDesc"), void, DestroyTensorDesc, const aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorShapeRange"), aclError, SetTensorShapeRange, aclTensorDesc *, desc, size_t, dimsCount, aclSetTensorShapeRange_arg2_t, dimsRange);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorValueRange"), aclError, SetTensorValueRange, aclTensorDesc *, desc, size_t, valueCount, aclSetTensorValueRange_arg2_t, valueRange);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescType"), aclDataType, GetTensorDescType, const aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescFormat"), aclFormat, GetTensorDescFormat, const aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescSize"), size_t, GetTensorDescSize, const aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescElementCount"), size_t, GetTensorDescElementCount, const aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescNumDims"), size_t, GetTensorDescNumDims, const aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescDim"), int64_t, GetTensorDescDim, const aclTensorDesc *, desc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescDimV2"), aclError, GetTensorDescDimV2, const aclTensorDesc *, desc, size_t, index, int64_t *, dimSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescDimRange"), aclError, GetTensorDescDimRange, const aclTensorDesc *, desc, size_t, index, size_t, dimRangeNum, int64_t *, dimRange);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorDescName"), void, SetTensorDescName, aclTensorDesc *, desc, const char *, name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescName"), const char *, GetTensorDescName, aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclTransTensorDescFormat"), aclError, TransTensorDescFormat, const aclTensorDesc *, srcDesc, aclFormat, dstFormat, aclTensorDesc **, dstDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorStorageFormat"), aclError, SetTensorStorageFormat, aclTensorDesc *, desc, aclFormat, format);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorStorageShape"), aclError, SetTensorStorageShape, aclTensorDesc *, desc, int, numDims, const int64_t *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorFormat"), aclError, SetTensorFormat, aclTensorDesc *, desc, aclFormat, format);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorShape"), aclError, SetTensorShape, aclTensorDesc *, desc, int, numDims, const int64_t *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorOriginFormat"), aclError, SetTensorOriginFormat, aclTensorDesc *, desc, aclFormat, format);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorOriginShape"), aclError, SetTensorOriginShape, aclTensorDesc *, desc, int, numDims, const int64_t *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescByIndex"), aclTensorDesc *, GetTensorDescByIndex, aclTensorDesc *, desc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetTensorDescAddress"), void *, GetTensorDescAddress, const aclTensorDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorDynamicInput"), aclError, SetTensorDynamicInput, aclTensorDesc *, desc, const char *, dynamicInputName);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorConst"), aclError, SetTensorConst, aclTensorDesc *, desc, void *, dataBuffer, size_t, length);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetTensorPlaceMent"), aclError, SetTensorPlaceMent, aclTensorDesc *, desc, aclMemType, memType);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclAppLog"), void, AppLog, aclLogLevel, logLevel, const char *, func, const char *, file, uint32_t, line, const char *, fmt); // va not supported
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetSocName"), const char *, rtGetSocName);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetCannAttributeList"), aclError, GetCannAttributeList, const aclCannAttr **, cannAttrList, size_t *, num);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetCannAttribute"), aclError, GetCannAttribute, aclCannAttr, cannAttr, int32_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetDeviceCapability"), aclError, GetDeviceCapability, uint32_t, deviceId, aclDeviceInfo, deviceInfo, int64_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtPeekAtLastError"), aclError, rtPeekAtLastError, aclrtLastErrLevel, level);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetLastError"), aclError, rtGetLastError, aclrtLastErrLevel, level);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetExceptionInfoCallback"), aclError, rtSetExceptionInfoCallback, aclrtExceptionInfoCallback, callback);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetTaskIdFromExceptionInfo"), uint32_t, rtGetTaskIdFromExceptionInfo, const aclrtExceptionInfo *, info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetStreamIdFromExceptionInfo"), uint32_t, rtGetStreamIdFromExceptionInfo, const aclrtExceptionInfo *, info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetThreadIdFromExceptionInfo"), uint32_t, rtGetThreadIdFromExceptionInfo, const aclrtExceptionInfo *, info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetDeviceIdFromExceptionInfo"), uint32_t, rtGetDeviceIdFromExceptionInfo, const aclrtExceptionInfo *, info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetErrorCodeFromExceptionInfo"), uint32_t, rtGetErrorCodeFromExceptionInfo, const aclrtExceptionInfo *, info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSubscribeReport"), aclError, rtSubscribeReport, uint64_t, threadId, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtLaunchCallback"), aclError, rtLaunchCallback, aclrtCallback, fn, void *, userData, aclrtCallbackBlockType, blockType, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtProcessReport"), aclError, rtProcessReport, int32_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtUnSubscribeReport"), aclError, rtUnSubscribeReport, uint64_t, threadId, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateContext"), aclError, rtCreateContext, aclrtContext *, context, int32_t, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDestroyContext"), aclError, rtDestroyContext, aclrtContext, context);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetCurrentContext"), aclError, rtSetCurrentContext, aclrtContext, context);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetCurrentContext"), aclError, rtGetCurrentContext, aclrtContext *, context);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCtxGetSysParamOpt"), aclError, rtCtxGetSysParamOpt, aclSysParamOpt, opt, int64_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCtxSetSysParamOpt"), aclError, rtCtxSetSysParamOpt, aclSysParamOpt, opt, int64_t, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetSysParamOpt"), aclError, rtGetSysParamOpt, aclSysParamOpt, opt, int64_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetSysParamOpt"), aclError, rtSetSysParamOpt, aclSysParamOpt, opt, int64_t, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetDevice"), aclError, rtSetDevice, int32_t, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtResetDevice"), aclError, rtResetDevice, int32_t, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtResetDeviceForce"), aclError, rtResetDeviceForce, int32_t, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetDevice"), aclError, rtGetDevice, int32_t *, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetStreamFailureMode"), aclError, rtSetStreamFailureMode, aclrtStream, stream, uint64_t, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetRunMode"), aclError, rtGetRunMode, aclrtRunMode *, runMode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSynchronizeDevice"), aclError, rtSynchronizeDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSynchronizeDeviceWithTimeout"), aclError, rtSynchronizeDeviceWithTimeout, int32_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetTsDevice"), aclError, rtSetTsDevice, aclrtTsId, tsId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetDeviceUtilizationRate"), aclError, rtGetDeviceUtilizationRate, int32_t, deviceId, aclrtUtilizationInfo *, utilizationInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetDeviceCount"), aclError, rtGetDeviceCount, uint32_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateEvent"), aclError, rtCreateEvent, aclrtEvent *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateEventWithFlag"), aclError, rtCreateEventWithFlag, aclrtEvent *, event, uint32_t, flag);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateEventExWithFlag"), aclError, rtCreateEventExWithFlag, aclrtEvent *, event, uint32_t, flag);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDestroyEvent"), aclError, rtDestroyEvent, aclrtEvent, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtRecordEvent"), aclError, rtRecordEvent, aclrtEvent, event, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtResetEvent"), aclError, rtResetEvent, aclrtEvent, event, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtQueryEvent"), aclError, rtQueryEvent, aclrtEvent, event, aclrtEventStatus *, status);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtQueryEventStatus"), aclError, rtQueryEventStatus, aclrtEvent, event, aclrtEventRecordedStatus *, status);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtQueryEventWaitStatus"), aclError, rtQueryEventWaitStatus, aclrtEvent, event, aclrtEventWaitStatus *, status);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSynchronizeEvent"), aclError, rtSynchronizeEvent, aclrtEvent, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSynchronizeEventWithTimeout"), aclError, rtSynchronizeEventWithTimeout, aclrtEvent, event, int32_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtEventElapsedTime"), aclError, rtEventElapsedTime, float *, ms, aclrtEvent, startEvent, aclrtEvent, endEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMalloc"), aclError, rtMalloc, void **, devPtr, size_t, size, aclrtMemMallocPolicy, policy);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMallocAlign32"), aclError, rtMallocAlign32, void **, devPtr, size_t, size, aclrtMemMallocPolicy, policy);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMallocCached"), aclError, rtMallocCached, void **, devPtr, size_t, size, aclrtMemMallocPolicy, policy);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemFlush"), aclError, rtMemFlush, void *, devPtr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemInvalidate"), aclError, rtMemInvalidate, void *, devPtr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtFree"), aclError, rtFree, void *, devPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMallocHost"), aclError, rtMallocHost, void **, hostPtr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtFreeHost"), aclError, rtFreeHost, void *, hostPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemcpy"), aclError, rtMemcpy, void *, dst, size_t, destMax, const void *, src, size_t, count, aclrtMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemset"), aclError, rtMemset, void *, devPtr, size_t, maxCount, int32_t, value, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemcpyAsync"), aclError, rtMemcpyAsync, void *, dst, size_t, destMax, const void *, src, size_t, count, aclrtMemcpyKind, kind, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemcpyAsyncWithCondition"), aclError, rtMemcpyAsyncWithCondition, void *, dst, size_t, destMax, const void *, src, size_t, count, aclrtMemcpyKind, kind, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemcpy2d"), aclError, rtMemcpy2d, void *, dst, size_t, dpitch, const void *, src, size_t, spitch, size_t, width, size_t, height, aclrtMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemcpy2dAsync"), aclError, rtMemcpy2dAsync, void *, dst, size_t, dpitch, const void *, src, size_t, spitch, size_t, width, size_t, height, aclrtMemcpyKind, kind, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemsetAsync"), aclError, rtMemsetAsync, void *, devPtr, size_t, maxCount, int32_t, value, size_t, count, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtReserveMemAddress"), aclError, rtReserveMemAddress, void **, virPtr, size_t, size, size_t, alignment, void *, expectPtr, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtReleaseMemAddress"), aclError, rtReleaseMemAddress, void *, virPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMallocPhysical"), aclError, rtMallocPhysical, aclrtDrvMemHandle *, handle, size_t, size, const aclrtPhysicalMemProp *, prop, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtFreePhysical"), aclError, rtFreePhysical, aclrtDrvMemHandle, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMapMem"), aclError, rtMapMem, void *, virPtr, size_t, size, size_t, offset, aclrtDrvMemHandle, handle, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtUnmapMem"), aclError, rtUnmapMem, void *, virPtr);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateStreamConfigHandle"), aclrtStreamConfigHandle *, rtCreateStreamConfigHandle);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDestroyStreamConfigHandle"), aclError, rtDestroyStreamConfigHandle, aclrtStreamConfigHandle *, handle);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetStreamConfigOpt"), aclError, rtSetStreamConfigOpt, aclrtStreamConfigHandle *, handle, aclrtStreamConfigAttr, attr, const void *, attrValue, size_t, valueSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateStream"), aclError, rtCreateStream, aclrtStream *, stream);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateStreamV2"), aclError, rtCreateStreamV2, aclrtStream *, stream, const aclrtStreamConfigHandle *, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateStreamWithConfig"), aclError, rtCreateStreamWithConfig, aclrtStream *, stream, uint32_t, priority, uint32_t, flag);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDestroyStream"), aclError, rtDestroyStream, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDestroyStreamForce"), aclError, rtDestroyStreamForce, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSynchronizeStream"), aclError, rtSynchronizeStream, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSynchronizeStreamWithTimeout"), aclError, rtSynchronizeStreamWithTimeout, aclrtStream, stream, int32_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtStreamQuery"), aclError, rtStreamQuery, aclrtStream, stream, aclrtStreamStatus *, status);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtStreamWaitEvent"), aclError, rtStreamWaitEvent, aclrtStream, stream, aclrtEvent, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetGroup"), aclError, rtSetGroup, int32_t, groupId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetGroupCount"), aclError, rtGetGroupCount, uint32_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateGroupInfo"), aclrtGroupInfo *, rtCreateGroupInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDestroyGroupInfo"), aclError, rtDestroyGroupInfo, aclrtGroupInfo *, groupInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetAllGroupInfo"), aclError, rtGetAllGroupInfo, aclrtGroupInfo *, groupInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetGroupInfoDetail"), aclError, rtGetGroupInfoDetail, const aclrtGroupInfo *, groupInfo, int32_t, groupIndex, aclrtGroupAttr, attr, void *, attrValue, size_t, valueLen, size_t *, paramRetSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDeviceCanAccessPeer"), aclError, rtDeviceCanAccessPeer, int32_t *, canAccessPeer, int32_t, deviceId, int32_t, peerDeviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDeviceEnablePeerAccess"), aclError, rtDeviceEnablePeerAccess, int32_t, peerDeviceId, uint32_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDeviceDisablePeerAccess"), aclError, rtDeviceDisablePeerAccess, int32_t, peerDeviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetMemInfo"), aclError, rtGetMemInfo, aclrtMemAttr, attr, size_t *, free, size_t *, total);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetOpWaitTimeout"), aclError, rtSetOpWaitTimeout, uint32_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetOpExecuteTimeOut"), aclError, rtSetOpExecuteTimeOut, uint32_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetStreamOverflowSwitch"), aclError, rtSetStreamOverflowSwitch, aclrtStream, stream, uint32_t, flag);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetStreamOverflowSwitch"), aclError, rtGetStreamOverflowSwitch, aclrtStream, stream, uint32_t *, flag);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSetDeviceSatMode"), aclError, rtSetDeviceSatMode, aclrtFloatOverflowMode, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetDeviceSatMode"), aclError, rtGetDeviceSatMode, aclrtFloatOverflowMode *, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetOverflowStatus"), aclError, rtGetOverflowStatus, void *, outputAddr, size_t, outputSize, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtResetOverflowStatus"), aclError, rtResetOverflowStatus, aclrtStream, stream);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtSubscribeHostFunc"), aclError, rtSubscribeHostFunc, uint64_t, hostFuncThreadId, aclrtStream, exeStream);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtProcessHostFunc"), aclError, rtProcessHostFunc, int32_t, timeout);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtUnSubscribeHostFunc"), aclError, rtUnSubscribeHostFunc, uint64_t, hostFuncThreadId, aclrtStream, exeStream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtQueryDeviceStatus"), aclError, rtQueryDeviceStatus, int32_t, deviceId, aclrtDeviceStatus *, deviceStatus);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCreateBinary"), aclrtBinary, rtCreateBinary, const void *, data, size_t, dataLen);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDestroyBinary"), aclError, rtDestroyBinary, aclrtBinary, binary);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtBinaryLoad"), aclError, rtBinaryLoad, const aclrtBinary, binary, aclrtBinHandle *, binHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtBinaryUnLoad"), aclError, rtBinaryUnLoad, aclrtBinHandle, binHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtBinaryGetFunction"), aclError, rtBinaryGetFunction, const aclrtBinHandle, binHandle, const char *, kernelName, aclrtFuncHandle *, funcHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtLaunchKernel"), aclError, rtLaunchKernel, aclrtFuncHandle, funcHandle, uint32_t, blockDim, const void *, argsData, size_t, argsSize, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemExportToShareableHandle"), aclError, rtMemExportToShareableHandle, aclrtDrvMemHandle, handle, aclrtMemHandleType, handleType, uint64_t, flags, uint64_t *, shareableHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemImportFromShareableHandle"), aclError, rtMemImportFromShareableHandle, uint64_t, shareableHandle, int32_t, deviceId, aclrtDrvMemHandle *, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemSetPidToShareableHandle"), aclError, rtMemSetPidToShareableHandle, uint64_t, shareableHandle, int32_t *, pid, size_t, pidNum);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemGetAllocationGranularity"), aclError, rtMemGetAllocationGranularity, aclrtPhysicalMemProp *, prop, aclrtMemGranularityOptions, option, size_t *, granularity);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDeviceGetBareTgid"), aclError, rtDeviceGetBareTgid, int32_t *, pid);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtCmoAsync"), aclError, rtCmoAsync, void *, src, size_t, size, aclrtCmoType, cmoType, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtGetMemUceInfo"), aclError, rtGetMemUceInfo, int32_t, deviceId, aclrtMemUceInfo *, memUceInfoArray, size_t, arraySize, size_t *, retSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtDeviceTaskAbort"), aclError, rtDeviceTaskAbort, int32_t, deviceId, uint32_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtMemUceRepair"), aclError, rtMemUceRepair, int32_t, deviceId, aclrtMemUceInfo *, memUceInfoArray, size_t, arraySize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclrtStreamAbort"), aclError, rtStreamAbort, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetModelDir"), aclError, opSetModelDir, const char *, modelDir);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopLoad"), aclError, opLoad, const void *, model, size_t, modelSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCreateAttr"), aclopAttr *, opCreateAttr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopDestroyAttr"), void, opDestroyAttr, const aclopAttr *, attr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrBool"), aclError, opSetAttrBool, aclopAttr *, attr, const char *, attrName, uint8_t, attrValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrInt"), aclError, opSetAttrInt, aclopAttr *, attr, const char *, attrName, int64_t, attrValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrFloat"), aclError, opSetAttrFloat, aclopAttr *, attr, const char *, attrName, float, attrValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrString"), aclError, opSetAttrString, aclopAttr *, attr, const char *, attrName, const char *, attrValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrDataType"), aclError, opSetAttrDataType, aclopAttr *, attr, const char *, attrName, aclDataType, attrValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrListDataType"), aclError, opSetAttrListDataType, aclopAttr *, attr, const char *, attrName, int, numValues, aclopSetAttrListDataType_arg3_t, values);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrListBool"), aclError, opSetAttrListBool, aclopAttr *, attr, const char *, attrName, int, numValues, const uint8_t *, values);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrListInt"), aclError, opSetAttrListInt, aclopAttr *, attr, const char *, attrName, int, numValues, const int64_t *, values);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrListFloat"), aclError, opSetAttrListFloat, aclopAttr *, attr, const char *, attrName, int, numValues, const float *, values);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrListString"), aclError, opSetAttrListString, aclopAttr *, attr, const char *, attrName, int, numValues, const char **, values);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetAttrListListInt"), aclError, opSetAttrListListInt, aclopAttr *, attr, const char *, attrName, int, numLists, const int *, numValues, aclopSetAttrListListInt_arg4_t, values);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopExecute"), aclError, opExecute, const char *, opType, int, numInputs, aclopExecute_arg2_t, inputDesc, aclopExecute_arg3_t, inputs, int, numOutputs, aclopExecute_arg5_t, outputDesc, aclopExecute_arg6_t, outputs, const aclopAttr *, attr, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopExecuteV2"), aclError, opExecuteV2, const char *, opType, int, numInputs, aclopExecuteV2_arg2_t, inputDesc, aclopExecuteV2_arg3_t, inputs, int, numOutputs, aclopExecuteV2_arg5_t, outputDesc, aclopExecuteV2_arg6_t, outputs, aclopAttr *, attr, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCreateHandle"), aclError, opCreateHandle, const char *, opType, int, numInputs, aclopCreateHandle_arg2_t, inputDesc, int, numOutputs, aclopCreateHandle_arg4_t, outputDesc, const aclopAttr *, opAttr, aclopHandle **, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopDestroyHandle"), void, opDestroyHandle, aclopHandle *, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopExecWithHandle"), aclError, opExecWithHandle, aclopHandle *, handle, int, numInputs, aclopExecWithHandle_arg2_t, inputs, int, numOutputs, aclopExecWithHandle_arg4_t, outputs, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCast"), aclError, opCast, const aclTensorDesc *, srcDesc, const aclDataBuffer *, srcBuffer, const aclTensorDesc *, dstDesc, aclDataBuffer *, dstBuffer, uint8_t, truncate, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCreateHandleForCast"), aclError, opCreateHandleForCast, aclTensorDesc *, srcDesc, aclTensorDesc *, dstDesc, uint8_t, truncate, aclopHandle **, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCreateKernel"), aclError, opCreateKernel, const char *, opType, const char *, kernelId, const char *, kernelName, void *, binData, int, binSize, aclopEngineType, enginetype, aclDataDeallocator, deallocator);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopRegisterCompileFunc"), aclError, opRegisterCompileFunc, const char *, opType, aclopCompileFunc, func);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopUnregisterCompileFunc"), aclError, opUnregisterCompileFunc, const char *, opType);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetKernelArgs"), aclError, opSetKernelArgs, aclopKernelDesc *, kernelDesc, const char *, kernelId, uint32_t, blockDim, const void *, args, uint32_t, argSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetKernelWorkspaceSizes"), aclError, opSetKernelWorkspaceSizes, aclopKernelDesc *, kernelDesc, int, numWorkspaces, size_t *, workspaceSizes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopUpdateParams"), aclError, opUpdateParams, const char *, opType, int, numInputs, aclopUpdateParams_arg2_t, inputDesc, int, numOutputs, aclopUpdateParams_arg4_t, outputDesc, const aclopAttr *, attr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetMaxOpQueueNum"), aclError, opSetMaxOpQueueNum, uint64_t, maxOpNum);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopInferShape"), aclError, opInferShape, const char *, opType, int, numInputs, aclopInferShape_arg2_t, inputDesc, aclopInferShape_arg3_t, inputs, int, numOutputs, aclopInferShape_arg5_t, outputDesc, aclopAttr *, attr);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopStartDumpArgs"), aclError, opStartDumpArgs, uint32_t, dumpType, const char *, path);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopStopDumpArgs"), aclError, opStopDumpArgs, uint32_t, dumpType);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlCreateDesc"), aclmdlDesc *, mdlCreateDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlDestroyDesc"), aclError, mdlDestroyDesc, aclmdlDesc *, modelDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDesc"), aclError, mdlGetDesc, aclmdlDesc *, modelDesc, uint32_t, modelId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDescFromFile"), aclError, mdlGetDescFromFile, aclmdlDesc *, modelDesc, const char *, modelPath);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDescFromMem"), aclError, mdlGetDescFromMem, aclmdlDesc *, modelDesc, const void *, model, size_t, modelSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetNumInputs"), size_t, mdlGetNumInputs, aclmdlDesc *, modelDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetNumOutputs"), size_t, mdlGetNumOutputs, aclmdlDesc *, modelDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputSizeByIndex"), size_t, mdlGetInputSizeByIndex, aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetOutputSizeByIndex"), size_t, mdlGetOutputSizeByIndex, aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlCreateExecConfigHandle"), aclmdlExecConfigHandle *, mdlCreateExecConfigHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlDestroyExecConfigHandle"), aclError, mdlDestroyExecConfigHandle, const aclmdlExecConfigHandle *, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlCreateDataset"), aclmdlDataset *, mdlCreateDataset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlDestroyDataset"), aclError, mdlDestroyDataset, const aclmdlDataset *, dataset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlAddDatasetBuffer"), aclError, mdlAddDatasetBuffer, aclmdlDataset *, dataset, aclDataBuffer *, dataBuffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetDatasetTensorDesc"), aclError, mdlSetDatasetTensorDesc, aclmdlDataset *, dataset, aclTensorDesc *, tensorDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDatasetTensorDesc"), aclTensorDesc *, mdlGetDatasetTensorDesc, const aclmdlDataset *, dataset, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDatasetNumBuffers"), size_t, mdlGetDatasetNumBuffers, const aclmdlDataset *, dataset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDatasetBuffer"), aclDataBuffer *, mdlGetDatasetBuffer, const aclmdlDataset *, dataset, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlLoadFromFile"), aclError, mdlLoadFromFile, const char *, modelPath, uint32_t *, modelId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlBundleLoadFromFile"), aclError, mdlBundleLoadFromFile, const char *, modelPath, uint32_t *, bundleId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlBundleLoadFromMem"), aclError, mdlBundleLoadFromMem, const void *, model, size_t, modelSize, uint32_t *, bundleId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlBundleUnload"), aclError, mdlBundleUnload, uint32_t, bundleId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlBundleGetModelNum"), aclError, mdlBundleGetModelNum, uint32_t, bundleId, size_t *, modelNum);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlBundleGetModelId"), aclError, mdlBundleGetModelId, uint32_t, bundleId, size_t, index, uint32_t *, modelId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlLoadFromMem"), aclError, mdlLoadFromMem, const void *, model, size_t, modelSize, uint32_t *, modelId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlLoadFromFileWithMem"), aclError, mdlLoadFromFileWithMem, const char *, modelPath, uint32_t *, modelId, void *, workPtr, size_t, workSize, void *, weightPtr, size_t, weightSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlLoadFromMemWithMem"), aclError, mdlLoadFromMemWithMem, const void *, model, size_t, modelSize, uint32_t *, modelId, void *, workPtr, size_t, workSize, void *, weightPtr, size_t, weightSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlLoadFromFileWithQ"), aclError, mdlLoadFromFileWithQ, const char *, modelPath, uint32_t *, modelId, const uint32_t *, inputQ, size_t, inputQNum, const uint32_t *, outputQ, size_t, outputQNum);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlLoadFromMemWithQ"), aclError, mdlLoadFromMemWithQ, const void *, model, size_t, modelSize, uint32_t *, modelId, const uint32_t *, inputQ, size_t, inputQNum, const uint32_t *, outputQ, size_t, outputQNum);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlExecute"), aclError, mdlExecute, uint32_t, modelId, const aclmdlDataset *, input, aclmdlDataset *, output);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlExecuteV2"), aclError, mdlExecuteV2, uint32_t, modelId, const aclmdlDataset *, input, aclmdlDataset *, output, aclrtStream, stream, const aclmdlExecConfigHandle *, handle);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlExecuteAsyncV2"), aclError, mdlExecuteAsyncV2, uint32_t, modelId, const aclmdlDataset *, input, aclmdlDataset *, output, aclrtStream, stream, const aclmdlExecConfigHandle *, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlExecuteAsync"), aclError, mdlExecuteAsync, uint32_t, modelId, const aclmdlDataset *, input, aclmdlDataset *, output, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlUnload"), aclError, mdlUnload, uint32_t, modelId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlQuerySize"), aclError, mdlQuerySize, const char *, fileName, size_t *, workSize, size_t *, weightSize);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlQueryExeOMDesc"), aclError, mdlQueryExeOMDesc, const char *, fileName, aclmdlExeOMDesc *, mdlPartitionSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlQuerySizeFromMem"), aclError, mdlQuerySizeFromMem, const void *, model, size_t, modelSize, size_t *, workSize, size_t *, weightSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetDynamicBatchSize"), aclError, mdlSetDynamicBatchSize, uint32_t, modelId, aclmdlDataset *, dataset, size_t, index, uint64_t, batchSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetDynamicHWSize"), aclError, mdlSetDynamicHWSize, uint32_t, modelId, aclmdlDataset *, dataset, size_t, index, uint64_t, height, uint64_t, width);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetInputDynamicDims"), aclError, mdlSetInputDynamicDims, uint32_t, modelId, aclmdlDataset *, dataset, size_t, index, const aclmdlIODims *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputDims"), aclError, mdlGetInputDims, const aclmdlDesc *, modelDesc, size_t, index, aclmdlIODims *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputDimsV2"), aclError, mdlGetInputDimsV2, const aclmdlDesc *, modelDesc, size_t, index, aclmdlIODims *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputDimsRange"), aclError, mdlGetInputDimsRange, const aclmdlDesc *, modelDesc, size_t, index, aclmdlIODimsRange *, dimsRange);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetOutputDims"), aclError, mdlGetOutputDims, const aclmdlDesc *, modelDesc, size_t, index, aclmdlIODims *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetCurOutputDims"), aclError, mdlGetCurOutputDims, const aclmdlDesc *, modelDesc, size_t, index, aclmdlIODims *, dims);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetOpAttr"), const char *, mdlGetOpAttr, aclmdlDesc *, modelDesc, const char *, opName, const char *, attr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputNameByIndex"), const char *, mdlGetInputNameByIndex, const aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetOutputNameByIndex"), const char *, mdlGetOutputNameByIndex, const aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputFormat"), aclFormat, mdlGetInputFormat, const aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetOutputFormat"), aclFormat, mdlGetOutputFormat, const aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputDataType"), aclDataType, mdlGetInputDataType, const aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetOutputDataType"), aclDataType, mdlGetOutputDataType, const aclmdlDesc *, modelDesc, size_t, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputIndexByName"), aclError, mdlGetInputIndexByName, const aclmdlDesc *, modelDesc, const char *, name, size_t *, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetOutputIndexByName"), aclError, mdlGetOutputIndexByName, const aclmdlDesc *, modelDesc, const char *, name, size_t *, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDynamicBatch"), aclError, mdlGetDynamicBatch, const aclmdlDesc *, modelDesc, aclmdlBatch *, batch);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetDynamicHW"), aclError, mdlGetDynamicHW, const aclmdlDesc *, modelDesc, size_t, index, aclmdlHW *, hw);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputDynamicGearCount"), aclError, mdlGetInputDynamicGearCount, const aclmdlDesc *, modelDesc, size_t, index, size_t *, gearCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetInputDynamicDims"), aclError, mdlGetInputDynamicDims, const aclmdlDesc *, modelDesc, size_t, index, aclmdlIODims *, dims, size_t, gearCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlCreateAIPP"), aclmdlAIPP *, mdlCreateAIPP, uint64_t, batchSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlDestroyAIPP"), aclError, mdlDestroyAIPP, const aclmdlAIPP *, aippParmsSet);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetAippDataSize"), aclError, mdlGetAippDataSize, uint64_t, batchSize, size_t *, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPInputFormat"), aclError, mdlSetAIPPInputFormat, aclmdlAIPP *, aippParmsSet, aclAippInputFormat, inputFormat);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPCscParams"), aclError, mdlSetAIPPCscParams, aclmdlAIPP *, aippParmsSet, int8_t, cscSwitch, int16_t, cscMatrixR0C0, int16_t, cscMatrixR0C1, int16_t, cscMatrixR0C2, int16_t, cscMatrixR1C0, int16_t, cscMatrixR1C1, int16_t, cscMatrixR1C2, int16_t, cscMatrixR2C0, int16_t, cscMatrixR2C1, int16_t, cscMatrixR2C2, uint8_t, cscOutputBiasR0, uint8_t, cscOutputBiasR1, uint8_t, cscOutputBiasR2, uint8_t, cscInputBiasR0, uint8_t, cscInputBiasR1, uint8_t, cscInputBiasR2);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPRbuvSwapSwitch"), aclError, mdlSetAIPPRbuvSwapSwitch, aclmdlAIPP *, aippParmsSet, int8_t, rbuvSwapSwitch);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPAxSwapSwitch"), aclError, mdlSetAIPPAxSwapSwitch, aclmdlAIPP *, aippParmsSet, int8_t, axSwapSwitch);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPSrcImageSize"), aclError, mdlSetAIPPSrcImageSize, aclmdlAIPP *, aippParmsSet, int32_t, srcImageSizeW, int32_t, srcImageSizeH);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPScfParams"), aclError, mdlSetAIPPScfParams, aclmdlAIPP *, aippParmsSet, int8_t, scfSwitch, int32_t, scfInputSizeW, int32_t, scfInputSizeH, int32_t, scfOutputSizeW, int32_t, scfOutputSizeH, uint64_t, batchIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPCropParams"), aclError, mdlSetAIPPCropParams, aclmdlAIPP *, aippParmsSet, int8_t, cropSwitch, int32_t, cropStartPosW, int32_t, cropStartPosH, int32_t, cropSizeW, int32_t, cropSizeH, uint64_t, batchIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPPaddingParams"), aclError, mdlSetAIPPPaddingParams, aclmdlAIPP *, aippParmsSet, int8_t, paddingSwitch, int32_t, paddingSizeTop, int32_t, paddingSizeBottom, int32_t, paddingSizeLeft, int32_t, paddingSizeRight, uint64_t, batchIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPDtcPixelMean"), aclError, mdlSetAIPPDtcPixelMean, aclmdlAIPP *, aippParmsSet, int16_t, dtcPixelMeanChn0, int16_t, dtcPixelMeanChn1, int16_t, dtcPixelMeanChn2, int16_t, dtcPixelMeanChn3, uint64_t, batchIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPDtcPixelMin"), aclError, mdlSetAIPPDtcPixelMin, aclmdlAIPP *, aippParmsSet, float, dtcPixelMinChn0, float, dtcPixelMinChn1, float, dtcPixelMinChn2, float, dtcPixelMinChn3, uint64_t, batchIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPPixelVarReci"), aclError, mdlSetAIPPPixelVarReci, aclmdlAIPP *, aippParmsSet, float, dtcPixelVarReciChn0, float, dtcPixelVarReciChn1, float, dtcPixelVarReciChn2, float, dtcPixelVarReciChn3, uint64_t, batchIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetInputAIPP"), aclError, mdlSetInputAIPP, uint32_t, modelId, aclmdlDataset *, dataset, size_t, index, const aclmdlAIPP *, aippParmsSet);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetAIPPByInputIndex"), aclError, mdlSetAIPPByInputIndex, uint32_t, modelId, aclmdlDataset *, dataset, size_t, index, const aclmdlAIPP *, aippParmsSet);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetAippType"), aclError, mdlGetAippType, uint32_t, modelId, size_t, index, aclmdlInputAippType *, type, size_t *, dynamicAttachedDataIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetFirstAippInfo"), aclError, mdlGetFirstAippInfo, uint32_t, modelId, size_t, index, aclAippInfo *, aippInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlCreateAndGetOpDesc"), aclError, mdlCreateAndGetOpDesc, uint32_t, deviceId, uint32_t, streamId, uint32_t, taskId, char *, opName, size_t, opNameLen, aclTensorDesc **, inputDesc, size_t *, numInputs, aclTensorDesc **, outputDesc, size_t *, numOutputs);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlInitDump"), aclError, mdlInitDump);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetDump"), aclError, mdlSetDump, const char *, dumpCfgPath);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlFinalizeDump"), aclError, mdlFinalizeDump);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlLoadWithConfig"), aclError, mdlLoadWithConfig, const aclmdlConfigHandle *, handle, uint32_t *, modelId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlCreateConfigHandle"), aclmdlConfigHandle *, mdlCreateConfigHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlDestroyConfigHandle"), aclError, mdlDestroyConfigHandle, aclmdlConfigHandle *, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetConfigOpt"), aclError, mdlSetConfigOpt, aclmdlConfigHandle *, handle, aclmdlConfigAttr, attr, const void *, attrValue, size_t, valueSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlSetExecConfigOpt"), aclError, mdlSetExecConfigOpt, aclmdlExecConfigHandle *, handle, aclmdlExecConfigAttr, attr, const void *, attrValue, size_t, valueSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclmdlGetTensorRealName"), const char *, mdlGetTensorRealName, const aclmdlDesc *, modelDesc, const char *, name);

};

/// This is auto-generated by command "python3 tools/autogen/gen.py --source platforms/ascend/hal/include/xsched/ascend/hal/acl.h --lib /usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64/libacl_op_compiler.so --platform ascend --prefix acl"
class OpCompiler
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, "XSCHED_ACL_OP_COMPILER_LIB",
                           std::vector<std::string>({"libacl_op_compiler.so"}), // search name
                           std::vector<std::string>({"/usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64"})); // search path

public:
    STATIC_CLASS(OpCompiler);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCompile"), aclError, opCompile, const char *, opType, int, numInputs, aclopCompile_arg2_t, inputDesc, int, numOutputs, aclopCompile_arg4_t, outputDesc, const aclopAttr *, attr, aclopEngineType, engineType, aclopCompileType, compileFlag, const char *, opPath);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCompileAndExecute"), aclError, opCompileAndExecute, const char *, opType, int, numInputs, aclopCompileAndExecute_arg2_t, inputDesc, aclopCompileAndExecute_arg3_t, inputs, int, numOutputs, aclopCompileAndExecute_arg5_t, outputDesc, aclopCompileAndExecute_arg6_t, outputs, const aclopAttr *, attr, aclopEngineType, engineType, aclopCompileType, compileFlag, const char *, opPath, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopCompileAndExecuteV2"), aclError, opCompileAndExecuteV2, const char *, opType, int, numInputs, aclopCompileAndExecuteV2_arg2_t, inputDesc, aclopCompileAndExecuteV2_arg3_t, inputs, int, numOutputs, aclopCompileAndExecuteV2_arg5_t, outputDesc, aclopCompileAndExecuteV2_arg6_t, outputs, aclopAttr *, attr, aclopEngineType, engineType, aclopCompileType, compileFlag, const char *, opPath, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclSetCompileopt"), aclError, SetCompileopt, aclCompileOpt, opt, const char *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetCompileoptSize"), size_t, GetCompileoptSize, aclCompileOpt, opt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGetCompileopt"), aclError, GetCompileopt, aclCompileOpt, opt, char *, value, size_t, length);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclopSetCompileFlag"), aclError, opSetCompileFlag, aclOpCompileFlag, flag);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclGenGraphAndDumpForOp"), aclError, GenGraphAndDumpForOp, const char *, opType, int, numInputs, aclGenGraphAndDumpForOp_arg2_t, inputDesc, aclGenGraphAndDumpForOp_arg3_t, inputs, int, numOutputs, aclGenGraphAndDumpForOp_arg5_t, outputDesc, aclGenGraphAndDumpForOp_arg6_t, outputs, const aclopAttr *, attr, aclopEngineType, engineType, const char *, graphDumpPath, const aclGraphDumpOption *, graphDumpOpt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclCreateGraphDumpOpt"), aclGraphDumpOption *, CreateGraphDumpOpt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclDestroyGraphDumpOpt"), aclError, DestroyGraphDumpOpt, const aclGraphDumpOption *, graphDumpOpt);

};

/// This is auto-generated by command "python3 tools/autogen/gen.py --source platforms/ascend/hal/include/xsched/ascend/hal/acl.h --lib /usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64/libacl_cblas.so --platform ascend --prefix acl"
class CBlas
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, "XSCHED_ACL_CBLAS_LIB",
                           std::vector<std::string>({"libacl_cblas.so"}), // search name
                           std::vector<std::string>({"/usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64"})); // search path

public:
    STATIC_CLASS(CBlas);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasGemvEx"), aclError, blasGemvEx, aclTransType, transA, int, m, int, n, const void *, alpha, const void *, a, int, lda, aclDataType, dataTypeA, const void *, x, int, incx, aclDataType, dataTypeX, const void *, beta, void *, y, int, incy, aclDataType, dataTypeY, aclComputeType, type, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasCreateHandleForGemvEx"), aclError, blasCreateHandleForGemvEx, aclTransType, transA, int, m, int, n, aclDataType, dataTypeA, aclDataType, dataTypeX, aclDataType, dataTypeY, aclComputeType, type, aclopHandle **, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasHgemv"), aclError, blasHgemv, aclTransType, transA, int, m, int, n, const aclFloat16 *, alpha, const aclFloat16 *, a, int, lda, const aclFloat16 *, x, int, incx, const aclFloat16 *, beta, aclFloat16 *, y, int, incy, aclComputeType, type, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasCreateHandleForHgemv"), aclError, blasCreateHandleForHgemv, aclTransType, transA, int, m, int, n, aclComputeType, type, aclopHandle **, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasS8gemv"), aclError, blasS8gemv, aclTransType, transA, int, m, int, n, const int32_t *, alpha, const int8_t *, a, int, lda, const int8_t *, x, int, incx, const int32_t *, beta, int32_t *, y, int, incy, aclComputeType, type, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasCreateHandleForS8gemv"), aclError, blasCreateHandleForS8gemv, aclTransType, transA, int, m, int, n, aclComputeType, type, aclopHandle **, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasGemmEx"), aclError, blasGemmEx, aclTransType, transA, aclTransType, transB, aclTransType, transC, int, m, int, n, int, k, const void *, alpha, const void *, matrixA, int, lda, aclDataType, dataTypeA, const void *, matrixB, int, ldb, aclDataType, dataTypeB, const void *, beta, void *, matrixC, int, ldc, aclDataType, dataTypeC, aclComputeType, type, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasCreateHandleForGemmEx"), aclError, blasCreateHandleForGemmEx, aclTransType, transA, aclTransType, transB, aclTransType, transC, int, m, int, n, int, k, aclDataType, dataTypeA, aclDataType, dataTypeB, aclDataType, dataTypeC, aclComputeType, type, aclopHandle **, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasHgemm"), aclError, blasHgemm, aclTransType, transA, aclTransType, transB, aclTransType, transC, int, m, int, n, int, k, const aclFloat16 *, alpha, const aclFloat16 *, matrixA, int, lda, const aclFloat16 *, matrixB, int, ldb, const aclFloat16 *, beta, aclFloat16 *, matrixC, int, ldc, aclComputeType, type, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasCreateHandleForHgemm"), aclError, blasCreateHandleForHgemm, aclTransType, transA, aclTransType, transB, aclTransType, transC, int, m, int, n, int, k, aclComputeType, type, aclopHandle **, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasS8gemm"), aclError, blasS8gemm, aclTransType, transA, aclTransType, transB, aclTransType, transC, int, m, int, n, int, k, const int32_t *, alpha, const int8_t *, matrixA, int, lda, const int8_t *, matrixB, int, ldb, const int32_t *, beta, int32_t *, matrixC, int, ldc, aclComputeType, type, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclblasCreateHandleForS8gemm"), aclError, blasCreateHandleForS8gemm, aclTransType, transA, aclTransType, transB, aclTransType, transC, int, m, int, n, int, k, aclComputeType, type, aclopHandle **, handle);

};

/// This is auto-generated by command "python3 tools/autogen/gen.py --source platforms/ascend/hal/include/xsched/ascend/hal/acl.h --lib /usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64/libopapi.so --platform ascend --prefix acl"
class NnOp
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, "XSCHED_ACL_OP_API_LIB",
                           std::vector<std::string>({"libopapi.so"}), // search name
                           std::vector<std::string>({"/usr/local/Ascend/ascend-toolkit/latest/aarch64-linux/lib64"})); // search path

public:
    STATIC_CLASS(NnOp);

    // Ignoring all functions named aclnn*GetWorkspaceSize, e.g., aclnnFusedInferAttentionScoreGetWorkspaceSize(),
    // which has shockingly 32 parameters. Who on earth would use this?
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDropoutBackward"), aclnnStatus, nnDropoutBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDropout"), aclnnStatus, nnDropout, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNormalTensorTensor"), aclnnStatus, nnNormalTensorTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNormalTensorFloat"), aclnnStatus, nnNormalTensorFloat, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNormalFloatTensor"), aclnnStatus, nnNormalFloatTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNormalFloatFloat"), aclnnStatus, nnNormalFloatFloat, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBernoulli"), aclnnStatus, nnBernoulli, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBernoulliTensor"), aclnnStatus, nnBernoulliTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBernoulli"), aclnnStatus, nnInplaceBernoulli, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBernoulliTensor"), aclnnStatus, nnInplaceBernoulliTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMultinomial"), aclnnStatus, nnMultinomial, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDropoutDoMask"), aclnnStatus, nnDropoutDoMask, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRandom"), aclnnStatus, nnInplaceRandom, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceUniform"), aclnnStatus, nnInplaceUniform, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDropoutGenMask"), aclnnStatus, nnDropoutGenMask, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDropoutGenMaskV2"), aclnnStatus, nnDropoutGenMaskV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRandperm"), aclnnStatus, nnRandperm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceNormal"), aclnnStatus, nnInplaceNormal, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIncreFlashAttentionV2"), aclnnStatus, nnIncreFlashAttentionV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchNormBackward"), aclnnStatus, nnBatchNormBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachPowScalarV2"), aclnnStatus, nnForeachPowScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAminmax"), aclnnStatus, nnAminmax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDynamicQuant"), aclnnStatus, nnDynamicQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxPool3dWithArgmax"), aclnnStatus, nnMaxPool3dWithArgmax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSign"), aclnnStatus, nnSign, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeInitRoutingQuantV2"), aclnnStatus, nnMoeInitRoutingQuantV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogSigmoidBackward"), aclnnStatus, nnLogSigmoidBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMatmulReduceScatter"), aclnnStatus, nnMatmulReduceScatter, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeFinalizeRoutingV2"), aclnnStatus, nnMoeFinalizeRoutingV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCalculateMatmulWeightSizeV2"), aclnnStatus, nnCalculateMatmulWeightSizeV2, const aclIntArray *, tensorShape, aclDataType, dataType, uint64_t *, weightTensorSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCalculateMatmulWeightSize"), aclnnStatus, nnCalculateMatmulWeightSize, const aclIntArray *, tensorShape, uint64_t *, weightTensorSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTransMatmulWeight"), aclnnStatus, nnTransMatmulWeight, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearest2d"), aclnnStatus, nnUpsampleNearest2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnComplex"), aclnnStatus, nnComplex, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReciprocal"), aclnnStatus, nnReciprocal, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceReciprocal"), aclnnStatus, nnInplaceReciprocal, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFusedInferAttentionScore"), aclnnStatus, nnFusedInferAttentionScore, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnVarMean"), aclnnStatus, nnVarMean, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAmin"), aclnnStatus, nnAmin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupedMatmul"), aclnnStatus, nnGroupedMatmul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcdivList"), aclnnStatus, nnForeachAddcdivList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGatherV2"), aclnnStatus, nnGatherV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSmoothL1Loss"), aclnnStatus, nnSmoothL1Loss, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxPool2dWithMask"), aclnnStatus, nnMaxPool2dWithMask, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxPool2dWithIndices"), aclnnStatus, nnMaxPool2dWithIndices, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnL1LossBackward"), aclnnStatus, nnL1LossBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIsInf"), aclnnStatus, nnIsInf, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGluBackward"), aclnnStatus, nnGluBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleLinear1dBackward"), aclnnStatus, nnUpsampleLinear1dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnErfinv"), aclnnStatus, nnErfinv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceErfinv"), aclnnStatus, nnInplaceErfinv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearestExact3dBackward"), aclnnStatus, nnUpsampleNearestExact3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardsigmoid"), aclnnStatus, nnHardsigmoid, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceHardsigmoid"), aclnnStatus, nnInplaceHardsigmoid, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulWeightNz"), aclnnStatus, nnQuantMatmulWeightNz, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSinh"), aclnnStatus, nnForeachSinh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxV2"), aclnnStatus, nnMaxV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcdivScalarList"), aclnnStatus, nnForeachAddcdivScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTrace"), aclnnStatus, nnTrace, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMin"), aclnnStatus, nnMin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardtanhBackward"), aclnnStatus, nnHardtanhBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAvgPool3dBackward"), aclnnStatus, nnAvgPool3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchNormReduceBackward"), aclnnStatus, nnBatchNormReduceBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchMatmulQuant"), aclnnStatus, nnBatchMatmulQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeGluBackward"), aclnnStatus, nnGeGluBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeGluV3Backward"), aclnnStatus, nnGeGluV3Backward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchNormElemtBackward"), aclnnStatus, nnBatchNormElemtBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReplicationPad1d"), aclnnStatus, nnReplicationPad1d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPromptFlashAttention"), aclnnStatus, nnPromptFlashAttention, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnXLogYScalarOther"), aclnnStatus, nnXLogYScalarOther, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceXLogYScalarOther"), aclnnStatus, nnInplaceXLogYScalarOther, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLayerNormBackward"), aclnnStatus, nnLayerNormBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceCopy"), aclnnStatus, nnInplaceCopy, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFmodScalar"), aclnnStatus, nnFmodScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFmodScalar"), aclnnStatus, nnInplaceFmodScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLerp"), aclnnStatus, nnLerp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLerp"), aclnnStatus, nnInplaceLerp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnL1Loss"), aclnnStatus, nnL1Loss, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogAddExp2"), aclnnStatus, nnLogAddExp2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeInitRoutingV2"), aclnnStatus, nnMoeInitRoutingV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnExp2"), aclnnStatus, nnExp2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceExp2"), aclnnStatus, nnInplaceExp2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUnique"), aclnnStatus, nnUnique, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupedMatmulV2"), aclnnStatus, nnGroupedMatmulV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnConvertWeightToINT4Pack"), aclnnStatus, nnConvertWeightToINT4Pack, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCummax"), aclnnStatus, nnCummax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMinimumScalarV2"), aclnnStatus, nnForeachMinimumScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnArgMax"), aclnnStatus, nnArgMax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPdistForward"), aclnnStatus, nnPdistForward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRsubs"), aclnnStatus, nnRsubs, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRsub"), aclnnStatus, nnRsub, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReflectionPad1d"), aclnnStatus, nnReflectionPad1d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSwinTransformerLnQkvQuant"), aclnnStatus, nnSwinTransformerLnQkvQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceMaskedScatter"), aclnnStatus, nnInplaceMaskedScatter, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeScalar"), aclnnStatus, nnGeScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceGeScalar"), aclnnStatus, nnInplaceGeScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceScatterUpdate"), aclnnStatus, nnInplaceScatterUpdate, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMedian"), aclnnStatus, nnMedian, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMedianDim"), aclnnStatus, nnMedianDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNanMedian"), aclnnStatus, nnNanMedian, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNanMedianDim"), aclnnStatus, nnNanMedianDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBitwiseXorTensor"), aclnnStatus, nnBitwiseXorTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBitwiseXorTensor"), aclnnStatus, nnInplaceBitwiseXorTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSiluBackward"), aclnnStatus, nnSiluBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnApplyFusedEmaAdam"), aclnnStatus, nnApplyFusedEmaAdam, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBitwiseOrTensor"), aclnnStatus, nnBitwiseOrTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBitwiseOrTensor"), aclnnStatus, nnInplaceBitwiseOrTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxPool2dWithMaskBackward"), aclnnStatus, nnMaxPool2dWithMaskBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxPool2dWithIndicesBackward"), aclnnStatus, nnMaxPool2dWithIndicesBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachZeroInplace"), aclnnStatus, nnForeachZeroInplace, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMulScalar"), aclnnStatus, nnForeachMulScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnApplyAdamWV2"), aclnnStatus, nnApplyAdamWV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSliceV2"), aclnnStatus, nnSliceV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRoiAlign"), aclnnStatus, nnRoiAlign, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulAllReduceV3"), aclnnStatus, nnQuantMatmulAllReduceV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGridSampler2DBackward"), aclnnStatus, nnGridSampler2DBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAlltoAllAllGatherBatchMatMul"), aclnnStatus, nnAlltoAllAllGatherBatchMatMul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEqTensor"), aclnnStatus, nnEqTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceEqTensor"), aclnnStatus, nnInplaceEqTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTrunc"), aclnnStatus, nnTrunc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceTrunc"), aclnnStatus, nnInplaceTrunc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLeScalar"), aclnnStatus, nnLeScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLeScalar"), aclnnStatus, nnInplaceLeScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDeepNormGrad"), aclnnStatus, nnDeepNormGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnStack"), aclnnStatus, nnStack, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBincount"), aclnnStatus, nnBincount, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcmulScalarList"), aclnnStatus, nnForeachAddcmulScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBicubic2dBackward"), aclnnStatus, nnUpsampleBicubic2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBitwiseAndScalar"), aclnnStatus, nnBitwiseAndScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBitwiseAndScalar"), aclnnStatus, nnInplaceBitwiseAndScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchNormElemt"), aclnnStatus, nnBatchNormElemt, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupedMatMulAllReduce"), aclnnStatus, nnGroupedMatMulAllReduce, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLinalgQr"), aclnnStatus, nnLinalgQr, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnChamferDistanceBackward"), aclnnStatus, nnChamferDistanceBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCumsum"), aclnnStatus, nnCumsum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCumsumV2"), aclnnStatus, nnCumsumV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachExp"), aclnnStatus, nnForeachExp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachCopy"), aclnnStatus, nnForeachCopy, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachNeg"), aclnnStatus, nnForeachNeg, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEmbedding"), aclnnStatus, nnEmbedding, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachCos"), aclnnStatus, nnForeachCos, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearest2dBackward"), aclnnStatus, nnUpsampleNearest2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddLayerNormGrad"), aclnnStatus, nnAddLayerNormGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNeTensor"), aclnnStatus, nnNeTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceNeTensor"), aclnnStatus, nnInplaceNeTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogicalOr"), aclnnStatus, nnLogicalOr, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLogicalOr"), aclnnStatus, nnInplaceLogicalOr, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSplitTensor"), aclnnStatus, nnSplitTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLog10"), aclnnStatus, nnLog10, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLog10"), aclnnStatus, nnInplaceLog10, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGlobalMaxPool"), aclnnStatus, nnGlobalMaxPool, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxPool"), aclnnStatus, nnMaxPool, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleLinear1d"), aclnnStatus, nnUpsampleLinear1d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSinh"), aclnnStatus, nnSinh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSinh"), aclnnStatus, nnInplaceSinh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSubList"), aclnnStatus, nnForeachSubList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSin"), aclnnStatus, nnForeachSin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearest3d"), aclnnStatus, nnUpsampleNearest3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardsigmoidBackward"), aclnnStatus, nnHardsigmoidBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeGatingTopKSoftmaxV2"), aclnnStatus, nnMoeGatingTopKSoftmaxV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMseLossOut"), aclnnStatus, nnMseLossOut, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeGatingTopKSoftmax"), aclnnStatus, nnMoeGatingTopKSoftmax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddcdiv"), aclnnStatus, nnAddcdiv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAddcdiv"), aclnnStatus, nnInplaceAddcdiv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSign"), aclnnStatus, nnForeachSign, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAllGatherMatmul"), aclnnStatus, nnAllGatherMatmul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMinimumScalar"), aclnnStatus, nnForeachMinimumScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSort"), aclnnStatus, nnSort, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMulList"), aclnnStatus, nnForeachMulList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMaximumScalar"), aclnnStatus, nnForeachMaximumScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAdaptiveAvgPool2dBackward"), aclnnStatus, nnAdaptiveAvgPool2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcmulScalar"), aclnnStatus, nnForeachAddcmulScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceMaskedFillTensor"), aclnnStatus, nnInplaceMaskedFillTensor, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReduceLogSum"), aclnnStatus, nnReduceLogSum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceZero"), aclnnStatus, nnInplaceZero, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnResize"), aclnnStatus, nnResize, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSinkhorn"), aclnnStatus, nnSinkhorn, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPromptFlashAttentionV2"), aclnnStatus, nnPromptFlashAttentionV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxN"), aclnnStatus, nnMaxN, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMean"), aclnnStatus, nnMean, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMeanV2"), aclnnStatus, nnMeanV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeFinalizeRoutingV2Grad"), aclnnStatus, nnMoeFinalizeRoutingV2Grad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeTokenPermute"), aclnnStatus, nnMoeTokenPermute, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceMatmulAllReduceAddRmsNorm"), aclnnStatus, nnInplaceMatmulAllReduceAddRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMaximumList"), aclnnStatus, nnForeachMaximumList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnVar"), aclnnStatus, nnVar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnVarCorrection"), aclnnStatus, nnVarCorrection, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLtTensor"), aclnnStatus, nnLtTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLtTensor"), aclnnStatus, nnInplaceLtTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTril"), aclnnStatus, nnTril, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceTril"), aclnnStatus, nnInplaceTril, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFFNV2"), aclnnStatus, nnFFNV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAtanh"), aclnnStatus, nnAtanh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAtanh"), aclnnStatus, nnInplaceAtanh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddcmul"), aclnnStatus, nnAddcmul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAddcmul"), aclnnStatus, nnInplaceAddcmul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIsInScalarTensor"), aclnnStatus, nnIsInScalarTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAdaptiveAvgPool2d"), aclnnStatus, nnAdaptiveAvgPool2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAcosh"), aclnnStatus, nnAcosh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAcosh"), aclnnStatus, nnInplaceAcosh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchNorm"), aclnnStatus, nnBatchNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCast"), aclnnStatus, nnCast, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReplicationPad1dBackward"), aclnnStatus, nnReplicationPad1dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAtan"), aclnnStatus, nnForeachAtan, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSubListV2"), aclnnStatus, nnForeachSubListV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceQuantMatmulAllReduceAddRmsNorm"), aclnnStatus, nnInplaceQuantMatmulAllReduceAddRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulAllReduceAddRmsNorm"), aclnnStatus, nnQuantMatmulAllReduceAddRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFloorDivide"), aclnnStatus, nnFloorDivide, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFloorDivides"), aclnnStatus, nnFloorDivides, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFloorDivide"), aclnnStatus, nnInplaceFloorDivide, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFloorDivides"), aclnnStatus, nnInplaceFloorDivides, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogSigmoid"), aclnnStatus, nnLogSigmoid, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogSigmoidForward"), aclnnStatus, nnLogSigmoidForward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAll"), aclnnStatus, nnAll, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftshrinkBackward"), aclnnStatus, nnSoftshrinkBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearest1dBackward"), aclnnStatus, nnUpsampleNearest1dBackward, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSeluBackward"), aclnnStatus, nnSeluBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAdaptiveMaxPool2d"), aclnnStatus, nnAdaptiveMaxPool2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddr"), aclnnStatus, nnAddr, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAddr"), aclnnStatus, nnInplaceAddr, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCelu"), aclnnStatus, nnCelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceCelu"), aclnnStatus, nnInplaceCelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnWeightQuantBatchMatmulV2"), aclnnStatus, nnWeightQuantBatchMatmulV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMulScalarList"), aclnnStatus, nnForeachMulScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDiag"), aclnnStatus, nnDiag, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAminmaxDim"), aclnnStatus, nnAminmaxDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSigmoidBackward"), aclnnStatus, nnSigmoidBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMatmulCompressDequant"), aclnnStatus, nnMatmulCompressDequant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReduceNansum"), aclnnStatus, nnReduceNansum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAdd"), aclnnStatus, nnAdd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAdds"), aclnnStatus, nnAdds, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAdd"), aclnnStatus, nnInplaceAdd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAdds"), aclnnStatus, nnInplaceAdds, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNorm"), aclnnStatus, nnNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnOneHot"), aclnnStatus, nnOneHot, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearestExact2d"), aclnnStatus, nnUpsampleNearestExact2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachErfc"), aclnnStatus, nnForeachErfc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRingAttentionUpdate"), aclnnStatus, nnRingAttentionUpdate, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPrecisionCompare"), aclnnStatus, nnPrecisionCompare, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachLerpList"), aclnnStatus, nnForeachLerpList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeInitRoutingQuant"), aclnnStatus, nnMoeInitRoutingQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnChannelShuffle"), aclnnStatus, nnChannelShuffle, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRReluWithNoise"), aclnnStatus, nnRReluWithNoise, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRReluWithNoise"), aclnnStatus, nnInplaceRReluWithNoise, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSub"), aclnnStatus, nnSub, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSubs"), aclnnStatus, nnSubs, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSub"), aclnnStatus, nnInplaceSub, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSubs"), aclnnStatus, nnInplaceSubs, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBinaryCrossEntropy"), aclnnStatus, nnBinaryCrossEntropy, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnXLogYTensor"), aclnnStatus, nnXLogYTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceXLogYTensor"), aclnnStatus, nnInplaceXLogYTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnConvolution"), aclnnStatus, nnConvolution, void *, workspace, const uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnConvTbc"), aclnnStatus, nnConvTbc, void *, workspace, const uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnConvDepthwise2d"), aclnnStatus, nnConvDepthwise2d, void *, workspace, const uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSplitWithSize"), aclnnStatus, nnSplitWithSize, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSigmoid"), aclnnStatus, nnForeachSigmoid, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachErf"), aclnnStatus, nnForeachErf, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLayerNorm"), aclnnStatus, nnLayerNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLayerNormWithImplMode"), aclnnStatus, nnLayerNormWithImplMode, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxUnpool2dBackward"), aclnnStatus, nnMaxUnpool2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBitwiseNot"), aclnnStatus, nnBitwiseNot, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSigmoid"), aclnnStatus, nnSigmoid, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSigmoid"), aclnnStatus, nnInplaceSigmoid, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLgamma"), aclnnStatus, nnLgamma, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachLog10"), aclnnStatus, nnForeachLog10, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddbmm"), aclnnStatus, nnAddbmm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAddbmm"), aclnnStatus, nnInplaceAddbmm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnArgsort"), aclnnStatus, nnArgsort, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIsPosInf"), aclnnStatus, nnIsPosInf, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxDim"), aclnnStatus, nnMaxDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupedBiasAddGrad"), aclnnStatus, nnGroupedBiasAddGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupedBiasAddGradV2"), aclnnStatus, nnGroupedBiasAddGradV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIndexCopy"), aclnnStatus, nnIndexCopy, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceIndexCopy"), aclnnStatus, nnInplaceIndexCopy, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcmulScalarV2"), aclnnStatus, nnForeachAddcmulScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeTokenUnpermuteGrad"), aclnnStatus, nnMoeTokenUnpermuteGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRepeatInterleave"), aclnnStatus, nnRepeatInterleave, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRepeatInterleaveWithDim"), aclnnStatus, nnRepeatInterleaveWithDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRepeatInterleaveInt"), aclnnStatus, nnRepeatInterleaveInt, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRepeatInterleaveIntWithDim"), aclnnStatus, nnRepeatInterleaveIntWithDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRepeatInterleaveTensor"), aclnnStatus, nnRepeatInterleaveTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogicalXor"), aclnnStatus, nnLogicalXor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAbs"), aclnnStatus, nnAbs, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBilinear2d"), aclnnStatus, nnUpsampleBilinear2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearestExact3d"), aclnnStatus, nnUpsampleNearestExact3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachDivScalarV2"), aclnnStatus, nnForeachDivScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTriangularSolve"), aclnnStatus, nnTriangularSolve, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftplusBackward"), aclnnStatus, nnSoftplusBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCircularPad3dBackward"), aclnnStatus, nnCircularPad3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLeakyRelu"), aclnnStatus, nnLeakyRelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLeakyRelu"), aclnnStatus, nnInplaceLeakyRelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachPowScalarAndTensor"), aclnnStatus, nnForeachPowScalarAndTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnScatterNd"), aclnnStatus, nnScatterNd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReduceSum"), aclnnStatus, nnReduceSum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeInitRoutingV2Grad"), aclnnStatus, nnMoeInitRoutingV2Grad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIndexSelect"), aclnnStatus, nnIndexSelect, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSearchSorted"), aclnnStatus, nnSearchSorted, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSearchSorteds"), aclnnStatus, nnSearchSorteds, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachNorm"), aclnnStatus, nnForeachNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLeakyReluBackward"), aclnnStatus, nnLeakyReluBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMish"), aclnnStatus, nnMish, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceMish"), aclnnStatus, nnInplaceMish, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMinimum"), aclnnStatus, nnMinimum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnArange"), aclnnStatus, nnArange, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeComputeExpertTokens"), aclnnStatus, nnMoeComputeExpertTokens, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFloor"), aclnnStatus, nnFloor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFloor"), aclnnStatus, nnInplaceFloor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTan"), aclnnStatus, nnTan, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceTan"), aclnnStatus, nnInplaceTan, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupQuant"), aclnnStatus, nnGroupQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardswishBackward"), aclnnStatus, nnHardswishBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIsFinite"), aclnnStatus, nnIsFinite, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFrac"), aclnnStatus, nnFrac, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFrac"), aclnnStatus, nnInplaceFrac, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddScalarV2"), aclnnStatus, nnForeachAddScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnErfc"), aclnnStatus, nnErfc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceErfc"), aclnnStatus, nnInplaceErfc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceQuantScatter"), aclnnStatus, nnInplaceQuantScatter, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFillTensor"), aclnnStatus, nnInplaceFillTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAtan"), aclnnStatus, nnAtan, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAtan"), aclnnStatus, nnInplaceAtan, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReflectionPad1dBackward"), aclnnStatus, nnReflectionPad1dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPolar"), aclnnStatus, nnPolar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnKlDivBackward"), aclnnStatus, nnKlDivBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachLog"), aclnnStatus, nnForeachLog, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachDivScalarList"), aclnnStatus, nnForeachDivScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNLLLoss2dBackward"), aclnnStatus, nnNLLLoss2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAdaptiveAvgPool3d"), aclnnStatus, nnAdaptiveAvgPool3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGer"), aclnnStatus, nnGer, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEmbeddingDenseBackward"), aclnnStatus, nnEmbeddingDenseBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSmoothL1LossBackward"), aclnnStatus, nnSmoothL1LossBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReflectionPad2dBackward"), aclnnStatus, nnReflectionPad2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReplicationPad2dBackward"), aclnnStatus, nnReplicationPad2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIndexFillTensor"), aclnnStatus, nnIndexFillTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceIndexFillTensor"), aclnnStatus, nnInplaceIndexFillTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHistc"), aclnnStatus, nnHistc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmul"), aclnnStatus, nnQuantMatmul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulV2"), aclnnStatus, nnQuantMatmulV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAtan2"), aclnnStatus, nnAtan2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAtan2"), aclnnStatus, nnInplaceAtan2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnScatter"), aclnnStatus, nnScatter, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnScatterValue"), aclnnStatus, nnScatterValue, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceScatter"), aclnnStatus, nnInplaceScatter, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceScatterValue"), aclnnStatus, nnInplaceScatterValue, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMishBackward"), aclnnStatus, nnMishBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGlobalAveragePool"), aclnnStatus, nnGlobalAveragePool, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplacePut"), aclnnStatus, nnInplacePut, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnThresholdBackward"), aclnnStatus, nnThresholdBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMinimumScalarList"), aclnnStatus, nnForeachMinimumScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardswish"), aclnnStatus, nnHardswish, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceHardswish"), aclnnStatus, nnInplaceHardswish, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGtTensor"), aclnnStatus, nnGtTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceGtTensor"), aclnnStatus, nnInplaceGtTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMaximumScalarV2"), aclnnStatus, nnForeachMaximumScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBilinear2dBackward"), aclnnStatus, nnUpsampleBilinear2dBackward, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEmbeddingBag"), aclnnStatus, nnEmbeddingBag, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBitwiseOrScalar"), aclnnStatus, nnBitwiseOrScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBitwiseOrScalar"), aclnnStatus, nnInplaceBitwiseOrScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBitwiseXorScalar"), aclnnStatus, nnBitwiseXorScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBitwiseXorScalar"), aclnnStatus, nnInplaceBitwiseXorScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMuls"), aclnnStatus, nnMuls, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMul"), aclnnStatus, nnMul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceMuls"), aclnnStatus, nnInplaceMuls, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceMul"), aclnnStatus, nnInplaceMul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNanToNum"), aclnnStatus, nnNanToNum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceNanToNum"), aclnnStatus, nnInplaceNanToNum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGcd"), aclnnStatus, nnGcd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReal"), aclnnStatus, nnReal, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeTensor"), aclnnStatus, nnGeTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceGeTensor"), aclnnStatus, nnInplaceGeTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFFNV3"), aclnnStatus, nnFFNV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardshrink"), aclnnStatus, nnHardshrink, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRenorm"), aclnnStatus, nnRenorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRenorm"), aclnnStatus, nnInplaceRenorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInstanceNorm"), aclnnStatus, nnInstanceNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBinaryCrossEntropyWithLogitsBackward"), aclnnStatus, nnBinaryCrossEntropyWithLogitsBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEye"), aclnnStatus, nnEye, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCircularPad2d"), aclnnStatus, nnCircularPad2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAminmaxAll"), aclnnStatus, nnAminmaxAll, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLinalgCross"), aclnnStatus, nnLinalgCross, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftMarginLossBackward"), aclnnStatus, nnSoftMarginLossBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulV3"), aclnnStatus, nnQuantMatmulV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSum"), aclnnStatus, nnSum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcmulList"), aclnnStatus, nnForeachAddcmulList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAdaptiveAvgPool3dBackward"), aclnnStatus, nnAdaptiveAvgPool3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAbs"), aclnnStatus, nnForeachAbs, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGlu"), aclnnStatus, nnGlu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCeil"), aclnnStatus, nnCeil, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceCeil"), aclnnStatus, nnInplaceCeil, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddmv"), aclnnStatus, nnAddmv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPromptFlashAttentionV3"), aclnnStatus, nnPromptFlashAttentionV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnWeightQuantBatchMatmulV3"), aclnnStatus, nnWeightQuantBatchMatmulV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLerps"), aclnnStatus, nnLerps, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLerps"), aclnnStatus, nnInplaceLerps, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFmodTensor"), aclnnStatus, nnFmodTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFmodTensor"), aclnnStatus, nnInplaceFmodTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPowTensorTensor"), aclnnStatus, nnPowTensorTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplacePowTensorTensor"), aclnnStatus, nnInplacePowTensorTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDynamicQuantV2"), aclnnStatus, nnDynamicQuantV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupedMatmulV4"), aclnnStatus, nnGroupedMatmulV4, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogicalAnd"), aclnnStatus, nnLogicalAnd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLogicalAnd"), aclnnStatus, nnInplaceLogicalAnd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNLLLoss"), aclnnStatus, nnNLLLoss, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearest3dBackward"), aclnnStatus, nnUpsampleNearest3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNonzero"), aclnnStatus, nnNonzero, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPreluBackward"), aclnnStatus, nnPreluBackward, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMseLoss"), aclnnStatus, nnMseLoss, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIndex"), aclnnStatus, nnIndex, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReplicationPad3dBackward"), aclnnStatus, nnReplicationPad3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCalculateConvolutionWeightSize"), aclnnStatus, nnCalculateConvolutionWeightSize, const aclIntArray *, tensorShape, bool, transposed, int64_t, groups, aclDataType, dataType, uint64_t *, weightTensorSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTransConvolutionWeight"), aclnnStatus, nnTransConvolutionWeight, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCtcLoss"), aclnnStatus, nnCtcLoss, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachTan"), aclnnStatus, nnForeachTan, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftmaxBackward"), aclnnStatus, nnSoftmaxBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeFinalizeRouting"), aclnnStatus, nnMoeFinalizeRouting, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLog"), aclnnStatus, nnLog, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLog"), aclnnStatus, nnInplaceLog, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIm2col"), aclnnStatus, nnIm2col, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantize"), aclnnStatus, nnQuantize, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnProd"), aclnnStatus, nnProd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnProdDim"), aclnnStatus, nnProdDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIncreFlashAttentionV4"), aclnnStatus, nnIncreFlashAttentionV4, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardshrinkBackward"), aclnnStatus, nnHardshrinkBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTanh"), aclnnStatus, nnTanh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceTanh"), aclnnStatus, nnInplaceTanh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnScale"), aclnnStatus, nnScale, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxUnpool2d"), aclnnStatus, nnMaxUnpool2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnConstantPadNd"), aclnnStatus, nnConstantPadNd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCosh"), aclnnStatus, nnCosh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceCosh"), aclnnStatus, nnInplaceCosh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchNormGatherStatsWithCounts"), aclnnStatus, nnBatchNormGatherStatsWithCounts, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMm"), aclnnStatus, nnMm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRange"), aclnnStatus, nnRange, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnStdMeanCorrection"), aclnnStatus, nnStdMeanCorrection, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnElu"), aclnnStatus, nnElu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceElu"), aclnnStatus, nnInplaceElu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGridSampler3DBackward"), aclnnStatus, nnGridSampler3DBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBicubic2d"), aclnnStatus, nnUpsampleBicubic2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnWeightQuantMatmulAllReduceAddRmsNorm"), aclnnStatus, nnWeightQuantMatmulAllReduceAddRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGridSampler3D"), aclnnStatus, nnGridSampler3D, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIsInTensorScalar"), aclnnStatus, nnIsInTensorScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBinaryCrossEntropyBackward"), aclnnStatus, nnBinaryCrossEntropyBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTanhBackward"), aclnnStatus, nnTanhBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddScalar"), aclnnStatus, nnForeachAddScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSwishBackward"), aclnnStatus, nnSwishBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnStridedSliceAssignV2"), aclnnStatus, nnStridedSliceAssignV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTransQuantParamV2"), aclnnStatus, nnTransQuantParamV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBlendImagesCustom"), aclnnStatus, nnBlendImagesCustom, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSwinAttentionScoreQuant"), aclnnStatus, nnSwinAttentionScoreQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBaddbmm"), aclnnStatus, nnBaddbmm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBaddbmm"), aclnnStatus, nnInplaceBaddbmm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceMaskedFillScalar"), aclnnStatus, nnInplaceMaskedFillScalar, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnWeightQuantBatchMatmul"), aclnnStatus, nnWeightQuantBatchMatmul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTransQuantParam"), aclnnStatus, nnTransQuantParam, const float *, scaleArray, uint64_t, scaleSize, const float *, offsetArray, uint64_t, offsetSize, uint64_t **, quantParam, uint64_t *, quantParamSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMinDim"), aclnnStatus, nnMinDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnShrink"), aclnnStatus, nnShrink, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxUnpool3d"), aclnnStatus, nnMaxUnpool3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnApplyRotaryPosEmb"), aclnnStatus, nnApplyRotaryPosEmb, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSubScalarV2"), aclnnStatus, nnForeachSubScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDeepNorm"), aclnnStatus, nnDeepNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddListV2"), aclnnStatus, nnForeachAddListV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnKlDiv"), aclnnStatus, nnKlDiv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachLerpScalar"), aclnnStatus, nnForeachLerpScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAmax"), aclnnStatus, nnAmax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIm2colBackward"), aclnnStatus, nnIm2colBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnKthvalue"), aclnnStatus, nnKthvalue, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAvgPool2dBackward"), aclnnStatus, nnAvgPool2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFFN"), aclnnStatus, nnFFN, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGridSampler2D"), aclnnStatus, nnGridSampler2D, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMatmulAllReduceAddRmsNorm"), aclnnStatus, nnMatmulAllReduceAddRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachPowList"), aclnnStatus, nnForeachPowList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaximum"), aclnnStatus, nnMaximum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupNormSwish"), aclnnStatus, nnGroupNormSwish, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachCosh"), aclnnStatus, nnForeachCosh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLog1p"), aclnnStatus, nnLog1p, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLog1p"), aclnnStatus, nnInplaceLog1p, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTriu"), aclnnStatus, nnTriu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceTriu"), aclnnStatus, nnInplaceTriu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFakeQuantPerTensorAffineCachemask"), aclnnStatus, nnFakeQuantPerTensorAffineCachemask, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachTanh"), aclnnStatus, nnForeachTanh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNeScalar"), aclnnStatus, nnNeScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceNeScalar"), aclnnStatus, nnInplaceNeScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGatherNd"), aclnnStatus, nnGatherNd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIncreFlashAttention"), aclnnStatus, nnIncreFlashAttention, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDot"), aclnnStatus, nnDot, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachDivList"), aclnnStatus, nnForeachDivList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMax"), aclnnStatus, nnMax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBilinear2dAABackward"), aclnnStatus, nnUpsampleBilinear2dAABackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMatmul"), aclnnStatus, nnMatmul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRepeat"), aclnnStatus, nnRepeat, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUniqueConsecutive"), aclnnStatus, nnUniqueConsecutive, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDiagFlat"), aclnnStatus, nnDiagFlat, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEqual"), aclnnStatus, nnEqual, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReflectionPad3dBackward"), aclnnStatus, nnReflectionPad3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnScatterAdd"), aclnnStatus, nnScatterAdd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclRfft1D"), aclnnStatus, Rfft1D, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionScoreGrad"), aclnnStatus, nnFlashAttentionScoreGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionUnpaddingScoreGrad"), aclnnStatus, nnFlashAttentionUnpaddingScoreGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionScoreGradV2"), aclnnStatus, nnFlashAttentionScoreGradV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionUnpaddingScoreGradV2"), aclnnStatus, nnFlashAttentionUnpaddingScoreGradV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBitwiseAndTensor"), aclnnStatus, nnBitwiseAndTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceBitwiseAndTensor"), aclnnStatus, nnInplaceBitwiseAndTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftshrink"), aclnnStatus, nnSoftshrink, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearestExact2dBackward"), aclnnStatus, nnUpsampleNearestExact2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceOne"), aclnnStatus, nnInplaceOne, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBackgroundReplace"), aclnnStatus, nnBackgroundReplace, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnClamp"), aclnnStatus, nnClamp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnClampMin"), aclnnStatus, nnClampMin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnClampMinTensor"), aclnnStatus, nnClampMinTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceClampMinTensor"), aclnnStatus, nnInplaceClampMinTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnClampTensor"), aclnnStatus, nnClampTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnClampMax"), aclnnStatus, nnClampMax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceClampMax"), aclnnStatus, nnInplaceClampMax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnClampMaxTensor"), aclnnStatus, nnClampMaxTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceClampMaxTensor"), aclnnStatus, nnInplaceClampMaxTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachExpm1"), aclnnStatus, nnForeachExpm1, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaskedSoftmaxWithRelPosBias"), aclnnStatus, nnMaskedSoftmaxWithRelPosBias, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachPowScalar"), aclnnStatus, nnForeachPowScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAffineGrid"), aclnnStatus, nnAffineGrid, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchMatMul"), aclnnStatus, nnBatchMatMul, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSubScalarList"), aclnnStatus, nnForeachSubScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnErf"), aclnnStatus, nnErf, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceErf"), aclnnStatus, nnInplaceErf, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLeTensor"), aclnnStatus, nnLeTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLeTensor"), aclnnStatus, nnInplaceLeTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeluBackward"), aclnnStatus, nnGeluBackward, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMatmulAllReduce"), aclnnStatus, nnMatmulAllReduce, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEqScalar"), aclnnStatus, nnEqScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceEqScalar"), aclnnStatus, nnInplaceEqScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAscendAntiQuant"), aclnnStatus, nnAscendAntiQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNonzeroV2"), aclnnStatus, nnNonzeroV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCummin"), aclnnStatus, nnCummin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxPool3dWithArgmaxBackward"), aclnnStatus, nnMaxPool3dWithArgmaxBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeInitRouting"), aclnnStatus, nnMoeInitRouting, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnArgMin"), aclnnStatus, nnArgMin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUnique2"), aclnnStatus, nnUnique2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInverse"), aclnnStatus, nnInverse, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUniqueDim"), aclnnStatus, nnUniqueDim, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupNormSilu"), aclnnStatus, nnGroupNormSilu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupNormSiluV2"), aclnnStatus, nnGroupNormSiluV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRmsNorm"), aclnnStatus, nnRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddRmsNorm"), aclnnStatus, nnAddRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeTokenUnpermute"), aclnnStatus, nnMoeTokenUnpermute, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleTrilinear3dBackward"), aclnnStatus, nnUpsampleTrilinear3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRemainderTensorTensor"), aclnnStatus, nnRemainderTensorTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRemainderTensorScalar"), aclnnStatus, nnRemainderTensorScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRemainderScalarTensor"), aclnnStatus, nnRemainderScalarTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRemainderTensorTensor"), aclnnStatus, nnInplaceRemainderTensorTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRemainderTensorScalar"), aclnnStatus, nnInplaceRemainderTensorScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSqrt"), aclnnStatus, nnForeachSqrt, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLog2"), aclnnStatus, nnLog2, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLog2"), aclnnStatus, nnInplaceLog2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnXLogYScalarSelf"), aclnnStatus, nnXLogYScalarSelf, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclStft"), aclnnStatus, Stft, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachLog1p"), aclnnStatus, nnForeachLog1p, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIsClose"), aclnnStatus, nnIsClose, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMinimumList"), aclnnStatus, nnForeachMinimumList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMoeTokenPermuteGrad"), aclnnStatus, nnMoeTokenPermuteGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReplicationPad3d"), aclnnStatus, nnReplicationPad3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSwish"), aclnnStatus, nnSwish, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIndexPutImpl"), aclnnStatus, nnIndexPutImpl, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachRoundOffNumberV2"), aclnnStatus, nnForeachRoundOffNumberV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddLayerNorm"), aclnnStatus, nnAddLayerNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIncreFlashAttentionV3"), aclnnStatus, nnIncreFlashAttentionV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchMatMulReduceScatterAlltoAll"), aclnnStatus, nnBatchMatMulReduceScatterAlltoAll, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMulScalarV2"), aclnnStatus, nnForeachMulScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearestExact1dBackward"), aclnnStatus, nnUpsampleNearestExact1dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAvgPool3d"), aclnnStatus, nnAvgPool3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCat"), aclnnStatus, nnCat, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAsin"), aclnnStatus, nnAsin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAsin"), aclnnStatus, nnInplaceAsin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnExp"), aclnnStatus, nnExp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceExp"), aclnnStatus, nnInplaceExp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMultiScaleDeformableAttentionGrad"), aclnnStatus, nnMultiScaleDeformableAttentionGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleTrilinear3d"), aclnnStatus, nnUpsampleTrilinear3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaskedSelect"), aclnnStatus, nnMaskedSelect, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceWeightQuantMatmulAllReduceAddRmsNorm"), aclnnStatus, nnInplaceWeightQuantMatmulAllReduceAddRmsNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddScalarList"), aclnnStatus, nnForeachAddScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNeg"), aclnnStatus, nnNeg, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceNeg"), aclnnStatus, nnInplaceNeg, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSWhere"), aclnnStatus, nnSWhere, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCos"), aclnnStatus, nnCos, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceCos"), aclnnStatus, nnInplaceCos, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcdivScalarV2"), aclnnStatus, nnForeachAddcdivScalarV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGemm"), aclnnStatus, nnGemm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReflectionPad3d"), aclnnStatus, nnReflectionPad3d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMatmulAllReduceV2"), aclnnStatus, nnMatmulAllReduceV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMseLossBackward"), aclnnStatus, nnMseLossBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnExpand"), aclnnStatus, nnExpand, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBidirectionLSTMV2"), aclnnStatus, nnBidirectionLSTMV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachRoundOffNumber"), aclnnStatus, nnForeachRoundOffNumber, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEmbeddingRenorm"), aclnnStatus, nnEmbeddingRenorm, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSlogdet"), aclnnStatus, nnSlogdet, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGelu"), aclnnStatus, nnGelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulV4"), aclnnStatus, nnQuantMatmulV4, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSin"), aclnnStatus, nnSin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSin"), aclnnStatus, nnInplaceSin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAcos"), aclnnStatus, nnAcos, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAcos"), aclnnStatus, nnInplaceAcos, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPrelu"), aclnnStatus, nnPrelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAscendQuantV3"), aclnnStatus, nnAscendQuantV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRound"), aclnnStatus, nnRound, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRound"), aclnnStatus, nnInplaceRound, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRoundDecimals"), aclnnStatus, nnRoundDecimals, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRoundDecimals"), aclnnStatus, nnInplaceRoundDecimals, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMinN"), aclnnStatus, nnMinN, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMultiScaleDeformableAttnFunction"), aclnnStatus, nnMultiScaleDeformableAttnFunction, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlip"), aclnnStatus, nnFlip, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnExpm1"), aclnnStatus, nnExpm1, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceExpm1"), aclnnStatus, nnInplaceExpm1, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLinalgVectorNorm"), aclnnStatus, nnLinalgVectorNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogSumExp"), aclnnStatus, nnLogSumExp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFakeQuantPerChannelAffineCachemask"), aclnnStatus, nnFakeQuantPerChannelAffineCachemask, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNLLLoss2d"), aclnnStatus, nnNLLLoss2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachPowScalarList"), aclnnStatus, nnForeachPowScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogSoftmaxBackward"), aclnnStatus, nnLogSoftmaxBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCtcLossBackward"), aclnnStatus, nnCtcLossBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLtScalar"), aclnnStatus, nnLtScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLtScalar"), aclnnStatus, nnInplaceLtScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRmsNormGrad"), aclnnStatus, nnRmsNormGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRelu"), aclnnStatus, nnRelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRelu"), aclnnStatus, nnInplaceRelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupedMatmulV3"), aclnnStatus, nnGroupedMatmulV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnConvolutionBackward"), aclnnStatus, nnConvolutionBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnConvTbcBackward"), aclnnStatus, nnConvTbcBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupNormBackward"), aclnnStatus, nnGroupNormBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSlice"), aclnnStatus, nnSlice, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnCircularPad2dBackward"), aclnnStatus, nnCircularPad2dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMultilabelMarginLoss"), aclnnStatus, nnMultilabelMarginLoss, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBilinear2dAA"), aclnnStatus, nnUpsampleBilinear2dAA, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnWeightQuantMatmulAllReduce"), aclnnStatus, nnWeightQuantMatmulAllReduce, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIsNegInf"), aclnnStatus, nnIsNegInf, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogAddExp"), aclnnStatus, nnLogAddExp, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFusedInferAttentionScoreV2"), aclnnStatus, nnFusedInferAttentionScoreV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGtScalar"), aclnnStatus, nnGtScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceGtScalar"), aclnnStatus, nnInplaceGtScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogdet"), aclnnStatus, nnLogdet, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAny"), aclnnStatus, nnAny, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAddmm"), aclnnStatus, nnAddmm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAddmm"), aclnnStatus, nnInplaceAddmm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSelu"), aclnnStatus, nnSelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSelu"), aclnnStatus, nnInplaceSelu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftMarginLoss"), aclnnStatus, nnSoftMarginLoss, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleNearest1d"), aclnnStatus, nnUpsampleNearest1d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAsinh"), aclnnStatus, nnAsinh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceAsinh"), aclnnStatus, nnInplaceAsinh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlatten"), aclnnStatus, nnFlatten, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBinaryCrossEntropyWithLogits"), aclnnStatus, nnBinaryCrossEntropyWithLogits, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulAllReduceV2"), aclnnStatus, nnQuantMatmulAllReduceV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogSoftmax"), aclnnStatus, nnLogSoftmax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMaxUnpool3dBackward"), aclnnStatus, nnMaxUnpool3dBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGroupNorm"), aclnnStatus, nnGroupNorm, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTake"), aclnnStatus, nnTake, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeluV2"), aclnnStatus, nnGeluV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRoll"), aclnnStatus, nnRoll, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAcos"), aclnnStatus, nnForeachAcos, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddcdivScalar"), aclnnStatus, nnForeachAddcdivScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachMaximumScalarList"), aclnnStatus, nnForeachMaximumScalarList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachSubScalar"), aclnnStatus, nnForeachSubScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPowTensorScalar"), aclnnStatus, nnPowTensorScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplacePowTensorScalar"), aclnnStatus, nnInplacePowTensorScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPowScalarTensor"), aclnnStatus, nnPowScalarTensor, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLinspace"), aclnnStatus, nnLinspace, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEluBackward"), aclnnStatus, nnEluBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSilentCheck"), aclnnStatus, nnSilentCheck, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBidirectionLSTM"), aclnnStatus, nnBidirectionLSTM, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQuantMatmulAllReduce"), aclnnStatus, nnQuantMatmulAllReduce, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAddList"), aclnnStatus, nnForeachAddList, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceFillScalar"), aclnnStatus, nnInplaceFillScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMrgbaCustom"), aclnnStatus, nnMrgbaCustom, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnIndexAdd"), aclnnStatus, nnIndexAdd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnRsqrt"), aclnnStatus, nnRsqrt, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceRsqrt"), aclnnStatus, nnInplaceRsqrt, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSwiGlu"), aclnnStatus, nnSwiGlu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionScore"), aclnnStatus, nnFlashAttentionScore, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionVarLenScore"), aclnnStatus, nnFlashAttentionVarLenScore, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionScoreV2"), aclnnStatus, nnFlashAttentionScoreV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnFlashAttentionVarLenScoreV2"), aclnnStatus, nnFlashAttentionVarLenScoreV2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachAsin"), aclnnStatus, nnForeachAsin, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeluBackwardV2"), aclnnStatus, nnGeluBackwardV2, void *, workspace, uint64_t, workspace_size, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftmax"), aclnnStatus, nnSoftmax, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnEinsum"), aclnnStatus, nnEinsum, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSoftplus"), aclnnStatus, nnSoftplus, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReplicationPad2d"), aclnnStatus, nnReplicationPad2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachDivScalar"), aclnnStatus, nnForeachDivScalar, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSignbit"), aclnnStatus, nnSignbit, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSinc"), aclnnStatus, nnSinc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSinc"), aclnnStatus, nnInplaceSinc, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnBatchNormStats"), aclnnStatus, nnBatchNormStats, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeGlu"), aclnnStatus, nnGeGlu, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGeGluV3"), aclnnStatus, nnGeGluV3, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDigamma"), aclnnStatus, nnDigamma, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachLog2"), aclnnStatus, nnForeachLog2, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnGather"), aclnnStatus, nnGather, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAvgPool2d"), aclnnStatus, nnAvgPool2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnAscendQuant"), aclnnStatus, nnAscendQuant, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnStd"), aclnnStatus, nnStd, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSwiGluGrad"), aclnnStatus, nnSwiGluGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnHardtanh"), aclnnStatus, nnHardtanh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceHardtanh"), aclnnStatus, nnInplaceHardtanh, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBicubic2dAAGrad"), aclnnStatus, nnUpsampleBicubic2dAAGrad, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnSqrt"), aclnnStatus, nnSqrt, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, opExecutor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceSqrt"), aclnnStatus, nnInplaceSqrt, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnPermute"), aclnnStatus, nnPermute, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnReflectionPad2d"), aclnnStatus, nnReflectionPad2d, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnLogicalNot"), aclnnStatus, nnLogicalNot, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceLogicalNot"), aclnnStatus, nnInplaceLogicalNot, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNonMaxSuppression"), aclnnStatus, nnNonMaxSuppression, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnTopk"), aclnnStatus, nnTopk, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, const aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDiv"), aclnnStatus, nnDiv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDivs"), aclnnStatus, nnDivs, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDivMod"), aclnnStatus, nnDivMod, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnDivMods"), aclnnStatus, nnDivMods, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceDiv"), aclnnStatus, nnInplaceDiv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceDivs"), aclnnStatus, nnInplaceDivs, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceDivMod"), aclnnStatus, nnInplaceDivMod, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceDivMods"), aclnnStatus, nnInplaceDivMods, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnMv"), aclnnStatus, nnMv, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnQr"), aclnnStatus, nnQr, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnScatterNdUpdate"), aclnnStatus, nnScatterNdUpdate, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnNLLLossBackward"), aclnnStatus, nnNLLLossBackward, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnUpsampleBicubic2dAA"), aclnnStatus, nnUpsampleBicubic2dAA, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnThreshold"), aclnnStatus, nnThreshold, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnInplaceThreshold"), aclnnStatus, nnInplaceThreshold, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("aclnnForeachReciprocal"), aclnnStatus, nnForeachReciprocal, void *, workspace, uint64_t, workspaceSize, aclOpExecutor *, executor, aclrtStream, stream);

};

} // namespace xsched::ascend
