/// This file is auto-generated by command "python3 tools/autogen/gen.py --source platforms/levelzero/hal/include/xsched/levelzero/hal/ze_api.h --lib /usr/lib/x86_64-linux-gnu/libze_loader.so --platform levelzero --prefix ze -I /usr/lib/gcc/x86_64-linux-gnu/13/include"
#pragma once

#include "xsched/protocol/def.h"
#include "xsched/utils/common.h"
#include "xsched/utils/symbol.h"
#include "xsched/utils/function.h"
#include "xsched/levelzero/hal/ze_api.h"

namespace xsched::levelzero
{

class Driver
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, XSCHED_LEVELZERO_LIB_ENV_NAME,
                           std::vector<std::string>({"libze_loader.so", "libze_loader.so.1"}), // search name
                           std::vector<std::string>({})); // search path

public:
    STATIC_CLASS(Driver);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeInit"), ze_result_t, Init, ze_init_flags_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGet"), ze_result_t, DriverGet, uint32_t *, pCount, ze_driver_handle_t *, phDrivers);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeInitDrivers"), ze_result_t, InitDrivers, uint32_t *, pCount, ze_driver_handle_t *, phDrivers, ze_init_driver_type_desc_t *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetApiVersion"), ze_result_t, DriverGetApiVersion, ze_driver_handle_t, hDriver, ze_api_version_t *, version);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetProperties"), ze_result_t, DriverGetProperties, ze_driver_handle_t, hDriver, ze_driver_properties_t *, pDriverProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetIpcProperties"), ze_result_t, DriverGetIpcProperties, ze_driver_handle_t, hDriver, ze_driver_ipc_properties_t *, pIpcProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetExtensionProperties"), ze_result_t, DriverGetExtensionProperties, ze_driver_handle_t, hDriver, uint32_t *, pCount, ze_driver_extension_properties_t *, pExtensionProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetExtensionFunctionAddress"), ze_result_t, DriverGetExtensionFunctionAddress, ze_driver_handle_t, hDriver, const char *, name, void **, ppFunctionAddress);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetLastErrorDescription"), ze_result_t, DriverGetLastErrorDescription, ze_driver_handle_t, hDriver, const char **, ppString);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGet"), ze_result_t, DeviceGet, ze_driver_handle_t, hDriver, uint32_t *, pCount, ze_device_handle_t *, phDevices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetRootDevice"), ze_result_t, DeviceGetRootDevice, ze_device_handle_t, hDevice, ze_device_handle_t *, phRootDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetSubDevices"), ze_result_t, DeviceGetSubDevices, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_device_handle_t *, phSubdevices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetProperties"), ze_result_t, DeviceGetProperties, ze_device_handle_t, hDevice, ze_device_properties_t *, pDeviceProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetComputeProperties"), ze_result_t, DeviceGetComputeProperties, ze_device_handle_t, hDevice, ze_device_compute_properties_t *, pComputeProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetModuleProperties"), ze_result_t, DeviceGetModuleProperties, ze_device_handle_t, hDevice, ze_device_module_properties_t *, pModuleProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetCommandQueueGroupProperties"), ze_result_t, DeviceGetCommandQueueGroupProperties, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_command_queue_group_properties_t *, pCommandQueueGroupProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetMemoryProperties"), ze_result_t, DeviceGetMemoryProperties, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_device_memory_properties_t *, pMemProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetMemoryAccessProperties"), ze_result_t, DeviceGetMemoryAccessProperties, ze_device_handle_t, hDevice, ze_device_memory_access_properties_t *, pMemAccessProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetCacheProperties"), ze_result_t, DeviceGetCacheProperties, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_device_cache_properties_t *, pCacheProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetImageProperties"), ze_result_t, DeviceGetImageProperties, ze_device_handle_t, hDevice, ze_device_image_properties_t *, pImageProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetExternalMemoryProperties"), ze_result_t, DeviceGetExternalMemoryProperties, ze_device_handle_t, hDevice, ze_device_external_memory_properties_t *, pExternalMemoryProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetP2PProperties"), ze_result_t, DeviceGetP2PProperties, ze_device_handle_t, hDevice, ze_device_handle_t, hPeerDevice, ze_device_p2p_properties_t *, pP2PProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceCanAccessPeer"), ze_result_t, DeviceCanAccessPeer, ze_device_handle_t, hDevice, ze_device_handle_t, hPeerDevice, ze_bool_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetStatus"), ze_result_t, DeviceGetStatus, ze_device_handle_t, hDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetGlobalTimestamps"), ze_result_t, DeviceGetGlobalTimestamps, ze_device_handle_t, hDevice, uint64_t *, hostTimestamp, uint64_t *, deviceTimestamp);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextCreate"), ze_result_t, ContextCreate, ze_driver_handle_t, hDriver, const ze_context_desc_t *, desc, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextCreateEx"), ze_result_t, ContextCreateEx, ze_driver_handle_t, hDriver, const ze_context_desc_t *, desc, uint32_t, numDevices, ze_device_handle_t *, phDevices, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextDestroy"), ze_result_t, ContextDestroy, ze_context_handle_t, hContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextGetStatus"), ze_result_t, ContextGetStatus, ze_context_handle_t, hContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueCreate"), ze_result_t, CommandQueueCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_command_queue_desc_t *, desc, ze_command_queue_handle_t *, phCommandQueue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueDestroy"), ze_result_t, CommandQueueDestroy, ze_command_queue_handle_t, hCommandQueue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueExecuteCommandLists"), ze_result_t, CommandQueueExecuteCommandLists, ze_command_queue_handle_t, hCommandQueue, uint32_t, numCommandLists, ze_command_list_handle_t *, phCommandLists, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueSynchronize"), ze_result_t, CommandQueueSynchronize, ze_command_queue_handle_t, hCommandQueue, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueGetOrdinal"), ze_result_t, CommandQueueGetOrdinal, ze_command_queue_handle_t, hCommandQueue, uint32_t *, pOrdinal);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueGetIndex"), ze_result_t, CommandQueueGetIndex, ze_command_queue_handle_t, hCommandQueue, uint32_t *, pIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListCreate"), ze_result_t, CommandListCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_command_list_desc_t *, desc, ze_command_list_handle_t *, phCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListCreateImmediate"), ze_result_t, CommandListCreateImmediate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_command_queue_desc_t *, altdesc, ze_command_list_handle_t *, phCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListDestroy"), ze_result_t, CommandListDestroy, ze_command_list_handle_t, hCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListClose"), ze_result_t, CommandListClose, ze_command_list_handle_t, hCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListReset"), ze_result_t, CommandListReset, ze_command_list_handle_t, hCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendWriteGlobalTimestamp"), ze_result_t, CommandListAppendWriteGlobalTimestamp, ze_command_list_handle_t, hCommandList, uint64_t *, dstptr, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListHostSynchronize"), ze_result_t, CommandListHostSynchronize, ze_command_list_handle_t, hCommandList, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetDeviceHandle"), ze_result_t, CommandListGetDeviceHandle, ze_command_list_handle_t, hCommandList, ze_device_handle_t *, phDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetContextHandle"), ze_result_t, CommandListGetContextHandle, ze_command_list_handle_t, hCommandList, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetOrdinal"), ze_result_t, CommandListGetOrdinal, ze_command_list_handle_t, hCommandList, uint32_t *, pOrdinal);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListImmediateGetIndex"), ze_result_t, CommandListImmediateGetIndex, ze_command_list_handle_t, hCommandListImmediate, uint32_t *, pIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListIsImmediate"), ze_result_t, CommandListIsImmediate, ze_command_list_handle_t, hCommandList, ze_bool_t *, pIsImmediate);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendBarrier"), ze_result_t, CommandListAppendBarrier, ze_command_list_handle_t, hCommandList, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryRangesBarrier"), ze_result_t, CommandListAppendMemoryRangesBarrier, ze_command_list_handle_t, hCommandList, uint32_t, numRanges, const size_t *, pRangeSizes, const void **, pRanges, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextSystemBarrier"), ze_result_t, ContextSystemBarrier, ze_context_handle_t, hContext, ze_device_handle_t, hDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryCopy"), ze_result_t, CommandListAppendMemoryCopy, ze_command_list_handle_t, hCommandList, void *, dstptr, const void *, srcptr, size_t, size, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryFill"), ze_result_t, CommandListAppendMemoryFill, ze_command_list_handle_t, hCommandList, void *, ptr, const void *, pattern, size_t, pattern_size, size_t, size, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryCopyRegion"), ze_result_t, CommandListAppendMemoryCopyRegion, ze_command_list_handle_t, hCommandList, void *, dstptr, const ze_copy_region_t *, dstRegion, uint32_t, dstPitch, uint32_t, dstSlicePitch, const void *, srcptr, const ze_copy_region_t *, srcRegion, uint32_t, srcPitch, uint32_t, srcSlicePitch, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryCopyFromContext"), ze_result_t, CommandListAppendMemoryCopyFromContext, ze_command_list_handle_t, hCommandList, void *, dstptr, ze_context_handle_t, hContextSrc, const void *, srcptr, size_t, size, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopy"), ze_result_t, CommandListAppendImageCopy, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, ze_image_handle_t, hSrcImage, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyRegion"), ze_result_t, CommandListAppendImageCopyRegion, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, ze_image_handle_t, hSrcImage, const ze_image_region_t *, pDstRegion, const ze_image_region_t *, pSrcRegion, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyToMemory"), ze_result_t, CommandListAppendImageCopyToMemory, ze_command_list_handle_t, hCommandList, void *, dstptr, ze_image_handle_t, hSrcImage, const ze_image_region_t *, pSrcRegion, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyFromMemory"), ze_result_t, CommandListAppendImageCopyFromMemory, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, const void *, srcptr, const ze_image_region_t *, pDstRegion, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryPrefetch"), ze_result_t, CommandListAppendMemoryPrefetch, ze_command_list_handle_t, hCommandList, const void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemAdvise"), ze_result_t, CommandListAppendMemAdvise, ze_command_list_handle_t, hCommandList, ze_device_handle_t, hDevice, const void *, ptr, size_t, size, ze_memory_advice_t, advice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolCreate"), ze_result_t, EventPoolCreate, ze_context_handle_t, hContext, const ze_event_pool_desc_t *, desc, uint32_t, numDevices, ze_device_handle_t *, phDevices, ze_event_pool_handle_t *, phEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolDestroy"), ze_result_t, EventPoolDestroy, ze_event_pool_handle_t, hEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventCreate"), ze_result_t, EventCreate, ze_event_pool_handle_t, hEventPool, const ze_event_desc_t *, desc, ze_event_handle_t *, phEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventDestroy"), ze_result_t, EventDestroy, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolGetIpcHandle"), ze_result_t, EventPoolGetIpcHandle, ze_event_pool_handle_t, hEventPool, ze_ipc_event_pool_handle_t *, phIpc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolPutIpcHandle"), ze_result_t, EventPoolPutIpcHandle, ze_context_handle_t, hContext, ze_ipc_event_pool_handle_t, hIpc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolOpenIpcHandle"), ze_result_t, EventPoolOpenIpcHandle, ze_context_handle_t, hContext, ze_ipc_event_pool_handle_t, hIpc, ze_event_pool_handle_t *, phEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolCloseIpcHandle"), ze_result_t, EventPoolCloseIpcHandle, ze_event_pool_handle_t, hEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendSignalEvent"), ze_result_t, CommandListAppendSignalEvent, ze_command_list_handle_t, hCommandList, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendWaitOnEvents"), ze_result_t, CommandListAppendWaitOnEvents, ze_command_list_handle_t, hCommandList, uint32_t, numEvents, ze_event_handle_t *, phEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventHostSignal"), ze_result_t, EventHostSignal, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventHostSynchronize"), ze_result_t, EventHostSynchronize, ze_event_handle_t, hEvent, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryStatus"), ze_result_t, EventQueryStatus, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendEventReset"), ze_result_t, CommandListAppendEventReset, ze_command_list_handle_t, hCommandList, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventHostReset"), ze_result_t, EventHostReset, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryKernelTimestamp"), ze_result_t, EventQueryKernelTimestamp, ze_event_handle_t, hEvent, ze_kernel_timestamp_result_t *, dstptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendQueryKernelTimestamps"), ze_result_t, CommandListAppendQueryKernelTimestamps, ze_command_list_handle_t, hCommandList, uint32_t, numEvents, ze_event_handle_t *, phEvents, void *, dstptr, const size_t *, pOffsets, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventGetEventPool"), ze_result_t, EventGetEventPool, ze_event_handle_t, hEvent, ze_event_pool_handle_t *, phEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventGetSignalScope"), ze_result_t, EventGetSignalScope, ze_event_handle_t, hEvent, ze_event_scope_flags_t *, pSignalScope);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventGetWaitScope"), ze_result_t, EventGetWaitScope, ze_event_handle_t, hEvent, ze_event_scope_flags_t *, pWaitScope);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolGetContextHandle"), ze_result_t, EventPoolGetContextHandle, ze_event_pool_handle_t, hEventPool, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolGetFlags"), ze_result_t, EventPoolGetFlags, ze_event_pool_handle_t, hEventPool, ze_event_pool_flags_t *, pFlags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceCreate"), ze_result_t, FenceCreate, ze_command_queue_handle_t, hCommandQueue, const ze_fence_desc_t *, desc, ze_fence_handle_t *, phFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceDestroy"), ze_result_t, FenceDestroy, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceHostSynchronize"), ze_result_t, FenceHostSynchronize, ze_fence_handle_t, hFence, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceQueryStatus"), ze_result_t, FenceQueryStatus, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceReset"), ze_result_t, FenceReset, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetProperties"), ze_result_t, ImageGetProperties, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_properties_t *, pImageProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageCreate"), ze_result_t, ImageCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_handle_t *, phImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageDestroy"), ze_result_t, ImageDestroy, ze_image_handle_t, hImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemAllocShared"), ze_result_t, MemAllocShared, ze_context_handle_t, hContext, const ze_device_mem_alloc_desc_t *, device_desc, const ze_host_mem_alloc_desc_t *, host_desc, size_t, size, size_t, alignment, ze_device_handle_t, hDevice, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemAllocDevice"), ze_result_t, MemAllocDevice, ze_context_handle_t, hContext, const ze_device_mem_alloc_desc_t *, device_desc, size_t, size, size_t, alignment, ze_device_handle_t, hDevice, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemAllocHost"), ze_result_t, MemAllocHost, ze_context_handle_t, hContext, const ze_host_mem_alloc_desc_t *, host_desc, size_t, size, size_t, alignment, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemFree"), ze_result_t, MemFree, ze_context_handle_t, hContext, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetAllocProperties"), ze_result_t, MemGetAllocProperties, ze_context_handle_t, hContext, const void *, ptr, ze_memory_allocation_properties_t *, pMemAllocProperties, ze_device_handle_t *, phDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetAddressRange"), ze_result_t, MemGetAddressRange, ze_context_handle_t, hContext, const void *, ptr, void **, pBase, size_t *, pSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetIpcHandle"), ze_result_t, MemGetIpcHandle, ze_context_handle_t, hContext, const void *, ptr, ze_ipc_mem_handle_t *, pIpcHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetIpcHandleFromFileDescriptorExp"), ze_result_t, MemGetIpcHandleFromFileDescriptorExp, ze_context_handle_t, hContext, uint64_t, handle, ze_ipc_mem_handle_t *, pIpcHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetFileDescriptorFromIpcHandleExp"), ze_result_t, MemGetFileDescriptorFromIpcHandleExp, ze_context_handle_t, hContext, ze_ipc_mem_handle_t, ipcHandle, uint64_t *, pHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemPutIpcHandle"), ze_result_t, MemPutIpcHandle, ze_context_handle_t, hContext, ze_ipc_mem_handle_t, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemOpenIpcHandle"), ze_result_t, MemOpenIpcHandle, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_ipc_mem_handle_t, handle, ze_ipc_memory_flags_t, flags, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemCloseIpcHandle"), ze_result_t, MemCloseIpcHandle, ze_context_handle_t, hContext, const void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemSetAtomicAccessAttributeExp"), ze_result_t, MemSetAtomicAccessAttributeExp, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const void *, ptr, size_t, size, ze_memory_atomic_attr_exp_flags_t, attr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetAtomicAccessAttributeExp"), ze_result_t, MemGetAtomicAccessAttributeExp, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const void *, ptr, size_t, size, ze_memory_atomic_attr_exp_flags_t *, pAttr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleCreate"), ze_result_t, ModuleCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_module_desc_t *, desc, ze_module_handle_t *, phModule, ze_module_build_log_handle_t *, phBuildLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleDestroy"), ze_result_t, ModuleDestroy, ze_module_handle_t, hModule);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleDynamicLink"), ze_result_t, ModuleDynamicLink, uint32_t, numModules, ze_module_handle_t *, phModules, ze_module_build_log_handle_t *, phLinkLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleBuildLogDestroy"), ze_result_t, ModuleBuildLogDestroy, ze_module_build_log_handle_t, hModuleBuildLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleBuildLogGetString"), ze_result_t, ModuleBuildLogGetString, ze_module_build_log_handle_t, hModuleBuildLog, size_t *, pSize, char *, pBuildLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetNativeBinary"), ze_result_t, ModuleGetNativeBinary, ze_module_handle_t, hModule, size_t *, pSize, uint8_t *, pModuleNativeBinary);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetGlobalPointer"), ze_result_t, ModuleGetGlobalPointer, ze_module_handle_t, hModule, const char *, pGlobalName, size_t *, pSize, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetKernelNames"), ze_result_t, ModuleGetKernelNames, ze_module_handle_t, hModule, uint32_t *, pCount, const char **, pNames);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetProperties"), ze_result_t, ModuleGetProperties, ze_module_handle_t, hModule, ze_module_properties_t *, pModuleProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelCreate"), ze_result_t, KernelCreate, ze_module_handle_t, hModule, const ze_kernel_desc_t *, desc, ze_kernel_handle_t *, phKernel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelDestroy"), ze_result_t, KernelDestroy, ze_kernel_handle_t, hKernel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetFunctionPointer"), ze_result_t, ModuleGetFunctionPointer, ze_module_handle_t, hModule, const char *, pFunctionName, void **, pfnFunction);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetGroupSize"), ze_result_t, KernelSetGroupSize, ze_kernel_handle_t, hKernel, uint32_t, groupSizeX, uint32_t, groupSizeY, uint32_t, groupSizeZ);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSuggestGroupSize"), ze_result_t, KernelSuggestGroupSize, ze_kernel_handle_t, hKernel, uint32_t, globalSizeX, uint32_t, globalSizeY, uint32_t, globalSizeZ, uint32_t *, groupSizeX, uint32_t *, groupSizeY, uint32_t *, groupSizeZ);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSuggestMaxCooperativeGroupCount"), ze_result_t, KernelSuggestMaxCooperativeGroupCount, ze_kernel_handle_t, hKernel, uint32_t *, totalGroupCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetArgumentValue"), ze_result_t, KernelSetArgumentValue, ze_kernel_handle_t, hKernel, uint32_t, argIndex, size_t, argSize, const void *, pArgValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetIndirectAccess"), ze_result_t, KernelSetIndirectAccess, ze_kernel_handle_t, hKernel, ze_kernel_indirect_access_flags_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetIndirectAccess"), ze_result_t, KernelGetIndirectAccess, ze_kernel_handle_t, hKernel, ze_kernel_indirect_access_flags_t *, pFlags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetSourceAttributes"), ze_result_t, KernelGetSourceAttributes, ze_kernel_handle_t, hKernel, uint32_t *, pSize, char **, pString);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetCacheConfig"), ze_result_t, KernelSetCacheConfig, ze_kernel_handle_t, hKernel, ze_cache_config_flags_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetProperties"), ze_result_t, KernelGetProperties, ze_kernel_handle_t, hKernel, ze_kernel_properties_t *, pKernelProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetName"), ze_result_t, KernelGetName, ze_kernel_handle_t, hKernel, size_t *, pSize, char *, pName);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchKernel"), ze_result_t, CommandListAppendLaunchKernel, ze_command_list_handle_t, hCommandList, ze_kernel_handle_t, hKernel, const ze_group_count_t *, pLaunchFuncArgs, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchCooperativeKernel"), ze_result_t, CommandListAppendLaunchCooperativeKernel, ze_command_list_handle_t, hCommandList, ze_kernel_handle_t, hKernel, const ze_group_count_t *, pLaunchFuncArgs, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchKernelIndirect"), ze_result_t, CommandListAppendLaunchKernelIndirect, ze_command_list_handle_t, hCommandList, ze_kernel_handle_t, hKernel, const ze_group_count_t *, pLaunchArgumentsBuffer, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchMultipleKernelsIndirect"), ze_result_t, CommandListAppendLaunchMultipleKernelsIndirect, ze_command_list_handle_t, hCommandList, uint32_t, numKernels, ze_kernel_handle_t *, phKernels, const uint32_t *, pCountBuffer, const ze_group_count_t *, pLaunchArgumentsBuffer, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextMakeMemoryResident"), ze_result_t, ContextMakeMemoryResident, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextEvictMemory"), ze_result_t, ContextEvictMemory, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextMakeImageResident"), ze_result_t, ContextMakeImageResident, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_image_handle_t, hImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextEvictImage"), ze_result_t, ContextEvictImage, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_image_handle_t, hImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeSamplerCreate"), ze_result_t, SamplerCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_sampler_desc_t *, desc, ze_sampler_handle_t *, phSampler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeSamplerDestroy"), ze_result_t, SamplerDestroy, ze_sampler_handle_t, hSampler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemReserve"), ze_result_t, VirtualMemReserve, ze_context_handle_t, hContext, const void *, pStart, size_t, size, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemFree"), ze_result_t, VirtualMemFree, ze_context_handle_t, hContext, const void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemQueryPageSize"), ze_result_t, VirtualMemQueryPageSize, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, size_t, size, size_t *, pagesize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zePhysicalMemCreate"), ze_result_t, PhysicalMemCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_physical_mem_desc_t *, desc, ze_physical_mem_handle_t *, phPhysicalMemory);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zePhysicalMemDestroy"), ze_result_t, PhysicalMemDestroy, ze_context_handle_t, hContext, ze_physical_mem_handle_t, hPhysicalMemory);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemMap"), ze_result_t, VirtualMemMap, ze_context_handle_t, hContext, const void *, ptr, size_t, size, ze_physical_mem_handle_t, hPhysicalMemory, size_t, offset, ze_memory_access_attribute_t, access);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemUnmap"), ze_result_t, VirtualMemUnmap, ze_context_handle_t, hContext, const void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemSetAccessAttribute"), ze_result_t, VirtualMemSetAccessAttribute, ze_context_handle_t, hContext, const void *, ptr, size_t, size, ze_memory_access_attribute_t, access);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemGetAccessAttribute"), ze_result_t, VirtualMemGetAccessAttribute, ze_context_handle_t, hContext, const void *, ptr, size_t, size, ze_memory_access_attribute_t *, access, size_t *, outSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetGlobalOffsetExp"), ze_result_t, KernelSetGlobalOffsetExp, ze_kernel_handle_t, hKernel, uint32_t, offsetX, uint32_t, offsetY, uint32_t, offsetZ);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetBinaryExp"), ze_result_t, KernelGetBinaryExp, ze_kernel_handle_t, hKernel, size_t *, pSize, uint8_t *, pKernelBinary);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceImportExternalSemaphoreExt"), ze_result_t, DeviceImportExternalSemaphoreExt, ze_device_handle_t, hDevice, const ze_external_semaphore_ext_desc_t *, desc, ze_external_semaphore_ext_handle_t *, phSemaphore);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceReleaseExternalSemaphoreExt"), ze_result_t, DeviceReleaseExternalSemaphoreExt, ze_external_semaphore_ext_handle_t, hSemaphore);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendSignalExternalSemaphoreExt"), ze_result_t, CommandListAppendSignalExternalSemaphoreExt, ze_command_list_handle_t, hCommandList, uint32_t, numSemaphores, ze_external_semaphore_ext_handle_t *, phSemaphores, ze_external_semaphore_signal_params_ext_t *, signalParams, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendWaitExternalSemaphoreExt"), ze_result_t, CommandListAppendWaitExternalSemaphoreExt, ze_command_list_handle_t, hCommandList, uint32_t, numSemaphores, ze_external_semaphore_ext_handle_t *, phSemaphores, ze_external_semaphore_wait_params_ext_t *, waitParams, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceReserveCacheExt"), ze_result_t, DeviceReserveCacheExt, ze_device_handle_t, hDevice, size_t, cacheLevel, size_t, cacheReservationSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceSetCacheAdviceExt"), ze_result_t, DeviceSetCacheAdviceExt, ze_device_handle_t, hDevice, void *, ptr, size_t, regionSize, ze_cache_ext_region_t, cacheRegion);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryTimestampsExp"), ze_result_t, EventQueryTimestampsExp, ze_event_handle_t, hEvent, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_kernel_timestamp_result_t *, pTimestamps);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetMemoryPropertiesExp"), ze_result_t, ImageGetMemoryPropertiesExp, ze_image_handle_t, hImage, ze_image_memory_properties_exp_t *, pMemoryProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageViewCreateExt"), ze_result_t, ImageViewCreateExt, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_handle_t, hImage, ze_image_handle_t *, phImageView);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageViewCreateExp"), ze_result_t, ImageViewCreateExp, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_handle_t, hImage, ze_image_handle_t *, phImageView);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSchedulingHintExp"), ze_result_t, KernelSchedulingHintExp, ze_kernel_handle_t, hKernel, ze_scheduling_hint_exp_desc_t *, pHint);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDevicePciGetPropertiesExt"), ze_result_t, DevicePciGetPropertiesExt, ze_device_handle_t, hDevice, ze_pci_ext_properties_t *, pPciProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyToMemoryExt"), ze_result_t, CommandListAppendImageCopyToMemoryExt, ze_command_list_handle_t, hCommandList, void *, dstptr, ze_image_handle_t, hSrcImage, const ze_image_region_t *, pSrcRegion, uint32_t, destRowPitch, uint32_t, destSlicePitch, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyFromMemoryExt"), ze_result_t, CommandListAppendImageCopyFromMemoryExt, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, const void *, srcptr, const ze_image_region_t *, pDstRegion, uint32_t, srcRowPitch, uint32_t, srcSlicePitch, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetAllocPropertiesExt"), ze_result_t, ImageGetAllocPropertiesExt, ze_context_handle_t, hContext, ze_image_handle_t, hImage, ze_image_allocation_ext_properties_t *, pImageAllocProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleInspectLinkageExt"), ze_result_t, ModuleInspectLinkageExt, ze_linkage_inspection_ext_desc_t *, pInspectDesc, uint32_t, numModules, ze_module_handle_t *, phModules, ze_module_build_log_handle_t *, phLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemFreeExt"), ze_result_t, MemFreeExt, ze_context_handle_t, hContext, const ze_memory_free_ext_desc_t *, pMemFreeDesc, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetExp"), ze_result_t, FabricVertexGetExp, ze_driver_handle_t, hDriver, uint32_t *, pCount, ze_fabric_vertex_handle_t *, phVertices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetSubVerticesExp"), ze_result_t, FabricVertexGetSubVerticesExp, ze_fabric_vertex_handle_t, hVertex, uint32_t *, pCount, ze_fabric_vertex_handle_t *, phSubvertices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetPropertiesExp"), ze_result_t, FabricVertexGetPropertiesExp, ze_fabric_vertex_handle_t, hVertex, ze_fabric_vertex_exp_properties_t *, pVertexProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetDeviceExp"), ze_result_t, FabricVertexGetDeviceExp, ze_fabric_vertex_handle_t, hVertex, ze_device_handle_t *, phDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetFabricVertexExp"), ze_result_t, DeviceGetFabricVertexExp, ze_device_handle_t, hDevice, ze_fabric_vertex_handle_t *, phVertex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricEdgeGetExp"), ze_result_t, FabricEdgeGetExp, ze_fabric_vertex_handle_t, hVertexA, ze_fabric_vertex_handle_t, hVertexB, uint32_t *, pCount, ze_fabric_edge_handle_t *, phEdges);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricEdgeGetVerticesExp"), ze_result_t, FabricEdgeGetVerticesExp, ze_fabric_edge_handle_t, hEdge, ze_fabric_vertex_handle_t *, phVertexA, ze_fabric_vertex_handle_t *, phVertexB);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricEdgeGetPropertiesExp"), ze_result_t, FabricEdgeGetPropertiesExp, ze_fabric_edge_handle_t, hEdge, ze_fabric_edge_exp_properties_t *, pEdgeProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryKernelTimestampsExt"), ze_result_t, EventQueryKernelTimestampsExt, ze_event_handle_t, hEvent, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_event_query_kernel_timestamps_results_ext_properties_t *, pResults);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderCreateExp"), ze_result_t, RTASBuilderCreateExp, ze_driver_handle_t, hDriver, const ze_rtas_builder_exp_desc_t *, pDescriptor, ze_rtas_builder_exp_handle_t *, phBuilder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderGetBuildPropertiesExp"), ze_result_t, RTASBuilderGetBuildPropertiesExp, ze_rtas_builder_exp_handle_t, hBuilder, const ze_rtas_builder_build_op_exp_desc_t *, pBuildOpDescriptor, ze_rtas_builder_exp_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverRTASFormatCompatibilityCheckExp"), ze_result_t, DriverRTASFormatCompatibilityCheckExp, ze_driver_handle_t, hDriver, ze_rtas_format_exp_t, rtasFormatA, ze_rtas_format_exp_t, rtasFormatB);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderBuildExp"), ze_result_t, RTASBuilderBuildExp, ze_rtas_builder_exp_handle_t, hBuilder, const ze_rtas_builder_build_op_exp_desc_t *, pBuildOpDescriptor, void *, pScratchBuffer, size_t, scratchBufferSizeBytes, void *, pRtasBuffer, size_t, rtasBufferSizeBytes, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation, void *, pBuildUserPtr, ze_rtas_aabb_exp_t *, pBounds, size_t *, pRtasBufferSizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderDestroyExp"), ze_result_t, RTASBuilderDestroyExp, ze_rtas_builder_exp_handle_t, hBuilder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationCreateExp"), ze_result_t, RTASParallelOperationCreateExp, ze_driver_handle_t, hDriver, ze_rtas_parallel_operation_exp_handle_t *, phParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationGetPropertiesExp"), ze_result_t, RTASParallelOperationGetPropertiesExp, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation, ze_rtas_parallel_operation_exp_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationJoinExp"), ze_result_t, RTASParallelOperationJoinExp, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationDestroyExp"), ze_result_t, RTASParallelOperationDestroyExp, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetPitchFor2dImage"), ze_result_t, MemGetPitchFor2dImage, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, size_t, imageWidth, size_t, imageHeight, unsigned int, elementSizeInBytes, size_t *, rowPitch);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetDeviceOffsetExp"), ze_result_t, ImageGetDeviceOffsetExp, ze_image_handle_t, hImage, uint64_t *, pDeviceOffset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListCreateCloneExp"), ze_result_t, CommandListCreateCloneExp, ze_command_list_handle_t, hCommandList, ze_command_list_handle_t *, phClonedCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListImmediateAppendCommandListsExp"), ze_result_t, CommandListImmediateAppendCommandListsExp, ze_command_list_handle_t, hCommandListImmediate, uint32_t, numCommandLists, ze_command_list_handle_t *, phCommandLists, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetNextCommandIdExp"), ze_result_t, CommandListGetNextCommandIdExp, ze_command_list_handle_t, hCommandList, const ze_mutable_command_id_exp_desc_t *, desc, uint64_t *, pCommandId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetNextCommandIdWithKernelsExp"), ze_result_t, CommandListGetNextCommandIdWithKernelsExp, ze_command_list_handle_t, hCommandList, const ze_mutable_command_id_exp_desc_t *, desc, uint32_t, numKernels, ze_kernel_handle_t *, phKernels, uint64_t *, pCommandId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandsExp"), ze_result_t, CommandListUpdateMutableCommandsExp, ze_command_list_handle_t, hCommandList, const ze_mutable_commands_exp_desc_t *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandSignalEventExp"), ze_result_t, CommandListUpdateMutableCommandSignalEventExp, ze_command_list_handle_t, hCommandList, uint64_t, commandId, ze_event_handle_t, hSignalEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandWaitEventsExp"), ze_result_t, CommandListUpdateMutableCommandWaitEventsExp, ze_command_list_handle_t, hCommandList, uint64_t, commandId, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandKernelsExp"), ze_result_t, CommandListUpdateMutableCommandKernelsExp, ze_command_list_handle_t, hCommandList, uint32_t, numKernels, uint64_t *, pCommandId, ze_kernel_handle_t *, phKernels);

};

} // namespace xsched::levelzero
