/// This file is auto-generated by command
// "python tools/autogen/merge_headers.py -d C:\Programs\LevelZero-1.22.4\include\level_zero -I C:\Programs\LevelZero-1.22.4\include\level_zero\layers -I C:\Programs\LevelZero-1.22.4\include\level_zero\loader"
// "python3 tools/autogen/gen.py --source merged.h --lib C:\Windows\System32\ze_loader.dll --platform levelzero --prefix ze"
#pragma once

#include "xsched/protocol/def.h"
#include "xsched/utils/common.h"
#include "xsched/utils/symbol.h"
#include "xsched/utils/function.h"
#include "xsched/levelzero/hal/ze_api.h"
#include "xsched/levelzero/hal/ze_ddi_common.h"
#include "xsched/levelzero/hal/ze_ddi.h"
#include "xsched/levelzero/hal/zes_api.h"
#include "xsched/levelzero/hal/zes_ddi.h"
#include "xsched/levelzero/hal/zet_api.h"
#include "xsched/levelzero/hal/zet_ddi.h"
#include "xsched/levelzero/hal/layers/zel_tracing_api.h"
#include "xsched/levelzero/hal/layers/zel_tracing_ddi.h"
#include "xsched/levelzero/hal/layers/zel_tracing_register_cb.h"
#include "xsched/levelzero/hal/loader/ze_loader.h"

namespace xsched::levelzero
{

class Driver
{
private:
#if defined(_WIN32)
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, XSCHED_LEVELZERO_LIB_ENV_NAME,
                           std::vector<std::string>({"ze_loader_original.dll"}),
                           std::vector<std::string>({}));
#elif defined(__linux__)
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, XSCHED_LEVELZERO_LIB_ENV_NAME,
                           std::vector<std::string>({"libze_loader.so", "libze_loader.so.1"}),
                           std::vector<std::string>({}));
#endif

public:
    STATIC_CLASS(Driver);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeInit"), ze_result_t, Init, ze_init_flags_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGet"), ze_result_t, DriverGet, uint32_t *, pCount, ze_driver_handle_t *, phDrivers);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeInitDrivers"), ze_result_t, InitDrivers, uint32_t *, pCount, ze_driver_handle_t *, phDrivers, ze_init_driver_type_desc_t *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetApiVersion"), ze_result_t, DriverGetApiVersion, ze_driver_handle_t, hDriver, ze_api_version_t *, version);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetProperties"), ze_result_t, DriverGetProperties, ze_driver_handle_t, hDriver, ze_driver_properties_t *, pDriverProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetIpcProperties"), ze_result_t, DriverGetIpcProperties, ze_driver_handle_t, hDriver, ze_driver_ipc_properties_t *, pIpcProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetExtensionProperties"), ze_result_t, DriverGetExtensionProperties, ze_driver_handle_t, hDriver, uint32_t *, pCount, ze_driver_extension_properties_t *, pExtensionProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetExtensionFunctionAddress"), ze_result_t, DriverGetExtensionFunctionAddress, ze_driver_handle_t, hDriver, const char *, name, void **, ppFunctionAddress);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverGetLastErrorDescription"), ze_result_t, DriverGetLastErrorDescription, ze_driver_handle_t, hDriver, const char **, ppString);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGet"), ze_result_t, DeviceGet, ze_driver_handle_t, hDriver, uint32_t *, pCount, ze_device_handle_t *, phDevices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetRootDevice"), ze_result_t, DeviceGetRootDevice, ze_device_handle_t, hDevice, ze_device_handle_t *, phRootDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetSubDevices"), ze_result_t, DeviceGetSubDevices, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_device_handle_t *, phSubdevices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetProperties"), ze_result_t, DeviceGetProperties, ze_device_handle_t, hDevice, ze_device_properties_t *, pDeviceProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetComputeProperties"), ze_result_t, DeviceGetComputeProperties, ze_device_handle_t, hDevice, ze_device_compute_properties_t *, pComputeProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetModuleProperties"), ze_result_t, DeviceGetModuleProperties, ze_device_handle_t, hDevice, ze_device_module_properties_t *, pModuleProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetCommandQueueGroupProperties"), ze_result_t, DeviceGetCommandQueueGroupProperties, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_command_queue_group_properties_t *, pCommandQueueGroupProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetMemoryProperties"), ze_result_t, DeviceGetMemoryProperties, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_device_memory_properties_t *, pMemProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetMemoryAccessProperties"), ze_result_t, DeviceGetMemoryAccessProperties, ze_device_handle_t, hDevice, ze_device_memory_access_properties_t *, pMemAccessProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetCacheProperties"), ze_result_t, DeviceGetCacheProperties, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_device_cache_properties_t *, pCacheProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetImageProperties"), ze_result_t, DeviceGetImageProperties, ze_device_handle_t, hDevice, ze_device_image_properties_t *, pImageProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetExternalMemoryProperties"), ze_result_t, DeviceGetExternalMemoryProperties, ze_device_handle_t, hDevice, ze_device_external_memory_properties_t *, pExternalMemoryProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetP2PProperties"), ze_result_t, DeviceGetP2PProperties, ze_device_handle_t, hDevice, ze_device_handle_t, hPeerDevice, ze_device_p2p_properties_t *, pP2PProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceCanAccessPeer"), ze_result_t, DeviceCanAccessPeer, ze_device_handle_t, hDevice, ze_device_handle_t, hPeerDevice, ze_bool_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetStatus"), ze_result_t, DeviceGetStatus, ze_device_handle_t, hDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetGlobalTimestamps"), ze_result_t, DeviceGetGlobalTimestamps, ze_device_handle_t, hDevice, uint64_t *, hostTimestamp, uint64_t *, deviceTimestamp);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextCreate"), ze_result_t, ContextCreate, ze_driver_handle_t, hDriver, const ze_context_desc_t *, desc, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextCreateEx"), ze_result_t, ContextCreateEx, ze_driver_handle_t, hDriver, const ze_context_desc_t *, desc, uint32_t, numDevices, ze_device_handle_t *, phDevices, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextDestroy"), ze_result_t, ContextDestroy, ze_context_handle_t, hContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextGetStatus"), ze_result_t, ContextGetStatus, ze_context_handle_t, hContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueCreate"), ze_result_t, CommandQueueCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_command_queue_desc_t *, desc, ze_command_queue_handle_t *, phCommandQueue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueDestroy"), ze_result_t, CommandQueueDestroy, ze_command_queue_handle_t, hCommandQueue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueExecuteCommandLists"), ze_result_t, CommandQueueExecuteCommandLists, ze_command_queue_handle_t, hCommandQueue, uint32_t, numCommandLists, ze_command_list_handle_t *, phCommandLists, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueSynchronize"), ze_result_t, CommandQueueSynchronize, ze_command_queue_handle_t, hCommandQueue, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueGetOrdinal"), ze_result_t, CommandQueueGetOrdinal, ze_command_queue_handle_t, hCommandQueue, uint32_t *, pOrdinal);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandQueueGetIndex"), ze_result_t, CommandQueueGetIndex, ze_command_queue_handle_t, hCommandQueue, uint32_t *, pIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListCreate"), ze_result_t, CommandListCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_command_list_desc_t *, desc, ze_command_list_handle_t *, phCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListCreateImmediate"), ze_result_t, CommandListCreateImmediate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_command_queue_desc_t *, altdesc, ze_command_list_handle_t *, phCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListDestroy"), ze_result_t, CommandListDestroy, ze_command_list_handle_t, hCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListClose"), ze_result_t, CommandListClose, ze_command_list_handle_t, hCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListReset"), ze_result_t, CommandListReset, ze_command_list_handle_t, hCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendWriteGlobalTimestamp"), ze_result_t, CommandListAppendWriteGlobalTimestamp, ze_command_list_handle_t, hCommandList, uint64_t *, dstptr, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListHostSynchronize"), ze_result_t, CommandListHostSynchronize, ze_command_list_handle_t, hCommandList, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetDeviceHandle"), ze_result_t, CommandListGetDeviceHandle, ze_command_list_handle_t, hCommandList, ze_device_handle_t *, phDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetContextHandle"), ze_result_t, CommandListGetContextHandle, ze_command_list_handle_t, hCommandList, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetOrdinal"), ze_result_t, CommandListGetOrdinal, ze_command_list_handle_t, hCommandList, uint32_t *, pOrdinal);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListImmediateGetIndex"), ze_result_t, CommandListImmediateGetIndex, ze_command_list_handle_t, hCommandListImmediate, uint32_t *, pIndex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListIsImmediate"), ze_result_t, CommandListIsImmediate, ze_command_list_handle_t, hCommandList, ze_bool_t *, pIsImmediate);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendBarrier"), ze_result_t, CommandListAppendBarrier, ze_command_list_handle_t, hCommandList, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryRangesBarrier"), ze_result_t, CommandListAppendMemoryRangesBarrier, ze_command_list_handle_t, hCommandList, uint32_t, numRanges, const size_t *, pRangeSizes, const void **, pRanges, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextSystemBarrier"), ze_result_t, ContextSystemBarrier, ze_context_handle_t, hContext, ze_device_handle_t, hDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryCopy"), ze_result_t, CommandListAppendMemoryCopy, ze_command_list_handle_t, hCommandList, void *, dstptr, const void *, srcptr, size_t, size, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryFill"), ze_result_t, CommandListAppendMemoryFill, ze_command_list_handle_t, hCommandList, void *, ptr, const void *, pattern, size_t, pattern_size, size_t, size, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryCopyRegion"), ze_result_t, CommandListAppendMemoryCopyRegion, ze_command_list_handle_t, hCommandList, void *, dstptr, const ze_copy_region_t *, dstRegion, uint32_t, dstPitch, uint32_t, dstSlicePitch, const void *, srcptr, const ze_copy_region_t *, srcRegion, uint32_t, srcPitch, uint32_t, srcSlicePitch, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryCopyFromContext"), ze_result_t, CommandListAppendMemoryCopyFromContext, ze_command_list_handle_t, hCommandList, void *, dstptr, ze_context_handle_t, hContextSrc, const void *, srcptr, size_t, size, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopy"), ze_result_t, CommandListAppendImageCopy, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, ze_image_handle_t, hSrcImage, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyRegion"), ze_result_t, CommandListAppendImageCopyRegion, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, ze_image_handle_t, hSrcImage, const ze_image_region_t *, pDstRegion, const ze_image_region_t *, pSrcRegion, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyToMemory"), ze_result_t, CommandListAppendImageCopyToMemory, ze_command_list_handle_t, hCommandList, void *, dstptr, ze_image_handle_t, hSrcImage, const ze_image_region_t *, pSrcRegion, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyFromMemory"), ze_result_t, CommandListAppendImageCopyFromMemory, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, const void *, srcptr, const ze_image_region_t *, pDstRegion, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemoryPrefetch"), ze_result_t, CommandListAppendMemoryPrefetch, ze_command_list_handle_t, hCommandList, const void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendMemAdvise"), ze_result_t, CommandListAppendMemAdvise, ze_command_list_handle_t, hCommandList, ze_device_handle_t, hDevice, const void *, ptr, size_t, size, ze_memory_advice_t, advice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolCreate"), ze_result_t, EventPoolCreate, ze_context_handle_t, hContext, const ze_event_pool_desc_t *, desc, uint32_t, numDevices, ze_device_handle_t *, phDevices, ze_event_pool_handle_t *, phEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolDestroy"), ze_result_t, EventPoolDestroy, ze_event_pool_handle_t, hEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventCreate"), ze_result_t, EventCreate, ze_event_pool_handle_t, hEventPool, const ze_event_desc_t *, desc, ze_event_handle_t *, phEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventDestroy"), ze_result_t, EventDestroy, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolGetIpcHandle"), ze_result_t, EventPoolGetIpcHandle, ze_event_pool_handle_t, hEventPool, ze_ipc_event_pool_handle_t *, phIpc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolPutIpcHandle"), ze_result_t, EventPoolPutIpcHandle, ze_context_handle_t, hContext, ze_ipc_event_pool_handle_t, hIpc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolOpenIpcHandle"), ze_result_t, EventPoolOpenIpcHandle, ze_context_handle_t, hContext, ze_ipc_event_pool_handle_t, hIpc, ze_event_pool_handle_t *, phEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolCloseIpcHandle"), ze_result_t, EventPoolCloseIpcHandle, ze_event_pool_handle_t, hEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendSignalEvent"), ze_result_t, CommandListAppendSignalEvent, ze_command_list_handle_t, hCommandList, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendWaitOnEvents"), ze_result_t, CommandListAppendWaitOnEvents, ze_command_list_handle_t, hCommandList, uint32_t, numEvents, ze_event_handle_t *, phEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventHostSignal"), ze_result_t, EventHostSignal, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventHostSynchronize"), ze_result_t, EventHostSynchronize, ze_event_handle_t, hEvent, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryStatus"), ze_result_t, EventQueryStatus, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendEventReset"), ze_result_t, CommandListAppendEventReset, ze_command_list_handle_t, hCommandList, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventHostReset"), ze_result_t, EventHostReset, ze_event_handle_t, hEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryKernelTimestamp"), ze_result_t, EventQueryKernelTimestamp, ze_event_handle_t, hEvent, ze_kernel_timestamp_result_t *, dstptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendQueryKernelTimestamps"), ze_result_t, CommandListAppendQueryKernelTimestamps, ze_command_list_handle_t, hCommandList, uint32_t, numEvents, ze_event_handle_t *, phEvents, void *, dstptr, const size_t *, pOffsets, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventGetEventPool"), ze_result_t, EventGetEventPool, ze_event_handle_t, hEvent, ze_event_pool_handle_t *, phEventPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventGetSignalScope"), ze_result_t, EventGetSignalScope, ze_event_handle_t, hEvent, ze_event_scope_flags_t *, pSignalScope);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventGetWaitScope"), ze_result_t, EventGetWaitScope, ze_event_handle_t, hEvent, ze_event_scope_flags_t *, pWaitScope);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolGetContextHandle"), ze_result_t, EventPoolGetContextHandle, ze_event_pool_handle_t, hEventPool, ze_context_handle_t *, phContext);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventPoolGetFlags"), ze_result_t, EventPoolGetFlags, ze_event_pool_handle_t, hEventPool, ze_event_pool_flags_t *, pFlags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceCreate"), ze_result_t, FenceCreate, ze_command_queue_handle_t, hCommandQueue, const ze_fence_desc_t *, desc, ze_fence_handle_t *, phFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceDestroy"), ze_result_t, FenceDestroy, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceHostSynchronize"), ze_result_t, FenceHostSynchronize, ze_fence_handle_t, hFence, uint64_t, timeout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceQueryStatus"), ze_result_t, FenceQueryStatus, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFenceReset"), ze_result_t, FenceReset, ze_fence_handle_t, hFence);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetProperties"), ze_result_t, ImageGetProperties, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_properties_t *, pImageProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageCreate"), ze_result_t, ImageCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_handle_t *, phImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageDestroy"), ze_result_t, ImageDestroy, ze_image_handle_t, hImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemAllocShared"), ze_result_t, MemAllocShared, ze_context_handle_t, hContext, const ze_device_mem_alloc_desc_t *, device_desc, const ze_host_mem_alloc_desc_t *, host_desc, size_t, size, size_t, alignment, ze_device_handle_t, hDevice, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemAllocDevice"), ze_result_t, MemAllocDevice, ze_context_handle_t, hContext, const ze_device_mem_alloc_desc_t *, device_desc, size_t, size, size_t, alignment, ze_device_handle_t, hDevice, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemAllocHost"), ze_result_t, MemAllocHost, ze_context_handle_t, hContext, const ze_host_mem_alloc_desc_t *, host_desc, size_t, size, size_t, alignment, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemFree"), ze_result_t, MemFree, ze_context_handle_t, hContext, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetAllocProperties"), ze_result_t, MemGetAllocProperties, ze_context_handle_t, hContext, const void *, ptr, ze_memory_allocation_properties_t *, pMemAllocProperties, ze_device_handle_t *, phDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetAddressRange"), ze_result_t, MemGetAddressRange, ze_context_handle_t, hContext, const void *, ptr, void **, pBase, size_t *, pSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetIpcHandle"), ze_result_t, MemGetIpcHandle, ze_context_handle_t, hContext, const void *, ptr, ze_ipc_mem_handle_t *, pIpcHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetIpcHandleFromFileDescriptorExp"), ze_result_t, MemGetIpcHandleFromFileDescriptorExp, ze_context_handle_t, hContext, uint64_t, handle, ze_ipc_mem_handle_t *, pIpcHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetFileDescriptorFromIpcHandleExp"), ze_result_t, MemGetFileDescriptorFromIpcHandleExp, ze_context_handle_t, hContext, ze_ipc_mem_handle_t, ipcHandle, uint64_t *, pHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemPutIpcHandle"), ze_result_t, MemPutIpcHandle, ze_context_handle_t, hContext, ze_ipc_mem_handle_t, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemOpenIpcHandle"), ze_result_t, MemOpenIpcHandle, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_ipc_mem_handle_t, handle, ze_ipc_memory_flags_t, flags, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemCloseIpcHandle"), ze_result_t, MemCloseIpcHandle, ze_context_handle_t, hContext, const void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemSetAtomicAccessAttributeExp"), ze_result_t, MemSetAtomicAccessAttributeExp, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const void *, ptr, size_t, size, ze_memory_atomic_attr_exp_flags_t, attr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetAtomicAccessAttributeExp"), ze_result_t, MemGetAtomicAccessAttributeExp, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const void *, ptr, size_t, size, ze_memory_atomic_attr_exp_flags_t *, pAttr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleCreate"), ze_result_t, ModuleCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_module_desc_t *, desc, ze_module_handle_t *, phModule, ze_module_build_log_handle_t *, phBuildLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleDestroy"), ze_result_t, ModuleDestroy, ze_module_handle_t, hModule);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleDynamicLink"), ze_result_t, ModuleDynamicLink, uint32_t, numModules, ze_module_handle_t *, phModules, ze_module_build_log_handle_t *, phLinkLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleBuildLogDestroy"), ze_result_t, ModuleBuildLogDestroy, ze_module_build_log_handle_t, hModuleBuildLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleBuildLogGetString"), ze_result_t, ModuleBuildLogGetString, ze_module_build_log_handle_t, hModuleBuildLog, size_t *, pSize, char *, pBuildLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetNativeBinary"), ze_result_t, ModuleGetNativeBinary, ze_module_handle_t, hModule, size_t *, pSize, uint8_t *, pModuleNativeBinary);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetGlobalPointer"), ze_result_t, ModuleGetGlobalPointer, ze_module_handle_t, hModule, const char *, pGlobalName, size_t *, pSize, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetKernelNames"), ze_result_t, ModuleGetKernelNames, ze_module_handle_t, hModule, uint32_t *, pCount, const char **, pNames);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetProperties"), ze_result_t, ModuleGetProperties, ze_module_handle_t, hModule, ze_module_properties_t *, pModuleProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelCreate"), ze_result_t, KernelCreate, ze_module_handle_t, hModule, const ze_kernel_desc_t *, desc, ze_kernel_handle_t *, phKernel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelDestroy"), ze_result_t, KernelDestroy, ze_kernel_handle_t, hKernel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleGetFunctionPointer"), ze_result_t, ModuleGetFunctionPointer, ze_module_handle_t, hModule, const char *, pFunctionName, void **, pfnFunction);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetGroupSize"), ze_result_t, KernelSetGroupSize, ze_kernel_handle_t, hKernel, uint32_t, groupSizeX, uint32_t, groupSizeY, uint32_t, groupSizeZ);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSuggestGroupSize"), ze_result_t, KernelSuggestGroupSize, ze_kernel_handle_t, hKernel, uint32_t, globalSizeX, uint32_t, globalSizeY, uint32_t, globalSizeZ, uint32_t *, groupSizeX, uint32_t *, groupSizeY, uint32_t *, groupSizeZ);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSuggestMaxCooperativeGroupCount"), ze_result_t, KernelSuggestMaxCooperativeGroupCount, ze_kernel_handle_t, hKernel, uint32_t *, totalGroupCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetArgumentValue"), ze_result_t, KernelSetArgumentValue, ze_kernel_handle_t, hKernel, uint32_t, argIndex, size_t, argSize, const void *, pArgValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetIndirectAccess"), ze_result_t, KernelSetIndirectAccess, ze_kernel_handle_t, hKernel, ze_kernel_indirect_access_flags_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetIndirectAccess"), ze_result_t, KernelGetIndirectAccess, ze_kernel_handle_t, hKernel, ze_kernel_indirect_access_flags_t *, pFlags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetSourceAttributes"), ze_result_t, KernelGetSourceAttributes, ze_kernel_handle_t, hKernel, uint32_t *, pSize, char **, pString);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetCacheConfig"), ze_result_t, KernelSetCacheConfig, ze_kernel_handle_t, hKernel, ze_cache_config_flags_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetProperties"), ze_result_t, KernelGetProperties, ze_kernel_handle_t, hKernel, ze_kernel_properties_t *, pKernelProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetName"), ze_result_t, KernelGetName, ze_kernel_handle_t, hKernel, size_t *, pSize, char *, pName);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchKernel"), ze_result_t, CommandListAppendLaunchKernel, ze_command_list_handle_t, hCommandList, ze_kernel_handle_t, hKernel, const ze_group_count_t *, pLaunchFuncArgs, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchCooperativeKernel"), ze_result_t, CommandListAppendLaunchCooperativeKernel, ze_command_list_handle_t, hCommandList, ze_kernel_handle_t, hKernel, const ze_group_count_t *, pLaunchFuncArgs, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchKernelIndirect"), ze_result_t, CommandListAppendLaunchKernelIndirect, ze_command_list_handle_t, hCommandList, ze_kernel_handle_t, hKernel, const ze_group_count_t *, pLaunchArgumentsBuffer, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendLaunchMultipleKernelsIndirect"), ze_result_t, CommandListAppendLaunchMultipleKernelsIndirect, ze_command_list_handle_t, hCommandList, uint32_t, numKernels, ze_kernel_handle_t *, phKernels, const uint32_t *, pCountBuffer, const ze_group_count_t *, pLaunchArgumentsBuffer, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextMakeMemoryResident"), ze_result_t, ContextMakeMemoryResident, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextEvictMemory"), ze_result_t, ContextEvictMemory, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextMakeImageResident"), ze_result_t, ContextMakeImageResident, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_image_handle_t, hImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeContextEvictImage"), ze_result_t, ContextEvictImage, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_image_handle_t, hImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeSamplerCreate"), ze_result_t, SamplerCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_sampler_desc_t *, desc, ze_sampler_handle_t *, phSampler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeSamplerDestroy"), ze_result_t, SamplerDestroy, ze_sampler_handle_t, hSampler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemReserve"), ze_result_t, VirtualMemReserve, ze_context_handle_t, hContext, const void *, pStart, size_t, size, void **, pptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemFree"), ze_result_t, VirtualMemFree, ze_context_handle_t, hContext, const void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemQueryPageSize"), ze_result_t, VirtualMemQueryPageSize, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, size_t, size, size_t *, pagesize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zePhysicalMemCreate"), ze_result_t, PhysicalMemCreate, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, ze_physical_mem_desc_t *, desc, ze_physical_mem_handle_t *, phPhysicalMemory);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zePhysicalMemDestroy"), ze_result_t, PhysicalMemDestroy, ze_context_handle_t, hContext, ze_physical_mem_handle_t, hPhysicalMemory);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemMap"), ze_result_t, VirtualMemMap, ze_context_handle_t, hContext, const void *, ptr, size_t, size, ze_physical_mem_handle_t, hPhysicalMemory, size_t, offset, ze_memory_access_attribute_t, access);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemUnmap"), ze_result_t, VirtualMemUnmap, ze_context_handle_t, hContext, const void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemSetAccessAttribute"), ze_result_t, VirtualMemSetAccessAttribute, ze_context_handle_t, hContext, const void *, ptr, size_t, size, ze_memory_access_attribute_t, access);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeVirtualMemGetAccessAttribute"), ze_result_t, VirtualMemGetAccessAttribute, ze_context_handle_t, hContext, const void *, ptr, size_t, size, ze_memory_access_attribute_t *, access, size_t *, outSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSetGlobalOffsetExp"), ze_result_t, KernelSetGlobalOffsetExp, ze_kernel_handle_t, hKernel, uint32_t, offsetX, uint32_t, offsetY, uint32_t, offsetZ);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelGetBinaryExp"), ze_result_t, KernelGetBinaryExp, ze_kernel_handle_t, hKernel, size_t *, pSize, uint8_t *, pKernelBinary);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceImportExternalSemaphoreExt"), ze_result_t, DeviceImportExternalSemaphoreExt, ze_device_handle_t, hDevice, const ze_external_semaphore_ext_desc_t *, desc, ze_external_semaphore_ext_handle_t *, phSemaphore);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceReleaseExternalSemaphoreExt"), ze_result_t, DeviceReleaseExternalSemaphoreExt, ze_external_semaphore_ext_handle_t, hSemaphore);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendSignalExternalSemaphoreExt"), ze_result_t, CommandListAppendSignalExternalSemaphoreExt, ze_command_list_handle_t, hCommandList, uint32_t, numSemaphores, ze_external_semaphore_ext_handle_t *, phSemaphores, ze_external_semaphore_signal_params_ext_t *, signalParams, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendWaitExternalSemaphoreExt"), ze_result_t, CommandListAppendWaitExternalSemaphoreExt, ze_command_list_handle_t, hCommandList, uint32_t, numSemaphores, ze_external_semaphore_ext_handle_t *, phSemaphores, ze_external_semaphore_wait_params_ext_t *, waitParams, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderCreateExt"), ze_result_t, RTASBuilderCreateExt, ze_driver_handle_t, hDriver, const ze_rtas_builder_ext_desc_t *, pDescriptor, ze_rtas_builder_ext_handle_t *, phBuilder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderGetBuildPropertiesExt"), ze_result_t, RTASBuilderGetBuildPropertiesExt, ze_rtas_builder_ext_handle_t, hBuilder, const ze_rtas_builder_build_op_ext_desc_t *, pBuildOpDescriptor, ze_rtas_builder_ext_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverRTASFormatCompatibilityCheckExt"), ze_result_t, DriverRTASFormatCompatibilityCheckExt, ze_driver_handle_t, hDriver, ze_rtas_format_ext_t, rtasFormatA, ze_rtas_format_ext_t, rtasFormatB);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderBuildExt"), ze_result_t, RTASBuilderBuildExt, ze_rtas_builder_ext_handle_t, hBuilder, const ze_rtas_builder_build_op_ext_desc_t *, pBuildOpDescriptor, void *, pScratchBuffer, size_t, scratchBufferSizeBytes, void *, pRtasBuffer, size_t, rtasBufferSizeBytes, ze_rtas_parallel_operation_ext_handle_t, hParallelOperation, void *, pBuildUserPtr, ze_rtas_aabb_ext_t *, pBounds, size_t *, pRtasBufferSizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderCommandListAppendCopyExt"), ze_result_t, RTASBuilderCommandListAppendCopyExt, ze_command_list_handle_t, hCommandList, void *, dstptr, const void *, srcptr, size_t, size, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderDestroyExt"), ze_result_t, RTASBuilderDestroyExt, ze_rtas_builder_ext_handle_t, hBuilder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationCreateExt"), ze_result_t, RTASParallelOperationCreateExt, ze_driver_handle_t, hDriver, ze_rtas_parallel_operation_ext_handle_t *, phParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationGetPropertiesExt"), ze_result_t, RTASParallelOperationGetPropertiesExt, ze_rtas_parallel_operation_ext_handle_t, hParallelOperation, ze_rtas_parallel_operation_ext_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationJoinExt"), ze_result_t, RTASParallelOperationJoinExt, ze_rtas_parallel_operation_ext_handle_t, hParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationDestroyExt"), ze_result_t, RTASParallelOperationDestroyExt, ze_rtas_parallel_operation_ext_handle_t, hParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetVectorWidthPropertiesExt"), ze_result_t, DeviceGetVectorWidthPropertiesExt, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_device_vector_width_properties_ext_t *, pVectorWidthProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceReserveCacheExt"), ze_result_t, DeviceReserveCacheExt, ze_device_handle_t, hDevice, size_t, cacheLevel, size_t, cacheReservationSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceSetCacheAdviceExt"), ze_result_t, DeviceSetCacheAdviceExt, ze_device_handle_t, hDevice, void *, ptr, size_t, regionSize, ze_cache_ext_region_t, cacheRegion);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryTimestampsExp"), ze_result_t, EventQueryTimestampsExp, ze_event_handle_t, hEvent, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_kernel_timestamp_result_t *, pTimestamps);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetMemoryPropertiesExp"), ze_result_t, ImageGetMemoryPropertiesExp, ze_image_handle_t, hImage, ze_image_memory_properties_exp_t *, pMemoryProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageViewCreateExt"), ze_result_t, ImageViewCreateExt, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_handle_t, hImage, ze_image_handle_t *, phImageView);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageViewCreateExp"), ze_result_t, ImageViewCreateExp, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, const ze_image_desc_t *, desc, ze_image_handle_t, hImage, ze_image_handle_t *, phImageView);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeKernelSchedulingHintExp"), ze_result_t, KernelSchedulingHintExp, ze_kernel_handle_t, hKernel, ze_scheduling_hint_exp_desc_t *, pHint);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDevicePciGetPropertiesExt"), ze_result_t, DevicePciGetPropertiesExt, ze_device_handle_t, hDevice, ze_pci_ext_properties_t *, pPciProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyToMemoryExt"), ze_result_t, CommandListAppendImageCopyToMemoryExt, ze_command_list_handle_t, hCommandList, void *, dstptr, ze_image_handle_t, hSrcImage, const ze_image_region_t *, pSrcRegion, uint32_t, destRowPitch, uint32_t, destSlicePitch, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListAppendImageCopyFromMemoryExt"), ze_result_t, CommandListAppendImageCopyFromMemoryExt, ze_command_list_handle_t, hCommandList, ze_image_handle_t, hDstImage, const void *, srcptr, const ze_image_region_t *, pDstRegion, uint32_t, srcRowPitch, uint32_t, srcSlicePitch, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetAllocPropertiesExt"), ze_result_t, ImageGetAllocPropertiesExt, ze_context_handle_t, hContext, ze_image_handle_t, hImage, ze_image_allocation_ext_properties_t *, pImageAllocProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeModuleInspectLinkageExt"), ze_result_t, ModuleInspectLinkageExt, ze_linkage_inspection_ext_desc_t *, pInspectDesc, uint32_t, numModules, ze_module_handle_t *, phModules, ze_module_build_log_handle_t *, phLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemFreeExt"), ze_result_t, MemFreeExt, ze_context_handle_t, hContext, const ze_memory_free_ext_desc_t *, pMemFreeDesc, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetExp"), ze_result_t, FabricVertexGetExp, ze_driver_handle_t, hDriver, uint32_t *, pCount, ze_fabric_vertex_handle_t *, phVertices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetSubVerticesExp"), ze_result_t, FabricVertexGetSubVerticesExp, ze_fabric_vertex_handle_t, hVertex, uint32_t *, pCount, ze_fabric_vertex_handle_t *, phSubvertices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetPropertiesExp"), ze_result_t, FabricVertexGetPropertiesExp, ze_fabric_vertex_handle_t, hVertex, ze_fabric_vertex_exp_properties_t *, pVertexProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricVertexGetDeviceExp"), ze_result_t, FabricVertexGetDeviceExp, ze_fabric_vertex_handle_t, hVertex, ze_device_handle_t *, phDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDeviceGetFabricVertexExp"), ze_result_t, DeviceGetFabricVertexExp, ze_device_handle_t, hDevice, ze_fabric_vertex_handle_t *, phVertex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricEdgeGetExp"), ze_result_t, FabricEdgeGetExp, ze_fabric_vertex_handle_t, hVertexA, ze_fabric_vertex_handle_t, hVertexB, uint32_t *, pCount, ze_fabric_edge_handle_t *, phEdges);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricEdgeGetVerticesExp"), ze_result_t, FabricEdgeGetVerticesExp, ze_fabric_edge_handle_t, hEdge, ze_fabric_vertex_handle_t *, phVertexA, ze_fabric_vertex_handle_t *, phVertexB);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeFabricEdgeGetPropertiesExp"), ze_result_t, FabricEdgeGetPropertiesExp, ze_fabric_edge_handle_t, hEdge, ze_fabric_edge_exp_properties_t *, pEdgeProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeEventQueryKernelTimestampsExt"), ze_result_t, EventQueryKernelTimestampsExt, ze_event_handle_t, hEvent, ze_device_handle_t, hDevice, uint32_t *, pCount, ze_event_query_kernel_timestamps_results_ext_properties_t *, pResults);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderCreateExp"), ze_result_t, RTASBuilderCreateExp, ze_driver_handle_t, hDriver, const ze_rtas_builder_exp_desc_t *, pDescriptor, ze_rtas_builder_exp_handle_t *, phBuilder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderGetBuildPropertiesExp"), ze_result_t, RTASBuilderGetBuildPropertiesExp, ze_rtas_builder_exp_handle_t, hBuilder, const ze_rtas_builder_build_op_exp_desc_t *, pBuildOpDescriptor, ze_rtas_builder_exp_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeDriverRTASFormatCompatibilityCheckExp"), ze_result_t, DriverRTASFormatCompatibilityCheckExp, ze_driver_handle_t, hDriver, ze_rtas_format_exp_t, rtasFormatA, ze_rtas_format_exp_t, rtasFormatB);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderBuildExp"), ze_result_t, RTASBuilderBuildExp, ze_rtas_builder_exp_handle_t, hBuilder, const ze_rtas_builder_build_op_exp_desc_t *, pBuildOpDescriptor, void *, pScratchBuffer, size_t, scratchBufferSizeBytes, void *, pRtasBuffer, size_t, rtasBufferSizeBytes, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation, void *, pBuildUserPtr, ze_rtas_aabb_exp_t *, pBounds, size_t *, pRtasBufferSizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASBuilderDestroyExp"), ze_result_t, RTASBuilderDestroyExp, ze_rtas_builder_exp_handle_t, hBuilder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationCreateExp"), ze_result_t, RTASParallelOperationCreateExp, ze_driver_handle_t, hDriver, ze_rtas_parallel_operation_exp_handle_t *, phParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationGetPropertiesExp"), ze_result_t, RTASParallelOperationGetPropertiesExp, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation, ze_rtas_parallel_operation_exp_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationJoinExp"), ze_result_t, RTASParallelOperationJoinExp, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeRTASParallelOperationDestroyExp"), ze_result_t, RTASParallelOperationDestroyExp, ze_rtas_parallel_operation_exp_handle_t, hParallelOperation);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeMemGetPitchFor2dImage"), ze_result_t, MemGetPitchFor2dImage, ze_context_handle_t, hContext, ze_device_handle_t, hDevice, size_t, imageWidth, size_t, imageHeight, unsigned int, elementSizeInBytes, size_t *, rowPitch);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeImageGetDeviceOffsetExp"), ze_result_t, ImageGetDeviceOffsetExp, ze_image_handle_t, hImage, uint64_t *, pDeviceOffset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListCreateCloneExp"), ze_result_t, CommandListCreateCloneExp, ze_command_list_handle_t, hCommandList, ze_command_list_handle_t *, phClonedCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListImmediateAppendCommandListsExp"), ze_result_t, CommandListImmediateAppendCommandListsExp, ze_command_list_handle_t, hCommandListImmediate, uint32_t, numCommandLists, ze_command_list_handle_t *, phCommandLists, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetNextCommandIdExp"), ze_result_t, CommandListGetNextCommandIdExp, ze_command_list_handle_t, hCommandList, const ze_mutable_command_id_exp_desc_t *, desc, uint64_t *, pCommandId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListGetNextCommandIdWithKernelsExp"), ze_result_t, CommandListGetNextCommandIdWithKernelsExp, ze_command_list_handle_t, hCommandList, const ze_mutable_command_id_exp_desc_t *, desc, uint32_t, numKernels, ze_kernel_handle_t *, phKernels, uint64_t *, pCommandId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandsExp"), ze_result_t, CommandListUpdateMutableCommandsExp, ze_command_list_handle_t, hCommandList, const ze_mutable_commands_exp_desc_t *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandSignalEventExp"), ze_result_t, CommandListUpdateMutableCommandSignalEventExp, ze_command_list_handle_t, hCommandList, uint64_t, commandId, ze_event_handle_t, hSignalEvent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandWaitEventsExp"), ze_result_t, CommandListUpdateMutableCommandWaitEventsExp, ze_command_list_handle_t, hCommandList, uint64_t, commandId, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeCommandListUpdateMutableCommandKernelsExp"), ze_result_t, CommandListUpdateMutableCommandKernelsExp, ze_command_list_handle_t, hCommandList, uint32_t, numKernels, uint64_t *, pCommandId, ze_kernel_handle_t *, phKernels);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesInit"), ze_result_t, sInit, zes_init_flags_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDriverGet"), ze_result_t, sDriverGet, uint32_t *, pCount, zes_driver_handle_t *, phDrivers);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDriverGetExtensionProperties"), ze_result_t, sDriverGetExtensionProperties, zes_driver_handle_t, hDriver, uint32_t *, pCount, zes_driver_extension_properties_t *, pExtensionProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDriverGetExtensionFunctionAddress"), ze_result_t, sDriverGetExtensionFunctionAddress, zes_driver_handle_t, hDriver, const char *, name, void **, ppFunctionAddress);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGet"), ze_result_t, sDeviceGet, zes_driver_handle_t, hDriver, uint32_t *, pCount, zes_device_handle_t *, phDevices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGetProperties"), ze_result_t, sDeviceGetProperties, zes_device_handle_t, hDevice, zes_device_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGetState"), ze_result_t, sDeviceGetState, zes_device_handle_t, hDevice, zes_device_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceReset"), ze_result_t, sDeviceReset, zes_device_handle_t, hDevice, ze_bool_t, force);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceResetExt"), ze_result_t, sDeviceResetExt, zes_device_handle_t, hDevice, zes_reset_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceProcessesGetState"), ze_result_t, sDeviceProcessesGetState, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_process_state_t *, pProcesses);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDevicePciGetProperties"), ze_result_t, sDevicePciGetProperties, zes_device_handle_t, hDevice, zes_pci_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDevicePciGetState"), ze_result_t, sDevicePciGetState, zes_device_handle_t, hDevice, zes_pci_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDevicePciGetBars"), ze_result_t, sDevicePciGetBars, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_pci_bar_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDevicePciGetStats"), ze_result_t, sDevicePciGetStats, zes_device_handle_t, hDevice, zes_pci_stats_t *, pStats);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceSetOverclockWaiver"), ze_result_t, sDeviceSetOverclockWaiver, zes_device_handle_t, hDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGetOverclockDomains"), ze_result_t, sDeviceGetOverclockDomains, zes_device_handle_t, hDevice, uint32_t *, pOverclockDomains);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGetOverclockControls"), ze_result_t, sDeviceGetOverclockControls, zes_device_handle_t, hDevice, zes_overclock_domain_t, domainType, uint32_t *, pAvailableControls);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceResetOverclockSettings"), ze_result_t, sDeviceResetOverclockSettings, zes_device_handle_t, hDevice, ze_bool_t, onShippedState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceReadOverclockState"), ze_result_t, sDeviceReadOverclockState, zes_device_handle_t, hDevice, zes_overclock_mode_t *, pOverclockMode, ze_bool_t *, pWaiverSetting, ze_bool_t *, pOverclockState, zes_pending_action_t *, pPendingAction, ze_bool_t *, pPendingReset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumOverclockDomains"), ze_result_t, sDeviceEnumOverclockDomains, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_overclock_handle_t *, phDomainHandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockGetDomainProperties"), ze_result_t, sOverclockGetDomainProperties, zes_overclock_handle_t, hDomainHandle, zes_overclock_properties_t *, pDomainProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockGetDomainVFProperties"), ze_result_t, sOverclockGetDomainVFProperties, zes_overclock_handle_t, hDomainHandle, zes_vf_property_t *, pVFProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockGetDomainControlProperties"), ze_result_t, sOverclockGetDomainControlProperties, zes_overclock_handle_t, hDomainHandle, zes_overclock_control_t, DomainControl, zes_control_property_t *, pControlProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockGetControlCurrentValue"), ze_result_t, sOverclockGetControlCurrentValue, zes_overclock_handle_t, hDomainHandle, zes_overclock_control_t, DomainControl, double *, pValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockGetControlPendingValue"), ze_result_t, sOverclockGetControlPendingValue, zes_overclock_handle_t, hDomainHandle, zes_overclock_control_t, DomainControl, double *, pValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockSetControlUserValue"), ze_result_t, sOverclockSetControlUserValue, zes_overclock_handle_t, hDomainHandle, zes_overclock_control_t, DomainControl, double, pValue, zes_pending_action_t *, pPendingAction);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockGetControlState"), ze_result_t, sOverclockGetControlState, zes_overclock_handle_t, hDomainHandle, zes_overclock_control_t, DomainControl, zes_control_state_t *, pControlState, zes_pending_action_t *, pPendingAction);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockGetVFPointValues"), ze_result_t, sOverclockGetVFPointValues, zes_overclock_handle_t, hDomainHandle, zes_vf_type_t, VFType, zes_vf_array_type_t, VFArrayType, uint32_t, PointIndex, uint32_t *, PointValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesOverclockSetVFPointValues"), ze_result_t, sOverclockSetVFPointValues, zes_overclock_handle_t, hDomainHandle, zes_vf_type_t, VFType, uint32_t, PointIndex, uint32_t, PointValue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumDiagnosticTestSuites"), ze_result_t, sDeviceEnumDiagnosticTestSuites, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_diag_handle_t *, phDiagnostics);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDiagnosticsGetProperties"), ze_result_t, sDiagnosticsGetProperties, zes_diag_handle_t, hDiagnostics, zes_diag_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDiagnosticsGetTests"), ze_result_t, sDiagnosticsGetTests, zes_diag_handle_t, hDiagnostics, uint32_t *, pCount, zes_diag_test_t *, pTests);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDiagnosticsRunTests"), ze_result_t, sDiagnosticsRunTests, zes_diag_handle_t, hDiagnostics, uint32_t, startIndex, uint32_t, endIndex, zes_diag_result_t *, pResult);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEccAvailable"), ze_result_t, sDeviceEccAvailable, zes_device_handle_t, hDevice, ze_bool_t *, pAvailable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEccConfigurable"), ze_result_t, sDeviceEccConfigurable, zes_device_handle_t, hDevice, ze_bool_t *, pConfigurable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGetEccState"), ze_result_t, sDeviceGetEccState, zes_device_handle_t, hDevice, zes_device_ecc_properties_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceSetEccState"), ze_result_t, sDeviceSetEccState, zes_device_handle_t, hDevice, const zes_device_ecc_desc_t *, newState, zes_device_ecc_properties_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumEngineGroups"), ze_result_t, sDeviceEnumEngineGroups, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_engine_handle_t *, phEngine);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesEngineGetProperties"), ze_result_t, sEngineGetProperties, zes_engine_handle_t, hEngine, zes_engine_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesEngineGetActivity"), ze_result_t, sEngineGetActivity, zes_engine_handle_t, hEngine, zes_engine_stats_t *, pStats);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEventRegister"), ze_result_t, sDeviceEventRegister, zes_device_handle_t, hDevice, zes_event_type_flags_t, events);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDriverEventListen"), ze_result_t, sDriverEventListen, ze_driver_handle_t, hDriver, uint32_t, timeout, uint32_t, count, zes_device_handle_t *, phDevices, uint32_t *, pNumDeviceEvents, zes_event_type_flags_t *, pEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDriverEventListenEx"), ze_result_t, sDriverEventListenEx, ze_driver_handle_t, hDriver, uint64_t, timeout, uint32_t, count, zes_device_handle_t *, phDevices, uint32_t *, pNumDeviceEvents, zes_event_type_flags_t *, pEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumFabricPorts"), ze_result_t, sDeviceEnumFabricPorts, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_fabric_port_handle_t *, phPort);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortGetProperties"), ze_result_t, sFabricPortGetProperties, zes_fabric_port_handle_t, hPort, zes_fabric_port_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortGetLinkType"), ze_result_t, sFabricPortGetLinkType, zes_fabric_port_handle_t, hPort, zes_fabric_link_type_t *, pLinkType);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortGetConfig"), ze_result_t, sFabricPortGetConfig, zes_fabric_port_handle_t, hPort, zes_fabric_port_config_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortSetConfig"), ze_result_t, sFabricPortSetConfig, zes_fabric_port_handle_t, hPort, const zes_fabric_port_config_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortGetState"), ze_result_t, sFabricPortGetState, zes_fabric_port_handle_t, hPort, zes_fabric_port_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortGetThroughput"), ze_result_t, sFabricPortGetThroughput, zes_fabric_port_handle_t, hPort, zes_fabric_port_throughput_t *, pThroughput);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortGetFabricErrorCounters"), ze_result_t, sFabricPortGetFabricErrorCounters, zes_fabric_port_handle_t, hPort, zes_fabric_port_error_counters_t *, pErrors);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFabricPortGetMultiPortThroughput"), ze_result_t, sFabricPortGetMultiPortThroughput, zes_device_handle_t, hDevice, uint32_t, numPorts, zes_fabric_port_handle_t *, phPort, zes_fabric_port_throughput_t **, pThroughput);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumFans"), ze_result_t, sDeviceEnumFans, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_fan_handle_t *, phFan);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFanGetProperties"), ze_result_t, sFanGetProperties, zes_fan_handle_t, hFan, zes_fan_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFanGetConfig"), ze_result_t, sFanGetConfig, zes_fan_handle_t, hFan, zes_fan_config_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFanSetDefaultMode"), ze_result_t, sFanSetDefaultMode, zes_fan_handle_t, hFan);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFanSetFixedSpeedMode"), ze_result_t, sFanSetFixedSpeedMode, zes_fan_handle_t, hFan, const zes_fan_speed_t *, speed);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFanSetSpeedTableMode"), ze_result_t, sFanSetSpeedTableMode, zes_fan_handle_t, hFan, const zes_fan_speed_table_t *, speedTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFanGetState"), ze_result_t, sFanGetState, zes_fan_handle_t, hFan, zes_fan_speed_units_t, units, int32_t *, pSpeed);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumFirmwares"), ze_result_t, sDeviceEnumFirmwares, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_firmware_handle_t *, phFirmware);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFirmwareGetProperties"), ze_result_t, sFirmwareGetProperties, zes_firmware_handle_t, hFirmware, zes_firmware_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFirmwareFlash"), ze_result_t, sFirmwareFlash, zes_firmware_handle_t, hFirmware, void *, pImage, uint32_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFirmwareGetFlashProgress"), ze_result_t, sFirmwareGetFlashProgress, zes_firmware_handle_t, hFirmware, uint32_t *, pCompletionPercent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFirmwareGetConsoleLogs"), ze_result_t, sFirmwareGetConsoleLogs, zes_firmware_handle_t, hFirmware, size_t *, pSize, char *, pFirmwareLog);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumFrequencyDomains"), ze_result_t, sDeviceEnumFrequencyDomains, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_freq_handle_t *, phFrequency);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyGetProperties"), ze_result_t, sFrequencyGetProperties, zes_freq_handle_t, hFrequency, zes_freq_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyGetAvailableClocks"), ze_result_t, sFrequencyGetAvailableClocks, zes_freq_handle_t, hFrequency, uint32_t *, pCount, double *, phFrequency);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyGetRange"), ze_result_t, sFrequencyGetRange, zes_freq_handle_t, hFrequency, zes_freq_range_t *, pLimits);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencySetRange"), ze_result_t, sFrequencySetRange, zes_freq_handle_t, hFrequency, const zes_freq_range_t *, pLimits);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyGetState"), ze_result_t, sFrequencyGetState, zes_freq_handle_t, hFrequency, zes_freq_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyGetThrottleTime"), ze_result_t, sFrequencyGetThrottleTime, zes_freq_handle_t, hFrequency, zes_freq_throttle_time_t *, pThrottleTime);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcGetCapabilities"), ze_result_t, sFrequencyOcGetCapabilities, zes_freq_handle_t, hFrequency, zes_oc_capabilities_t *, pOcCapabilities);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcGetFrequencyTarget"), ze_result_t, sFrequencyOcGetFrequencyTarget, zes_freq_handle_t, hFrequency, double *, pCurrentOcFrequency);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcSetFrequencyTarget"), ze_result_t, sFrequencyOcSetFrequencyTarget, zes_freq_handle_t, hFrequency, double, CurrentOcFrequency);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcGetVoltageTarget"), ze_result_t, sFrequencyOcGetVoltageTarget, zes_freq_handle_t, hFrequency, double *, pCurrentVoltageTarget, double *, pCurrentVoltageOffset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcSetVoltageTarget"), ze_result_t, sFrequencyOcSetVoltageTarget, zes_freq_handle_t, hFrequency, double, CurrentVoltageTarget, double, CurrentVoltageOffset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcSetMode"), ze_result_t, sFrequencyOcSetMode, zes_freq_handle_t, hFrequency, zes_oc_mode_t, CurrentOcMode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcGetMode"), ze_result_t, sFrequencyOcGetMode, zes_freq_handle_t, hFrequency, zes_oc_mode_t *, pCurrentOcMode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcGetIccMax"), ze_result_t, sFrequencyOcGetIccMax, zes_freq_handle_t, hFrequency, double *, pOcIccMax);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcSetIccMax"), ze_result_t, sFrequencyOcSetIccMax, zes_freq_handle_t, hFrequency, double, ocIccMax);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcGetTjMax"), ze_result_t, sFrequencyOcGetTjMax, zes_freq_handle_t, hFrequency, double *, pOcTjMax);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFrequencyOcSetTjMax"), ze_result_t, sFrequencyOcSetTjMax, zes_freq_handle_t, hFrequency, double, ocTjMax);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumLeds"), ze_result_t, sDeviceEnumLeds, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_led_handle_t *, phLed);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesLedGetProperties"), ze_result_t, sLedGetProperties, zes_led_handle_t, hLed, zes_led_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesLedGetState"), ze_result_t, sLedGetState, zes_led_handle_t, hLed, zes_led_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesLedSetState"), ze_result_t, sLedSetState, zes_led_handle_t, hLed, ze_bool_t, enable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesLedSetColor"), ze_result_t, sLedSetColor, zes_led_handle_t, hLed, const zes_led_color_t *, pColor);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumMemoryModules"), ze_result_t, sDeviceEnumMemoryModules, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_mem_handle_t *, phMemory);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesMemoryGetProperties"), ze_result_t, sMemoryGetProperties, zes_mem_handle_t, hMemory, zes_mem_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesMemoryGetState"), ze_result_t, sMemoryGetState, zes_mem_handle_t, hMemory, zes_mem_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesMemoryGetBandwidth"), ze_result_t, sMemoryGetBandwidth, zes_mem_handle_t, hMemory, zes_mem_bandwidth_t *, pBandwidth);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumPerformanceFactorDomains"), ze_result_t, sDeviceEnumPerformanceFactorDomains, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_perf_handle_t *, phPerf);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPerformanceFactorGetProperties"), ze_result_t, sPerformanceFactorGetProperties, zes_perf_handle_t, hPerf, zes_perf_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPerformanceFactorGetConfig"), ze_result_t, sPerformanceFactorGetConfig, zes_perf_handle_t, hPerf, double *, pFactor);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPerformanceFactorSetConfig"), ze_result_t, sPerformanceFactorSetConfig, zes_perf_handle_t, hPerf, double, factor);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumPowerDomains"), ze_result_t, sDeviceEnumPowerDomains, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_pwr_handle_t *, phPower);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGetCardPowerDomain"), ze_result_t, sDeviceGetCardPowerDomain, zes_device_handle_t, hDevice, zes_pwr_handle_t *, phPower);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerGetProperties"), ze_result_t, sPowerGetProperties, zes_pwr_handle_t, hPower, zes_power_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerGetEnergyCounter"), ze_result_t, sPowerGetEnergyCounter, zes_pwr_handle_t, hPower, zes_power_energy_counter_t *, pEnergy);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerGetLimits"), ze_result_t, sPowerGetLimits, zes_pwr_handle_t, hPower, zes_power_sustained_limit_t *, pSustained, zes_power_burst_limit_t *, pBurst, zes_power_peak_limit_t *, pPeak);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerSetLimits"), ze_result_t, sPowerSetLimits, zes_pwr_handle_t, hPower, const zes_power_sustained_limit_t *, pSustained, const zes_power_burst_limit_t *, pBurst, const zes_power_peak_limit_t *, pPeak);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerGetEnergyThreshold"), ze_result_t, sPowerGetEnergyThreshold, zes_pwr_handle_t, hPower, zes_energy_threshold_t *, pThreshold);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerSetEnergyThreshold"), ze_result_t, sPowerSetEnergyThreshold, zes_pwr_handle_t, hPower, double, threshold);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumPsus"), ze_result_t, sDeviceEnumPsus, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_psu_handle_t *, phPsu);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPsuGetProperties"), ze_result_t, sPsuGetProperties, zes_psu_handle_t, hPsu, zes_psu_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPsuGetState"), ze_result_t, sPsuGetState, zes_psu_handle_t, hPsu, zes_psu_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumRasErrorSets"), ze_result_t, sDeviceEnumRasErrorSets, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_ras_handle_t *, phRas);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesRasGetProperties"), ze_result_t, sRasGetProperties, zes_ras_handle_t, hRas, zes_ras_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesRasGetConfig"), ze_result_t, sRasGetConfig, zes_ras_handle_t, hRas, zes_ras_config_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesRasSetConfig"), ze_result_t, sRasSetConfig, zes_ras_handle_t, hRas, const zes_ras_config_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesRasGetState"), ze_result_t, sRasGetState, zes_ras_handle_t, hRas, ze_bool_t, clear, zes_ras_state_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumSchedulers"), ze_result_t, sDeviceEnumSchedulers, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_sched_handle_t *, phScheduler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerGetProperties"), ze_result_t, sSchedulerGetProperties, zes_sched_handle_t, hScheduler, zes_sched_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerGetCurrentMode"), ze_result_t, sSchedulerGetCurrentMode, zes_sched_handle_t, hScheduler, zes_sched_mode_t *, pMode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerGetTimeoutModeProperties"), ze_result_t, sSchedulerGetTimeoutModeProperties, zes_sched_handle_t, hScheduler, ze_bool_t, getDefaults, zes_sched_timeout_properties_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerGetTimesliceModeProperties"), ze_result_t, sSchedulerGetTimesliceModeProperties, zes_sched_handle_t, hScheduler, ze_bool_t, getDefaults, zes_sched_timeslice_properties_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerSetTimeoutMode"), ze_result_t, sSchedulerSetTimeoutMode, zes_sched_handle_t, hScheduler, zes_sched_timeout_properties_t *, pProperties, ze_bool_t *, pNeedReload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerSetTimesliceMode"), ze_result_t, sSchedulerSetTimesliceMode, zes_sched_handle_t, hScheduler, zes_sched_timeslice_properties_t *, pProperties, ze_bool_t *, pNeedReload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerSetExclusiveMode"), ze_result_t, sSchedulerSetExclusiveMode, zes_sched_handle_t, hScheduler, ze_bool_t *, pNeedReload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesSchedulerSetComputeUnitDebugMode"), ze_result_t, sSchedulerSetComputeUnitDebugMode, zes_sched_handle_t, hScheduler, ze_bool_t *, pNeedReload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumStandbyDomains"), ze_result_t, sDeviceEnumStandbyDomains, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_standby_handle_t *, phStandby);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesStandbyGetProperties"), ze_result_t, sStandbyGetProperties, zes_standby_handle_t, hStandby, zes_standby_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesStandbyGetMode"), ze_result_t, sStandbyGetMode, zes_standby_handle_t, hStandby, zes_standby_promo_mode_t *, pMode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesStandbySetMode"), ze_result_t, sStandbySetMode, zes_standby_handle_t, hStandby, zes_standby_promo_mode_t, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumTemperatureSensors"), ze_result_t, sDeviceEnumTemperatureSensors, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_temp_handle_t *, phTemperature);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesTemperatureGetProperties"), ze_result_t, sTemperatureGetProperties, zes_temp_handle_t, hTemperature, zes_temp_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesTemperatureGetConfig"), ze_result_t, sTemperatureGetConfig, zes_temp_handle_t, hTemperature, zes_temp_config_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesTemperatureSetConfig"), ze_result_t, sTemperatureSetConfig, zes_temp_handle_t, hTemperature, const zes_temp_config_t *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesTemperatureGetState"), ze_result_t, sTemperatureGetState, zes_temp_handle_t, hTemperature, double *, pTemperature);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerGetLimitsExt"), ze_result_t, sPowerGetLimitsExt, zes_pwr_handle_t, hPower, uint32_t *, pCount, zes_power_limit_ext_desc_t *, pSustained);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesPowerSetLimitsExt"), ze_result_t, sPowerSetLimitsExt, zes_pwr_handle_t, hPower, uint32_t *, pCount, zes_power_limit_ext_desc_t *, pSustained);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesEngineGetActivityExt"), ze_result_t, sEngineGetActivityExt, zes_engine_handle_t, hEngine, uint32_t *, pCount, zes_engine_stats_t *, pStats);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesRasGetStateExp"), ze_result_t, sRasGetStateExp, zes_ras_handle_t, hRas, uint32_t *, pCount, zes_ras_state_exp_t *, pState);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesRasClearStateExp"), ze_result_t, sRasClearStateExp, zes_ras_handle_t, hRas, zes_ras_error_category_exp_t, category);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFirmwareGetSecurityVersionExp"), ze_result_t, sFirmwareGetSecurityVersionExp, zes_firmware_handle_t, hFirmware, char *, pVersion);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesFirmwareSetSecurityVersionExp"), ze_result_t, sFirmwareSetSecurityVersionExp, zes_firmware_handle_t, hFirmware);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceGetSubDevicePropertiesExp"), ze_result_t, sDeviceGetSubDevicePropertiesExp, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_subdevice_exp_properties_t *, pSubdeviceProps);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDriverGetDeviceByUuidExp"), ze_result_t, sDriverGetDeviceByUuidExp, zes_driver_handle_t, hDriver, zes_uuid_t, uuid, zes_device_handle_t *, phDevice, ze_bool_t *, onSubdevice, uint32_t *, subdeviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumActiveVFExp"), ze_result_t, sDeviceEnumActiveVFExp, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_vf_handle_t *, phVFhandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementGetVFPropertiesExp"), ze_result_t, sVFManagementGetVFPropertiesExp, zes_vf_handle_t, hVFhandle, zes_vf_exp_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementGetVFMemoryUtilizationExp"), ze_result_t, sVFManagementGetVFMemoryUtilizationExp, zes_vf_handle_t, hVFhandle, uint32_t *, pCount, zes_vf_util_mem_exp_t *, pMemUtil);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementGetVFEngineUtilizationExp"), ze_result_t, sVFManagementGetVFEngineUtilizationExp, zes_vf_handle_t, hVFhandle, uint32_t *, pCount, zes_vf_util_engine_exp_t *, pEngineUtil);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementSetVFTelemetryModeExp"), ze_result_t, sVFManagementSetVFTelemetryModeExp, zes_vf_handle_t, hVFhandle, zes_vf_info_util_exp_flags_t, flags, ze_bool_t, enable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementSetVFTelemetrySamplingIntervalExp"), ze_result_t, sVFManagementSetVFTelemetrySamplingIntervalExp, zes_vf_handle_t, hVFhandle, zes_vf_info_util_exp_flags_t, flag, uint64_t, samplingInterval);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesDeviceEnumEnabledVFExp"), ze_result_t, sDeviceEnumEnabledVFExp, zes_device_handle_t, hDevice, uint32_t *, pCount, zes_vf_handle_t *, phVFhandle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementGetVFCapabilitiesExp"), ze_result_t, sVFManagementGetVFCapabilitiesExp, zes_vf_handle_t, hVFhandle, zes_vf_exp_capabilities_t *, pCapability);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementGetVFMemoryUtilizationExp2"), ze_result_t, sVFManagementGetVFMemoryUtilizationExp2, zes_vf_handle_t, hVFhandle, uint32_t *, pCount, zes_vf_util_mem_exp2_t *, pMemUtil);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementGetVFEngineUtilizationExp2"), ze_result_t, sVFManagementGetVFEngineUtilizationExp2, zes_vf_handle_t, hVFhandle, uint32_t *, pCount, zes_vf_util_engine_exp2_t *, pEngineUtil);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesVFManagementGetVFCapabilitiesExp2"), ze_result_t, sVFManagementGetVFCapabilitiesExp2, zes_vf_handle_t, hVFhandle, zes_vf_exp2_capabilities_t *, pCapability);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetModuleGetDebugInfo"), ze_result_t, tModuleGetDebugInfo, zet_module_handle_t, hModule, zet_module_debug_info_format_t, format, size_t *, pSize, uint8_t *, pDebugInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDeviceGetDebugProperties"), ze_result_t, tDeviceGetDebugProperties, zet_device_handle_t, hDevice, zet_device_debug_properties_t *, pDebugProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugAttach"), ze_result_t, tDebugAttach, zet_device_handle_t, hDevice, const zet_debug_config_t *, config, zet_debug_session_handle_t *, phDebug);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugDetach"), ze_result_t, tDebugDetach, zet_debug_session_handle_t, hDebug);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugReadEvent"), ze_result_t, tDebugReadEvent, zet_debug_session_handle_t, hDebug, uint64_t, timeout, zet_debug_event_t *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugAcknowledgeEvent"), ze_result_t, tDebugAcknowledgeEvent, zet_debug_session_handle_t, hDebug, const zet_debug_event_t *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugInterrupt"), ze_result_t, tDebugInterrupt, zet_debug_session_handle_t, hDebug, ze_device_thread_t, thread);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugResume"), ze_result_t, tDebugResume, zet_debug_session_handle_t, hDebug, ze_device_thread_t, thread);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugReadMemory"), ze_result_t, tDebugReadMemory, zet_debug_session_handle_t, hDebug, ze_device_thread_t, thread, const zet_debug_memory_space_desc_t *, desc, size_t, size, void *, buffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugWriteMemory"), ze_result_t, tDebugWriteMemory, zet_debug_session_handle_t, hDebug, ze_device_thread_t, thread, const zet_debug_memory_space_desc_t *, desc, size_t, size, const void *, buffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugGetRegisterSetProperties"), ze_result_t, tDebugGetRegisterSetProperties, zet_device_handle_t, hDevice, uint32_t *, pCount, zet_debug_regset_properties_t *, pRegisterSetProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugGetThreadRegisterSetProperties"), ze_result_t, tDebugGetThreadRegisterSetProperties, zet_debug_session_handle_t, hDebug, ze_device_thread_t, thread, uint32_t *, pCount, zet_debug_regset_properties_t *, pRegisterSetProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugReadRegisters"), ze_result_t, tDebugReadRegisters, zet_debug_session_handle_t, hDebug, ze_device_thread_t, thread, uint32_t, type, uint32_t, start, uint32_t, count, void *, pRegisterValues);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDebugWriteRegisters"), ze_result_t, tDebugWriteRegisters, zet_debug_session_handle_t, hDebug, ze_device_thread_t, thread, uint32_t, type, uint32_t, start, uint32_t, count, void *, pRegisterValues);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupGet"), ze_result_t, tMetricGroupGet, zet_device_handle_t, hDevice, uint32_t *, pCount, zet_metric_group_handle_t *, phMetricGroups);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupGetProperties"), ze_result_t, tMetricGroupGetProperties, zet_metric_group_handle_t, hMetricGroup, zet_metric_group_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupCalculateMetricValues"), ze_result_t, tMetricGroupCalculateMetricValues, zet_metric_group_handle_t, hMetricGroup, zet_metric_group_calculation_type_t, type, size_t, rawDataSize, const uint8_t *, pRawData, uint32_t *, pMetricValueCount, zet_typed_value_t *, pMetricValues);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGet"), ze_result_t, tMetricGet, zet_metric_group_handle_t, hMetricGroup, uint32_t *, pCount, zet_metric_handle_t *, phMetrics);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGetProperties"), ze_result_t, tMetricGetProperties, zet_metric_handle_t, hMetric, zet_metric_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetContextActivateMetricGroups"), ze_result_t, tContextActivateMetricGroups, zet_context_handle_t, hContext, zet_device_handle_t, hDevice, uint32_t, count, zet_metric_group_handle_t *, phMetricGroups);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricStreamerOpen"), ze_result_t, tMetricStreamerOpen, zet_context_handle_t, hContext, zet_device_handle_t, hDevice, zet_metric_group_handle_t, hMetricGroup, zet_metric_streamer_desc_t *, desc, ze_event_handle_t, hNotificationEvent, zet_metric_streamer_handle_t *, phMetricStreamer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetCommandListAppendMetricStreamerMarker"), ze_result_t, tCommandListAppendMetricStreamerMarker, zet_command_list_handle_t, hCommandList, zet_metric_streamer_handle_t, hMetricStreamer, uint32_t, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricStreamerClose"), ze_result_t, tMetricStreamerClose, zet_metric_streamer_handle_t, hMetricStreamer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricStreamerReadData"), ze_result_t, tMetricStreamerReadData, zet_metric_streamer_handle_t, hMetricStreamer, uint32_t, maxReportCount, size_t *, pRawDataSize, uint8_t *, pRawData);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricQueryPoolCreate"), ze_result_t, tMetricQueryPoolCreate, zet_context_handle_t, hContext, zet_device_handle_t, hDevice, zet_metric_group_handle_t, hMetricGroup, const zet_metric_query_pool_desc_t *, desc, zet_metric_query_pool_handle_t *, phMetricQueryPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricQueryPoolDestroy"), ze_result_t, tMetricQueryPoolDestroy, zet_metric_query_pool_handle_t, hMetricQueryPool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricQueryCreate"), ze_result_t, tMetricQueryCreate, zet_metric_query_pool_handle_t, hMetricQueryPool, uint32_t, index, zet_metric_query_handle_t *, phMetricQuery);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricQueryDestroy"), ze_result_t, tMetricQueryDestroy, zet_metric_query_handle_t, hMetricQuery);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricQueryReset"), ze_result_t, tMetricQueryReset, zet_metric_query_handle_t, hMetricQuery);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetCommandListAppendMetricQueryBegin"), ze_result_t, tCommandListAppendMetricQueryBegin, zet_command_list_handle_t, hCommandList, zet_metric_query_handle_t, hMetricQuery);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetCommandListAppendMetricQueryEnd"), ze_result_t, tCommandListAppendMetricQueryEnd, zet_command_list_handle_t, hCommandList, zet_metric_query_handle_t, hMetricQuery, ze_event_handle_t, hSignalEvent, uint32_t, numWaitEvents, ze_event_handle_t *, phWaitEvents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetCommandListAppendMetricMemoryBarrier"), ze_result_t, tCommandListAppendMetricMemoryBarrier, zet_command_list_handle_t, hCommandList);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricQueryGetData"), ze_result_t, tMetricQueryGetData, zet_metric_query_handle_t, hMetricQuery, size_t *, pRawDataSize, uint8_t *, pRawData);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetKernelGetProfileInfo"), ze_result_t, tKernelGetProfileInfo, zet_kernel_handle_t, hKernel, zet_profile_properties_t *, pProfileProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetTracerExpCreate"), ze_result_t, tTracerExpCreate, zet_context_handle_t, hContext, const zet_tracer_exp_desc_t *, desc, zet_tracer_exp_handle_t *, phTracer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetTracerExpDestroy"), ze_result_t, tTracerExpDestroy, zet_tracer_exp_handle_t, hTracer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetTracerExpSetPrologues"), ze_result_t, tTracerExpSetPrologues, zet_tracer_exp_handle_t, hTracer, zet_core_callbacks_t *, pCoreCbs);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetTracerExpSetEpilogues"), ze_result_t, tTracerExpSetEpilogues, zet_tracer_exp_handle_t, hTracer, zet_core_callbacks_t *, pCoreCbs);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetTracerExpSetEnabled"), ze_result_t, tTracerExpSetEnabled, zet_tracer_exp_handle_t, hTracer, ze_bool_t, enable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDeviceGetConcurrentMetricGroupsExp"), ze_result_t, tDeviceGetConcurrentMetricGroupsExp, zet_device_handle_t, hDevice, uint32_t, metricGroupCount, zet_metric_group_handle_t *, phMetricGroups, uint32_t *, pMetricGroupsCountPerConcurrentGroup, uint32_t *, pConcurrentGroupCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricTracerCreateExp"), ze_result_t, tMetricTracerCreateExp, zet_context_handle_t, hContext, zet_device_handle_t, hDevice, uint32_t, metricGroupCount, zet_metric_group_handle_t *, phMetricGroups, zet_metric_tracer_exp_desc_t *, desc, ze_event_handle_t, hNotificationEvent, zet_metric_tracer_exp_handle_t *, phMetricTracer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricTracerDestroyExp"), ze_result_t, tMetricTracerDestroyExp, zet_metric_tracer_exp_handle_t, hMetricTracer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricTracerEnableExp"), ze_result_t, tMetricTracerEnableExp, zet_metric_tracer_exp_handle_t, hMetricTracer, ze_bool_t, synchronous);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricTracerDisableExp"), ze_result_t, tMetricTracerDisableExp, zet_metric_tracer_exp_handle_t, hMetricTracer, ze_bool_t, synchronous);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricTracerReadDataExp"), ze_result_t, tMetricTracerReadDataExp, zet_metric_tracer_exp_handle_t, hMetricTracer, size_t *, pRawDataSize, uint8_t *, pRawData);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricDecoderCreateExp"), ze_result_t, tMetricDecoderCreateExp, zet_metric_tracer_exp_handle_t, hMetricTracer, zet_metric_decoder_exp_handle_t *, phMetricDecoder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricDecoderDestroyExp"), ze_result_t, tMetricDecoderDestroyExp, zet_metric_decoder_exp_handle_t, phMetricDecoder);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricDecoderGetDecodableMetricsExp"), ze_result_t, tMetricDecoderGetDecodableMetricsExp, zet_metric_decoder_exp_handle_t, hMetricDecoder, uint32_t *, pCount, zet_metric_handle_t *, phMetrics);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricTracerDecodeExp"), ze_result_t, tMetricTracerDecodeExp, zet_metric_decoder_exp_handle_t, phMetricDecoder, size_t *, pRawDataSize, uint8_t *, pRawData, uint32_t, metricsCount, zet_metric_handle_t *, phMetrics, uint32_t *, pSetCount, uint32_t *, pMetricEntriesCountPerSet, uint32_t *, pMetricEntriesCount, zet_metric_entry_exp_t *, pMetricEntries);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetCommandListAppendMarkerExp"), ze_result_t, tCommandListAppendMarkerExp, zet_command_list_handle_t, hCommandList, zet_metric_group_handle_t, hMetricGroup, uint32_t, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDeviceEnableMetricsExp"), ze_result_t, tDeviceEnableMetricsExp, zet_device_handle_t, hDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDeviceDisableMetricsExp"), ze_result_t, tDeviceDisableMetricsExp, zet_device_handle_t, hDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupCalculateMultipleMetricValuesExp"), ze_result_t, tMetricGroupCalculateMultipleMetricValuesExp, zet_metric_group_handle_t, hMetricGroup, zet_metric_group_calculation_type_t, type, size_t, rawDataSize, const uint8_t *, pRawData, uint32_t *, pSetCount, uint32_t *, pTotalMetricValueCount, uint32_t *, pMetricCounts, zet_typed_value_t *, pMetricValues);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupGetGlobalTimestampsExp"), ze_result_t, tMetricGroupGetGlobalTimestampsExp, zet_metric_group_handle_t, hMetricGroup, ze_bool_t, synchronizedWithHost, uint64_t *, globalTimestamp, uint64_t *, metricTimestamp);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupGetExportDataExp"), ze_result_t, tMetricGroupGetExportDataExp, zet_metric_group_handle_t, hMetricGroup, const uint8_t *, pRawData, size_t, rawDataSize, size_t *, pExportDataSize, uint8_t *, pExportData);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupCalculateMetricExportDataExp"), ze_result_t, tMetricGroupCalculateMetricExportDataExp, ze_driver_handle_t, hDriver, zet_metric_group_calculation_type_t, type, size_t, exportDataSize, const uint8_t *, pExportData, zet_metric_calculate_exp_desc_t *, pCalculateDescriptor, uint32_t *, pSetCount, uint32_t *, pTotalMetricValueCount, uint32_t *, pMetricCounts, zet_typed_value_t *, pMetricValues);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricProgrammableGetExp"), ze_result_t, tMetricProgrammableGetExp, zet_device_handle_t, hDevice, uint32_t *, pCount, zet_metric_programmable_exp_handle_t *, phMetricProgrammables);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricProgrammableGetPropertiesExp"), ze_result_t, tMetricProgrammableGetPropertiesExp, zet_metric_programmable_exp_handle_t, hMetricProgrammable, zet_metric_programmable_exp_properties_t *, pProperties);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricProgrammableGetParamInfoExp"), ze_result_t, tMetricProgrammableGetParamInfoExp, zet_metric_programmable_exp_handle_t, hMetricProgrammable, uint32_t *, pParameterCount, zet_metric_programmable_param_info_exp_t *, pParameterInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricProgrammableGetParamValueInfoExp"), ze_result_t, tMetricProgrammableGetParamValueInfoExp, zet_metric_programmable_exp_handle_t, hMetricProgrammable, uint32_t, parameterOrdinal, uint32_t *, pValueInfoCount, zet_metric_programmable_param_value_info_exp_t *, pValueInfo);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricCreateFromProgrammableExp2"), ze_result_t, tMetricCreateFromProgrammableExp2, zet_metric_programmable_exp_handle_t, hMetricProgrammable, uint32_t, parameterCount, zet_metric_programmable_param_value_exp_t *, pParameterValues, const char *, pName, const char *, pDescription, uint32_t *, pMetricHandleCount, zet_metric_handle_t *, phMetricHandles);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricCreateFromProgrammableExp"), ze_result_t, tMetricCreateFromProgrammableExp, zet_metric_programmable_exp_handle_t, hMetricProgrammable, zet_metric_programmable_param_value_exp_t *, pParameterValues, uint32_t, parameterCount, const char *, pName, const char *, pDescription, uint32_t *, pMetricHandleCount, zet_metric_handle_t *, phMetricHandles);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetDeviceCreateMetricGroupsFromMetricsExp"), ze_result_t, tDeviceCreateMetricGroupsFromMetricsExp, zet_device_handle_t, hDevice, uint32_t, metricCount, zet_metric_handle_t *, phMetrics, const char *, pMetricGroupNamePrefix, const char *, pDescription, uint32_t *, pMetricGroupCount, zet_metric_group_handle_t *, phMetricGroup);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupCreateExp"), ze_result_t, tMetricGroupCreateExp, zet_device_handle_t, hDevice, const char *, pName, const char *, pDescription, zet_metric_group_sampling_type_flags_t, samplingType, zet_metric_group_handle_t *, phMetricGroup);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupAddMetricExp"), ze_result_t, tMetricGroupAddMetricExp, zet_metric_group_handle_t, hMetricGroup, zet_metric_handle_t, hMetric, size_t *, pErrorStringSize, char *, pErrorString);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupRemoveMetricExp"), ze_result_t, tMetricGroupRemoveMetricExp, zet_metric_group_handle_t, hMetricGroup, zet_metric_handle_t, hMetric);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupCloseExp"), ze_result_t, tMetricGroupCloseExp, zet_metric_group_handle_t, hMetricGroup);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricGroupDestroyExp"), ze_result_t, tMetricGroupDestroyExp, zet_metric_group_handle_t, hMetricGroup);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetMetricDestroyExp"), ze_result_t, tMetricDestroyExp, zet_metric_handle_t, hMetric);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCreate"), ze_result_t, lTracerCreate, const zel_tracer_desc_t *, desc, zel_tracer_handle_t *, phTracer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDestroy"), ze_result_t, lTracerDestroy, zel_tracer_handle_t, hTracer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerSetPrologues"), ze_result_t, lTracerSetPrologues, zel_tracer_handle_t, hTracer, zel_core_callbacks_t *, pCoreCbs);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerSetEpilogues"), ze_result_t, lTracerSetEpilogues, zel_tracer_handle_t, hTracer, zel_core_callbacks_t *, pCoreCbs);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerSetEnabled"), ze_result_t, lTracerSetEnabled, zel_tracer_handle_t, hTracer, ze_bool_t, enable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetGlobalProcAddrTable"), ze_result_t, sGetGlobalProcAddrTable, ze_api_version_t, version, zes_global_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetDeviceProcAddrTable"), ze_result_t, sGetDeviceProcAddrTable, ze_api_version_t, version, zes_device_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetDeviceExpProcAddrTable"), ze_result_t, sGetDeviceExpProcAddrTable, ze_api_version_t, version, zes_device_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetDriverProcAddrTable"), ze_result_t, sGetDriverProcAddrTable, ze_api_version_t, version, zes_driver_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetDriverExpProcAddrTable"), ze_result_t, sGetDriverExpProcAddrTable, ze_api_version_t, version, zes_driver_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetOverclockProcAddrTable"), ze_result_t, sGetOverclockProcAddrTable, ze_api_version_t, version, zes_overclock_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetSchedulerProcAddrTable"), ze_result_t, sGetSchedulerProcAddrTable, ze_api_version_t, version, zes_scheduler_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetPerformanceFactorProcAddrTable"), ze_result_t, sGetPerformanceFactorProcAddrTable, ze_api_version_t, version, zes_performance_factor_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetPowerProcAddrTable"), ze_result_t, sGetPowerProcAddrTable, ze_api_version_t, version, zes_power_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetFrequencyProcAddrTable"), ze_result_t, sGetFrequencyProcAddrTable, ze_api_version_t, version, zes_frequency_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetEngineProcAddrTable"), ze_result_t, sGetEngineProcAddrTable, ze_api_version_t, version, zes_engine_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetStandbyProcAddrTable"), ze_result_t, sGetStandbyProcAddrTable, ze_api_version_t, version, zes_standby_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetFirmwareProcAddrTable"), ze_result_t, sGetFirmwareProcAddrTable, ze_api_version_t, version, zes_firmware_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetFirmwareExpProcAddrTable"), ze_result_t, sGetFirmwareExpProcAddrTable, ze_api_version_t, version, zes_firmware_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetMemoryProcAddrTable"), ze_result_t, sGetMemoryProcAddrTable, ze_api_version_t, version, zes_memory_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetFabricPortProcAddrTable"), ze_result_t, sGetFabricPortProcAddrTable, ze_api_version_t, version, zes_fabric_port_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetTemperatureProcAddrTable"), ze_result_t, sGetTemperatureProcAddrTable, ze_api_version_t, version, zes_temperature_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetPsuProcAddrTable"), ze_result_t, sGetPsuProcAddrTable, ze_api_version_t, version, zes_psu_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetFanProcAddrTable"), ze_result_t, sGetFanProcAddrTable, ze_api_version_t, version, zes_fan_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetLedProcAddrTable"), ze_result_t, sGetLedProcAddrTable, ze_api_version_t, version, zes_led_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetRasProcAddrTable"), ze_result_t, sGetRasProcAddrTable, ze_api_version_t, version, zes_ras_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetRasExpProcAddrTable"), ze_result_t, sGetRasExpProcAddrTable, ze_api_version_t, version, zes_ras_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetDiagnosticsProcAddrTable"), ze_result_t, sGetDiagnosticsProcAddrTable, ze_api_version_t, version, zes_diagnostics_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zesGetVFManagementExpProcAddrTable"), ze_result_t, sGetVFManagementExpProcAddrTable, ze_api_version_t, version, zes_vf_management_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricProgrammableExpProcAddrTable"), ze_result_t, tGetMetricProgrammableExpProcAddrTable, ze_api_version_t, version, zet_metric_programmable_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricTracerExpProcAddrTable"), ze_result_t, tGetMetricTracerExpProcAddrTable, ze_api_version_t, version, zet_metric_tracer_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricDecoderExpProcAddrTable"), ze_result_t, tGetMetricDecoderExpProcAddrTable, ze_api_version_t, version, zet_metric_decoder_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetDeviceProcAddrTable"), ze_result_t, tGetDeviceProcAddrTable, ze_api_version_t, version, zet_device_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetDeviceExpProcAddrTable"), ze_result_t, tGetDeviceExpProcAddrTable, ze_api_version_t, version, zet_device_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetContextProcAddrTable"), ze_result_t, tGetContextProcAddrTable, ze_api_version_t, version, zet_context_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetCommandListProcAddrTable"), ze_result_t, tGetCommandListProcAddrTable, ze_api_version_t, version, zet_command_list_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetCommandListExpProcAddrTable"), ze_result_t, tGetCommandListExpProcAddrTable, ze_api_version_t, version, zet_command_list_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetModuleProcAddrTable"), ze_result_t, tGetModuleProcAddrTable, ze_api_version_t, version, zet_module_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetKernelProcAddrTable"), ze_result_t, tGetKernelProcAddrTable, ze_api_version_t, version, zet_kernel_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricProcAddrTable"), ze_result_t, tGetMetricProcAddrTable, ze_api_version_t, version, zet_metric_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricExpProcAddrTable"), ze_result_t, tGetMetricExpProcAddrTable, ze_api_version_t, version, zet_metric_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricGroupProcAddrTable"), ze_result_t, tGetMetricGroupProcAddrTable, ze_api_version_t, version, zet_metric_group_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricGroupExpProcAddrTable"), ze_result_t, tGetMetricGroupExpProcAddrTable, ze_api_version_t, version, zet_metric_group_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricStreamerProcAddrTable"), ze_result_t, tGetMetricStreamerProcAddrTable, ze_api_version_t, version, zet_metric_streamer_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricQueryPoolProcAddrTable"), ze_result_t, tGetMetricQueryPoolProcAddrTable, ze_api_version_t, version, zet_metric_query_pool_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetMetricQueryProcAddrTable"), ze_result_t, tGetMetricQueryProcAddrTable, ze_api_version_t, version, zet_metric_query_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetTracerExpProcAddrTable"), ze_result_t, tGetTracerExpProcAddrTable, ze_api_version_t, version, zet_tracer_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zetGetDebugProcAddrTable"), ze_result_t, tGetDebugProcAddrTable, ze_api_version_t, version, zet_debug_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetRTASBuilderProcAddrTable"), ze_result_t, GetRTASBuilderProcAddrTable, ze_api_version_t, version, ze_rtas_builder_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetRTASBuilderExpProcAddrTable"), ze_result_t, GetRTASBuilderExpProcAddrTable, ze_api_version_t, version, ze_rtas_builder_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetRTASParallelOperationProcAddrTable"), ze_result_t, GetRTASParallelOperationProcAddrTable, ze_api_version_t, version, ze_rtas_parallel_operation_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetRTASParallelOperationExpProcAddrTable"), ze_result_t, GetRTASParallelOperationExpProcAddrTable, ze_api_version_t, version, ze_rtas_parallel_operation_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetGlobalProcAddrTable"), ze_result_t, GetGlobalProcAddrTable, ze_api_version_t, version, ze_global_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetDriverProcAddrTable"), ze_result_t, GetDriverProcAddrTable, ze_api_version_t, version, ze_driver_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetDriverExpProcAddrTable"), ze_result_t, GetDriverExpProcAddrTable, ze_api_version_t, version, ze_driver_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetDeviceProcAddrTable"), ze_result_t, GetDeviceProcAddrTable, ze_api_version_t, version, ze_device_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetDeviceExpProcAddrTable"), ze_result_t, GetDeviceExpProcAddrTable, ze_api_version_t, version, ze_device_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetContextProcAddrTable"), ze_result_t, GetContextProcAddrTable, ze_api_version_t, version, ze_context_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetCommandQueueProcAddrTable"), ze_result_t, GetCommandQueueProcAddrTable, ze_api_version_t, version, ze_command_queue_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetCommandListProcAddrTable"), ze_result_t, GetCommandListProcAddrTable, ze_api_version_t, version, ze_command_list_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetCommandListExpProcAddrTable"), ze_result_t, GetCommandListExpProcAddrTable, ze_api_version_t, version, ze_command_list_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetImageProcAddrTable"), ze_result_t, GetImageProcAddrTable, ze_api_version_t, version, ze_image_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetImageExpProcAddrTable"), ze_result_t, GetImageExpProcAddrTable, ze_api_version_t, version, ze_image_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetMemProcAddrTable"), ze_result_t, GetMemProcAddrTable, ze_api_version_t, version, ze_mem_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetMemExpProcAddrTable"), ze_result_t, GetMemExpProcAddrTable, ze_api_version_t, version, ze_mem_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetFenceProcAddrTable"), ze_result_t, GetFenceProcAddrTable, ze_api_version_t, version, ze_fence_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetEventPoolProcAddrTable"), ze_result_t, GetEventPoolProcAddrTable, ze_api_version_t, version, ze_event_pool_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetEventProcAddrTable"), ze_result_t, GetEventProcAddrTable, ze_api_version_t, version, ze_event_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetEventExpProcAddrTable"), ze_result_t, GetEventExpProcAddrTable, ze_api_version_t, version, ze_event_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetModuleProcAddrTable"), ze_result_t, GetModuleProcAddrTable, ze_api_version_t, version, ze_module_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetModuleBuildLogProcAddrTable"), ze_result_t, GetModuleBuildLogProcAddrTable, ze_api_version_t, version, ze_module_build_log_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetKernelProcAddrTable"), ze_result_t, GetKernelProcAddrTable, ze_api_version_t, version, ze_kernel_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetKernelExpProcAddrTable"), ze_result_t, GetKernelExpProcAddrTable, ze_api_version_t, version, ze_kernel_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetSamplerProcAddrTable"), ze_result_t, GetSamplerProcAddrTable, ze_api_version_t, version, ze_sampler_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetPhysicalMemProcAddrTable"), ze_result_t, GetPhysicalMemProcAddrTable, ze_api_version_t, version, ze_physical_mem_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetVirtualMemProcAddrTable"), ze_result_t, GetVirtualMemProcAddrTable, ze_api_version_t, version, ze_virtual_mem_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetFabricVertexExpProcAddrTable"), ze_result_t, GetFabricVertexExpProcAddrTable, ze_api_version_t, version, ze_fabric_vertex_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zeGetFabricEdgeExpProcAddrTable"), ze_result_t, GetFabricEdgeExpProcAddrTable, ze_api_version_t, version, ze_fabric_edge_exp_dditable_t *, pDdiTable);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelLoaderGetVersions"), ze_result_t, lLoaderGetVersions, size_t *, num_elems, zel_component_version_t *, versions);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelLoaderTranslateHandle"), ze_result_t, lLoaderTranslateHandle, zel_handle_type_t, handleType, void *, handleIn, void **, handleOut);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelSetDriverTeardown"), ze_result_t, lSetDriverTeardown);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelSetDelayLoaderContextTeardown"), void, lSetDelayLoaderContextTeardown);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelLoaderContextTeardown"), void, lLoaderContextTeardown);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelEnableTracingLayer"), ze_result_t, lEnableTracingLayer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelCheckIsLoaderInTearDown"), bool, lCheckIsLoaderInTearDown);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelRegisterTeardownCallback"), ze_result_t, lRegisterTeardownCallback, zel_loader_teardown_callback_t, application_callback, zel_application_teardown_callback_t *, loader_callback, uint32_t *, index);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelDisableTracingLayer"), ze_result_t, lDisableTracingLayer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerInitRegisterCallback"), ze_result_t, lTracerInitRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnInitCb_t, pfnInitCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverGetRegisterCallback"), ze_result_t, lTracerDriverGetRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverGetCb_t, pfnGetCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerInitDriversRegisterCallback"), ze_result_t, lTracerInitDriversRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnInitDriversCb_t, pfnInitDriversCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverGetApiVersionRegisterCallback"), ze_result_t, lTracerDriverGetApiVersionRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverGetApiVersionCb_t, pfnGetApiVersionCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverGetPropertiesRegisterCallback"), ze_result_t, lTracerDriverGetPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverGetPropertiesCb_t, pfnGetPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverGetIpcPropertiesRegisterCallback"), ze_result_t, lTracerDriverGetIpcPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverGetIpcPropertiesCb_t, pfnGetIpcPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverGetExtensionPropertiesRegisterCallback"), ze_result_t, lTracerDriverGetExtensionPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverGetExtensionPropertiesCb_t, pfnGetExtensionPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverGetExtensionFunctionAddressRegisterCallback"), ze_result_t, lTracerDriverGetExtensionFunctionAddressRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverGetExtensionFunctionAddressCb_t, pfnGetExtensionFunctionAddressCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverGetLastErrorDescriptionRegisterCallback"), ze_result_t, lTracerDriverGetLastErrorDescriptionRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverGetLastErrorDescriptionCb_t, pfnGetLastErrorDescriptionCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetRegisterCallback"), ze_result_t, lTracerDeviceGetRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetCb_t, pfnGetCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetRootDeviceRegisterCallback"), ze_result_t, lTracerDeviceGetRootDeviceRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetRootDeviceCb_t, pfnGetRootDeviceCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetSubDevicesRegisterCallback"), ze_result_t, lTracerDeviceGetSubDevicesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetSubDevicesCb_t, pfnGetSubDevicesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetPropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetPropertiesCb_t, pfnGetPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetComputePropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetComputePropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetComputePropertiesCb_t, pfnGetComputePropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetModulePropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetModulePropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetModulePropertiesCb_t, pfnGetModulePropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetCommandQueueGroupPropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetCommandQueueGroupPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetCommandQueueGroupPropertiesCb_t, pfnGetCommandQueueGroupPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetMemoryPropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetMemoryPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetMemoryPropertiesCb_t, pfnGetMemoryPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetMemoryAccessPropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetMemoryAccessPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetMemoryAccessPropertiesCb_t, pfnGetMemoryAccessPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetCachePropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetCachePropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetCachePropertiesCb_t, pfnGetCachePropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetImagePropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetImagePropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetImagePropertiesCb_t, pfnGetImagePropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetExternalMemoryPropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetExternalMemoryPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetExternalMemoryPropertiesCb_t, pfnGetExternalMemoryPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetP2PPropertiesRegisterCallback"), ze_result_t, lTracerDeviceGetP2PPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetP2PPropertiesCb_t, pfnGetP2PPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceCanAccessPeerRegisterCallback"), ze_result_t, lTracerDeviceCanAccessPeerRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceCanAccessPeerCb_t, pfnCanAccessPeerCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetStatusRegisterCallback"), ze_result_t, lTracerDeviceGetStatusRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetStatusCb_t, pfnGetStatusCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetGlobalTimestampsRegisterCallback"), ze_result_t, lTracerDeviceGetGlobalTimestampsRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetGlobalTimestampsCb_t, pfnGetGlobalTimestampsCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextCreateRegisterCallback"), ze_result_t, lTracerContextCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextCreateExRegisterCallback"), ze_result_t, lTracerContextCreateExRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextCreateExCb_t, pfnCreateExCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextDestroyRegisterCallback"), ze_result_t, lTracerContextDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextGetStatusRegisterCallback"), ze_result_t, lTracerContextGetStatusRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextGetStatusCb_t, pfnGetStatusCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandQueueCreateRegisterCallback"), ze_result_t, lTracerCommandQueueCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandQueueCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandQueueDestroyRegisterCallback"), ze_result_t, lTracerCommandQueueDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandQueueDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandQueueExecuteCommandListsRegisterCallback"), ze_result_t, lTracerCommandQueueExecuteCommandListsRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandQueueExecuteCommandListsCb_t, pfnExecuteCommandListsCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandQueueSynchronizeRegisterCallback"), ze_result_t, lTracerCommandQueueSynchronizeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandQueueSynchronizeCb_t, pfnSynchronizeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandQueueGetOrdinalRegisterCallback"), ze_result_t, lTracerCommandQueueGetOrdinalRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandQueueGetOrdinalCb_t, pfnGetOrdinalCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandQueueGetIndexRegisterCallback"), ze_result_t, lTracerCommandQueueGetIndexRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandQueueGetIndexCb_t, pfnGetIndexCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListCreateRegisterCallback"), ze_result_t, lTracerCommandListCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListCreateImmediateRegisterCallback"), ze_result_t, lTracerCommandListCreateImmediateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListCreateImmediateCb_t, pfnCreateImmediateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListDestroyRegisterCallback"), ze_result_t, lTracerCommandListDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListCloseRegisterCallback"), ze_result_t, lTracerCommandListCloseRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListCloseCb_t, pfnCloseCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListResetRegisterCallback"), ze_result_t, lTracerCommandListResetRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListResetCb_t, pfnResetCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendWriteGlobalTimestampRegisterCallback"), ze_result_t, lTracerCommandListAppendWriteGlobalTimestampRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendWriteGlobalTimestampCb_t, pfnAppendWriteGlobalTimestampCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListHostSynchronizeRegisterCallback"), ze_result_t, lTracerCommandListHostSynchronizeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListHostSynchronizeCb_t, pfnHostSynchronizeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListGetDeviceHandleRegisterCallback"), ze_result_t, lTracerCommandListGetDeviceHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListGetDeviceHandleCb_t, pfnGetDeviceHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListGetContextHandleRegisterCallback"), ze_result_t, lTracerCommandListGetContextHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListGetContextHandleCb_t, pfnGetContextHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListGetOrdinalRegisterCallback"), ze_result_t, lTracerCommandListGetOrdinalRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListGetOrdinalCb_t, pfnGetOrdinalCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListImmediateGetIndexRegisterCallback"), ze_result_t, lTracerCommandListImmediateGetIndexRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListImmediateGetIndexCb_t, pfnImmediateGetIndexCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListIsImmediateRegisterCallback"), ze_result_t, lTracerCommandListIsImmediateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListIsImmediateCb_t, pfnIsImmediateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendBarrierRegisterCallback"), ze_result_t, lTracerCommandListAppendBarrierRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendBarrierCb_t, pfnAppendBarrierCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendMemoryRangesBarrierRegisterCallback"), ze_result_t, lTracerCommandListAppendMemoryRangesBarrierRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendMemoryRangesBarrierCb_t, pfnAppendMemoryRangesBarrierCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextSystemBarrierRegisterCallback"), ze_result_t, lTracerContextSystemBarrierRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextSystemBarrierCb_t, pfnSystemBarrierCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendMemoryCopyRegisterCallback"), ze_result_t, lTracerCommandListAppendMemoryCopyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendMemoryCopyCb_t, pfnAppendMemoryCopyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendMemoryFillRegisterCallback"), ze_result_t, lTracerCommandListAppendMemoryFillRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendMemoryFillCb_t, pfnAppendMemoryFillCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendMemoryCopyRegionRegisterCallback"), ze_result_t, lTracerCommandListAppendMemoryCopyRegionRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendMemoryCopyRegionCb_t, pfnAppendMemoryCopyRegionCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendMemoryCopyFromContextRegisterCallback"), ze_result_t, lTracerCommandListAppendMemoryCopyFromContextRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendMemoryCopyFromContextCb_t, pfnAppendMemoryCopyFromContextCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendImageCopyRegisterCallback"), ze_result_t, lTracerCommandListAppendImageCopyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendImageCopyCb_t, pfnAppendImageCopyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendImageCopyRegionRegisterCallback"), ze_result_t, lTracerCommandListAppendImageCopyRegionRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendImageCopyRegionCb_t, pfnAppendImageCopyRegionCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendImageCopyToMemoryRegisterCallback"), ze_result_t, lTracerCommandListAppendImageCopyToMemoryRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendImageCopyToMemoryCb_t, pfnAppendImageCopyToMemoryCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendImageCopyFromMemoryRegisterCallback"), ze_result_t, lTracerCommandListAppendImageCopyFromMemoryRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendImageCopyFromMemoryCb_t, pfnAppendImageCopyFromMemoryCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendMemoryPrefetchRegisterCallback"), ze_result_t, lTracerCommandListAppendMemoryPrefetchRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendMemoryPrefetchCb_t, pfnAppendMemoryPrefetchCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendMemAdviseRegisterCallback"), ze_result_t, lTracerCommandListAppendMemAdviseRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendMemAdviseCb_t, pfnAppendMemAdviseCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolCreateRegisterCallback"), ze_result_t, lTracerEventPoolCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolDestroyRegisterCallback"), ze_result_t, lTracerEventPoolDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventCreateRegisterCallback"), ze_result_t, lTracerEventCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventDestroyRegisterCallback"), ze_result_t, lTracerEventDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolGetIpcHandleRegisterCallback"), ze_result_t, lTracerEventPoolGetIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolGetIpcHandleCb_t, pfnGetIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolPutIpcHandleRegisterCallback"), ze_result_t, lTracerEventPoolPutIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolPutIpcHandleCb_t, pfnPutIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolOpenIpcHandleRegisterCallback"), ze_result_t, lTracerEventPoolOpenIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolOpenIpcHandleCb_t, pfnOpenIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolCloseIpcHandleRegisterCallback"), ze_result_t, lTracerEventPoolCloseIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolCloseIpcHandleCb_t, pfnCloseIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendSignalEventRegisterCallback"), ze_result_t, lTracerCommandListAppendSignalEventRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendSignalEventCb_t, pfnAppendSignalEventCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendWaitOnEventsRegisterCallback"), ze_result_t, lTracerCommandListAppendWaitOnEventsRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendWaitOnEventsCb_t, pfnAppendWaitOnEventsCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventHostSignalRegisterCallback"), ze_result_t, lTracerEventHostSignalRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventHostSignalCb_t, pfnHostSignalCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventHostSynchronizeRegisterCallback"), ze_result_t, lTracerEventHostSynchronizeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventHostSynchronizeCb_t, pfnHostSynchronizeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventQueryStatusRegisterCallback"), ze_result_t, lTracerEventQueryStatusRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventQueryStatusCb_t, pfnQueryStatusCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendEventResetRegisterCallback"), ze_result_t, lTracerCommandListAppendEventResetRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendEventResetCb_t, pfnAppendEventResetCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventHostResetRegisterCallback"), ze_result_t, lTracerEventHostResetRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventHostResetCb_t, pfnHostResetCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventQueryKernelTimestampRegisterCallback"), ze_result_t, lTracerEventQueryKernelTimestampRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventQueryKernelTimestampCb_t, pfnQueryKernelTimestampCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendQueryKernelTimestampsRegisterCallback"), ze_result_t, lTracerCommandListAppendQueryKernelTimestampsRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendQueryKernelTimestampsCb_t, pfnAppendQueryKernelTimestampsCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventGetEventPoolRegisterCallback"), ze_result_t, lTracerEventGetEventPoolRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventGetEventPoolCb_t, pfnGetEventPoolCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventGetSignalScopeRegisterCallback"), ze_result_t, lTracerEventGetSignalScopeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventGetSignalScopeCb_t, pfnGetSignalScopeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventGetWaitScopeRegisterCallback"), ze_result_t, lTracerEventGetWaitScopeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventGetWaitScopeCb_t, pfnGetWaitScopeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolGetContextHandleRegisterCallback"), ze_result_t, lTracerEventPoolGetContextHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolGetContextHandleCb_t, pfnGetContextHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventPoolGetFlagsRegisterCallback"), ze_result_t, lTracerEventPoolGetFlagsRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventPoolGetFlagsCb_t, pfnGetFlagsCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFenceCreateRegisterCallback"), ze_result_t, lTracerFenceCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFenceCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFenceDestroyRegisterCallback"), ze_result_t, lTracerFenceDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFenceDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFenceHostSynchronizeRegisterCallback"), ze_result_t, lTracerFenceHostSynchronizeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFenceHostSynchronizeCb_t, pfnHostSynchronizeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFenceQueryStatusRegisterCallback"), ze_result_t, lTracerFenceQueryStatusRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFenceQueryStatusCb_t, pfnQueryStatusCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFenceResetRegisterCallback"), ze_result_t, lTracerFenceResetRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFenceResetCb_t, pfnResetCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageGetPropertiesRegisterCallback"), ze_result_t, lTracerImageGetPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageGetPropertiesCb_t, pfnGetPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageCreateRegisterCallback"), ze_result_t, lTracerImageCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageDestroyRegisterCallback"), ze_result_t, lTracerImageDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemAllocSharedRegisterCallback"), ze_result_t, lTracerMemAllocSharedRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemAllocSharedCb_t, pfnAllocSharedCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemAllocDeviceRegisterCallback"), ze_result_t, lTracerMemAllocDeviceRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemAllocDeviceCb_t, pfnAllocDeviceCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemAllocHostRegisterCallback"), ze_result_t, lTracerMemAllocHostRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemAllocHostCb_t, pfnAllocHostCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemFreeRegisterCallback"), ze_result_t, lTracerMemFreeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemFreeCb_t, pfnFreeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemGetAllocPropertiesRegisterCallback"), ze_result_t, lTracerMemGetAllocPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemGetAllocPropertiesCb_t, pfnGetAllocPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemGetAddressRangeRegisterCallback"), ze_result_t, lTracerMemGetAddressRangeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemGetAddressRangeCb_t, pfnGetAddressRangeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemGetIpcHandleRegisterCallback"), ze_result_t, lTracerMemGetIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemGetIpcHandleCb_t, pfnGetIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemGetIpcHandleFromFileDescriptorExpRegisterCallback"), ze_result_t, lTracerMemGetIpcHandleFromFileDescriptorExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemGetIpcHandleFromFileDescriptorExpCb_t, pfnGetIpcHandleFromFileDescriptorExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemGetFileDescriptorFromIpcHandleExpRegisterCallback"), ze_result_t, lTracerMemGetFileDescriptorFromIpcHandleExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemGetFileDescriptorFromIpcHandleExpCb_t, pfnGetFileDescriptorFromIpcHandleExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemPutIpcHandleRegisterCallback"), ze_result_t, lTracerMemPutIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemPutIpcHandleCb_t, pfnPutIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemOpenIpcHandleRegisterCallback"), ze_result_t, lTracerMemOpenIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemOpenIpcHandleCb_t, pfnOpenIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemCloseIpcHandleRegisterCallback"), ze_result_t, lTracerMemCloseIpcHandleRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemCloseIpcHandleCb_t, pfnCloseIpcHandleCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemSetAtomicAccessAttributeExpRegisterCallback"), ze_result_t, lTracerMemSetAtomicAccessAttributeExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemSetAtomicAccessAttributeExpCb_t, pfnSetAtomicAccessAttributeExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemGetAtomicAccessAttributeExpRegisterCallback"), ze_result_t, lTracerMemGetAtomicAccessAttributeExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemGetAtomicAccessAttributeExpCb_t, pfnGetAtomicAccessAttributeExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleCreateRegisterCallback"), ze_result_t, lTracerModuleCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleDestroyRegisterCallback"), ze_result_t, lTracerModuleDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleDynamicLinkRegisterCallback"), ze_result_t, lTracerModuleDynamicLinkRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleDynamicLinkCb_t, pfnDynamicLinkCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleBuildLogDestroyRegisterCallback"), ze_result_t, lTracerModuleBuildLogDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleBuildLogDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleBuildLogGetStringRegisterCallback"), ze_result_t, lTracerModuleBuildLogGetStringRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleBuildLogGetStringCb_t, pfnGetStringCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleGetNativeBinaryRegisterCallback"), ze_result_t, lTracerModuleGetNativeBinaryRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleGetNativeBinaryCb_t, pfnGetNativeBinaryCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleGetGlobalPointerRegisterCallback"), ze_result_t, lTracerModuleGetGlobalPointerRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleGetGlobalPointerCb_t, pfnGetGlobalPointerCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleGetKernelNamesRegisterCallback"), ze_result_t, lTracerModuleGetKernelNamesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleGetKernelNamesCb_t, pfnGetKernelNamesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleGetPropertiesRegisterCallback"), ze_result_t, lTracerModuleGetPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleGetPropertiesCb_t, pfnGetPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelCreateRegisterCallback"), ze_result_t, lTracerKernelCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelDestroyRegisterCallback"), ze_result_t, lTracerKernelDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleGetFunctionPointerRegisterCallback"), ze_result_t, lTracerModuleGetFunctionPointerRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleGetFunctionPointerCb_t, pfnGetFunctionPointerCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSetGroupSizeRegisterCallback"), ze_result_t, lTracerKernelSetGroupSizeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSetGroupSizeCb_t, pfnSetGroupSizeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSuggestGroupSizeRegisterCallback"), ze_result_t, lTracerKernelSuggestGroupSizeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSuggestGroupSizeCb_t, pfnSuggestGroupSizeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSuggestMaxCooperativeGroupCountRegisterCallback"), ze_result_t, lTracerKernelSuggestMaxCooperativeGroupCountRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSuggestMaxCooperativeGroupCountCb_t, pfnSuggestMaxCooperativeGroupCountCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSetArgumentValueRegisterCallback"), ze_result_t, lTracerKernelSetArgumentValueRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSetArgumentValueCb_t, pfnSetArgumentValueCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSetIndirectAccessRegisterCallback"), ze_result_t, lTracerKernelSetIndirectAccessRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSetIndirectAccessCb_t, pfnSetIndirectAccessCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelGetIndirectAccessRegisterCallback"), ze_result_t, lTracerKernelGetIndirectAccessRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelGetIndirectAccessCb_t, pfnGetIndirectAccessCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelGetSourceAttributesRegisterCallback"), ze_result_t, lTracerKernelGetSourceAttributesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelGetSourceAttributesCb_t, pfnGetSourceAttributesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSetCacheConfigRegisterCallback"), ze_result_t, lTracerKernelSetCacheConfigRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSetCacheConfigCb_t, pfnSetCacheConfigCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelGetPropertiesRegisterCallback"), ze_result_t, lTracerKernelGetPropertiesRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelGetPropertiesCb_t, pfnGetPropertiesCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelGetNameRegisterCallback"), ze_result_t, lTracerKernelGetNameRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelGetNameCb_t, pfnGetNameCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendLaunchKernelRegisterCallback"), ze_result_t, lTracerCommandListAppendLaunchKernelRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendLaunchKernelCb_t, pfnAppendLaunchKernelCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendLaunchCooperativeKernelRegisterCallback"), ze_result_t, lTracerCommandListAppendLaunchCooperativeKernelRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendLaunchCooperativeKernelCb_t, pfnAppendLaunchCooperativeKernelCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendLaunchKernelIndirectRegisterCallback"), ze_result_t, lTracerCommandListAppendLaunchKernelIndirectRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendLaunchKernelIndirectCb_t, pfnAppendLaunchKernelIndirectCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendLaunchMultipleKernelsIndirectRegisterCallback"), ze_result_t, lTracerCommandListAppendLaunchMultipleKernelsIndirectRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendLaunchMultipleKernelsIndirectCb_t, pfnAppendLaunchMultipleKernelsIndirectCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextMakeMemoryResidentRegisterCallback"), ze_result_t, lTracerContextMakeMemoryResidentRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextMakeMemoryResidentCb_t, pfnMakeMemoryResidentCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextEvictMemoryRegisterCallback"), ze_result_t, lTracerContextEvictMemoryRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextEvictMemoryCb_t, pfnEvictMemoryCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextMakeImageResidentRegisterCallback"), ze_result_t, lTracerContextMakeImageResidentRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextMakeImageResidentCb_t, pfnMakeImageResidentCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerContextEvictImageRegisterCallback"), ze_result_t, lTracerContextEvictImageRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnContextEvictImageCb_t, pfnEvictImageCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerSamplerCreateRegisterCallback"), ze_result_t, lTracerSamplerCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnSamplerCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerSamplerDestroyRegisterCallback"), ze_result_t, lTracerSamplerDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnSamplerDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerVirtualMemReserveRegisterCallback"), ze_result_t, lTracerVirtualMemReserveRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnVirtualMemReserveCb_t, pfnReserveCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerVirtualMemFreeRegisterCallback"), ze_result_t, lTracerVirtualMemFreeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnVirtualMemFreeCb_t, pfnFreeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerVirtualMemQueryPageSizeRegisterCallback"), ze_result_t, lTracerVirtualMemQueryPageSizeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnVirtualMemQueryPageSizeCb_t, pfnQueryPageSizeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerPhysicalMemCreateRegisterCallback"), ze_result_t, lTracerPhysicalMemCreateRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnPhysicalMemCreateCb_t, pfnCreateCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerPhysicalMemDestroyRegisterCallback"), ze_result_t, lTracerPhysicalMemDestroyRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnPhysicalMemDestroyCb_t, pfnDestroyCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerVirtualMemMapRegisterCallback"), ze_result_t, lTracerVirtualMemMapRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnVirtualMemMapCb_t, pfnMapCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerVirtualMemUnmapRegisterCallback"), ze_result_t, lTracerVirtualMemUnmapRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnVirtualMemUnmapCb_t, pfnUnmapCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerVirtualMemSetAccessAttributeRegisterCallback"), ze_result_t, lTracerVirtualMemSetAccessAttributeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnVirtualMemSetAccessAttributeCb_t, pfnSetAccessAttributeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerVirtualMemGetAccessAttributeRegisterCallback"), ze_result_t, lTracerVirtualMemGetAccessAttributeRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnVirtualMemGetAccessAttributeCb_t, pfnGetAccessAttributeCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSetGlobalOffsetExpRegisterCallback"), ze_result_t, lTracerKernelSetGlobalOffsetExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSetGlobalOffsetExpCb_t, pfnSetGlobalOffsetExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelGetBinaryExpRegisterCallback"), ze_result_t, lTracerKernelGetBinaryExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelGetBinaryExpCb_t, pfnGetBinaryExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceImportExternalSemaphoreExtRegisterCallback"), ze_result_t, lTracerDeviceImportExternalSemaphoreExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceImportExternalSemaphoreExtCb_t, pfnImportExternalSemaphoreExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceReleaseExternalSemaphoreExtRegisterCallback"), ze_result_t, lTracerDeviceReleaseExternalSemaphoreExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceReleaseExternalSemaphoreExtCb_t, pfnReleaseExternalSemaphoreExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendSignalExternalSemaphoreExtRegisterCallback"), ze_result_t, lTracerCommandListAppendSignalExternalSemaphoreExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendSignalExternalSemaphoreExtCb_t, pfnAppendSignalExternalSemaphoreExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendWaitExternalSemaphoreExtRegisterCallback"), ze_result_t, lTracerCommandListAppendWaitExternalSemaphoreExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendWaitExternalSemaphoreExtCb_t, pfnAppendWaitExternalSemaphoreExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderCreateExtRegisterCallback"), ze_result_t, lTracerRTASBuilderCreateExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderCreateExtCb_t, pfnCreateExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderGetBuildPropertiesExtRegisterCallback"), ze_result_t, lTracerRTASBuilderGetBuildPropertiesExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderGetBuildPropertiesExtCb_t, pfnGetBuildPropertiesExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverRTASFormatCompatibilityCheckExtRegisterCallback"), ze_result_t, lTracerDriverRTASFormatCompatibilityCheckExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverRTASFormatCompatibilityCheckExtCb_t, pfnRTASFormatCompatibilityCheckExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderBuildExtRegisterCallback"), ze_result_t, lTracerRTASBuilderBuildExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderBuildExtCb_t, pfnBuildExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderCommandListAppendCopyExtRegisterCallback"), ze_result_t, lTracerRTASBuilderCommandListAppendCopyExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderCommandListAppendCopyExtCb_t, pfnCommandListAppendCopyExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderDestroyExtRegisterCallback"), ze_result_t, lTracerRTASBuilderDestroyExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderDestroyExtCb_t, pfnDestroyExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationCreateExtRegisterCallback"), ze_result_t, lTracerRTASParallelOperationCreateExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationCreateExtCb_t, pfnCreateExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationGetPropertiesExtRegisterCallback"), ze_result_t, lTracerRTASParallelOperationGetPropertiesExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationGetPropertiesExtCb_t, pfnGetPropertiesExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationJoinExtRegisterCallback"), ze_result_t, lTracerRTASParallelOperationJoinExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationJoinExtCb_t, pfnJoinExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationDestroyExtRegisterCallback"), ze_result_t, lTracerRTASParallelOperationDestroyExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationDestroyExtCb_t, pfnDestroyExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetVectorWidthPropertiesExtRegisterCallback"), ze_result_t, lTracerDeviceGetVectorWidthPropertiesExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetVectorWidthPropertiesExtCb_t, pfnGetVectorWidthPropertiesExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceReserveCacheExtRegisterCallback"), ze_result_t, lTracerDeviceReserveCacheExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceReserveCacheExtCb_t, pfnReserveCacheExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceSetCacheAdviceExtRegisterCallback"), ze_result_t, lTracerDeviceSetCacheAdviceExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceSetCacheAdviceExtCb_t, pfnSetCacheAdviceExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventQueryTimestampsExpRegisterCallback"), ze_result_t, lTracerEventQueryTimestampsExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventQueryTimestampsExpCb_t, pfnQueryTimestampsExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageGetMemoryPropertiesExpRegisterCallback"), ze_result_t, lTracerImageGetMemoryPropertiesExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageGetMemoryPropertiesExpCb_t, pfnGetMemoryPropertiesExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageViewCreateExtRegisterCallback"), ze_result_t, lTracerImageViewCreateExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageViewCreateExtCb_t, pfnViewCreateExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageViewCreateExpRegisterCallback"), ze_result_t, lTracerImageViewCreateExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageViewCreateExpCb_t, pfnViewCreateExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerKernelSchedulingHintExpRegisterCallback"), ze_result_t, lTracerKernelSchedulingHintExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnKernelSchedulingHintExpCb_t, pfnSchedulingHintExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDevicePciGetPropertiesExtRegisterCallback"), ze_result_t, lTracerDevicePciGetPropertiesExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDevicePciGetPropertiesExtCb_t, pfnPciGetPropertiesExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendImageCopyToMemoryExtRegisterCallback"), ze_result_t, lTracerCommandListAppendImageCopyToMemoryExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendImageCopyToMemoryExtCb_t, pfnAppendImageCopyToMemoryExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListAppendImageCopyFromMemoryExtRegisterCallback"), ze_result_t, lTracerCommandListAppendImageCopyFromMemoryExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListAppendImageCopyFromMemoryExtCb_t, pfnAppendImageCopyFromMemoryExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageGetAllocPropertiesExtRegisterCallback"), ze_result_t, lTracerImageGetAllocPropertiesExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageGetAllocPropertiesExtCb_t, pfnGetAllocPropertiesExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerModuleInspectLinkageExtRegisterCallback"), ze_result_t, lTracerModuleInspectLinkageExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnModuleInspectLinkageExtCb_t, pfnInspectLinkageExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemFreeExtRegisterCallback"), ze_result_t, lTracerMemFreeExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemFreeExtCb_t, pfnFreeExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFabricVertexGetExpRegisterCallback"), ze_result_t, lTracerFabricVertexGetExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFabricVertexGetExpCb_t, pfnGetExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFabricVertexGetSubVerticesExpRegisterCallback"), ze_result_t, lTracerFabricVertexGetSubVerticesExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFabricVertexGetSubVerticesExpCb_t, pfnGetSubVerticesExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFabricVertexGetPropertiesExpRegisterCallback"), ze_result_t, lTracerFabricVertexGetPropertiesExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFabricVertexGetPropertiesExpCb_t, pfnGetPropertiesExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFabricVertexGetDeviceExpRegisterCallback"), ze_result_t, lTracerFabricVertexGetDeviceExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFabricVertexGetDeviceExpCb_t, pfnGetDeviceExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDeviceGetFabricVertexExpRegisterCallback"), ze_result_t, lTracerDeviceGetFabricVertexExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDeviceGetFabricVertexExpCb_t, pfnGetFabricVertexExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFabricEdgeGetExpRegisterCallback"), ze_result_t, lTracerFabricEdgeGetExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFabricEdgeGetExpCb_t, pfnGetExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFabricEdgeGetVerticesExpRegisterCallback"), ze_result_t, lTracerFabricEdgeGetVerticesExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFabricEdgeGetVerticesExpCb_t, pfnGetVerticesExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerFabricEdgeGetPropertiesExpRegisterCallback"), ze_result_t, lTracerFabricEdgeGetPropertiesExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnFabricEdgeGetPropertiesExpCb_t, pfnGetPropertiesExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerEventQueryKernelTimestampsExtRegisterCallback"), ze_result_t, lTracerEventQueryKernelTimestampsExtRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnEventQueryKernelTimestampsExtCb_t, pfnQueryKernelTimestampsExtCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderCreateExpRegisterCallback"), ze_result_t, lTracerRTASBuilderCreateExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderCreateExpCb_t, pfnCreateExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderGetBuildPropertiesExpRegisterCallback"), ze_result_t, lTracerRTASBuilderGetBuildPropertiesExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderGetBuildPropertiesExpCb_t, pfnGetBuildPropertiesExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerDriverRTASFormatCompatibilityCheckExpRegisterCallback"), ze_result_t, lTracerDriverRTASFormatCompatibilityCheckExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnDriverRTASFormatCompatibilityCheckExpCb_t, pfnRTASFormatCompatibilityCheckExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderBuildExpRegisterCallback"), ze_result_t, lTracerRTASBuilderBuildExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderBuildExpCb_t, pfnBuildExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASBuilderDestroyExpRegisterCallback"), ze_result_t, lTracerRTASBuilderDestroyExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASBuilderDestroyExpCb_t, pfnDestroyExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationCreateExpRegisterCallback"), ze_result_t, lTracerRTASParallelOperationCreateExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationCreateExpCb_t, pfnCreateExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationGetPropertiesExpRegisterCallback"), ze_result_t, lTracerRTASParallelOperationGetPropertiesExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationGetPropertiesExpCb_t, pfnGetPropertiesExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationJoinExpRegisterCallback"), ze_result_t, lTracerRTASParallelOperationJoinExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationJoinExpCb_t, pfnJoinExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerRTASParallelOperationDestroyExpRegisterCallback"), ze_result_t, lTracerRTASParallelOperationDestroyExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnRTASParallelOperationDestroyExpCb_t, pfnDestroyExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerMemGetPitchFor2dImageRegisterCallback"), ze_result_t, lTracerMemGetPitchFor2dImageRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnMemGetPitchFor2dImageCb_t, pfnGetPitchFor2dImageCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerImageGetDeviceOffsetExpRegisterCallback"), ze_result_t, lTracerImageGetDeviceOffsetExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnImageGetDeviceOffsetExpCb_t, pfnGetDeviceOffsetExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListCreateCloneExpRegisterCallback"), ze_result_t, lTracerCommandListCreateCloneExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListCreateCloneExpCb_t, pfnCreateCloneExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListImmediateAppendCommandListsExpRegisterCallback"), ze_result_t, lTracerCommandListImmediateAppendCommandListsExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListImmediateAppendCommandListsExpCb_t, pfnImmediateAppendCommandListsExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListGetNextCommandIdExpRegisterCallback"), ze_result_t, lTracerCommandListGetNextCommandIdExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListGetNextCommandIdExpCb_t, pfnGetNextCommandIdExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListGetNextCommandIdWithKernelsExpRegisterCallback"), ze_result_t, lTracerCommandListGetNextCommandIdWithKernelsExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListGetNextCommandIdWithKernelsExpCb_t, pfnGetNextCommandIdWithKernelsExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListUpdateMutableCommandsExpRegisterCallback"), ze_result_t, lTracerCommandListUpdateMutableCommandsExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListUpdateMutableCommandsExpCb_t, pfnUpdateMutableCommandsExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListUpdateMutableCommandSignalEventExpRegisterCallback"), ze_result_t, lTracerCommandListUpdateMutableCommandSignalEventExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListUpdateMutableCommandSignalEventExpCb_t, pfnUpdateMutableCommandSignalEventExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListUpdateMutableCommandWaitEventsExpRegisterCallback"), ze_result_t, lTracerCommandListUpdateMutableCommandWaitEventsExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListUpdateMutableCommandWaitEventsExpCb_t, pfnUpdateMutableCommandWaitEventsExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelTracerCommandListUpdateMutableCommandKernelsExpRegisterCallback"), ze_result_t, lTracerCommandListUpdateMutableCommandKernelsExpRegisterCallback, zel_tracer_handle_t, hTracer, zel_tracer_reg_t, callback_type, ze_pfnCommandListUpdateMutableCommandKernelsExpCb_t, pfnUpdateMutableCommandKernelsExpCb);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("zelGetTracerApiProcAddrTable"), ze_result_t, lGetTracerApiProcAddrTable, ze_api_version_t, version, zel_tracer_dditable_t *, pDdiTable);

};

} // namespace xsched::levelzero
