/// This file is auto-generated by command "python3 tools/autogen/gen.py -s platforms/vpi/hal/include/xsched/vpi/hal/vpi.h -f vpi -p vpi"
#pragma once

#include "xsched/protocol/def.h"
#include "xsched/utils/common.h"
#include "xsched/utils/symbol.h"
#include "xsched/utils/function.h"
#include "xsched/vpi/hal/vpi.h"

namespace xsched::vpi
{

class Driver
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, XSCHED_VPI_LIB_ENV_NAME,
                           std::vector<std::string>({"libnvvpi.so"}), // search name
                           std::vector<std::string>({"/opt/nvidia/vpi2/lib64"})); // search path

public:
    STATIC_CLASS(Driver);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeSwizzle"), VPISwizzle, MakeSwizzle, VPIChannel, x, VPIChannel, y, VPIChannel, z, VPIChannel, w);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSwizzleGetChannels"), void, SwizzleGetChannels, VPISwizzle, swizzle, VPIChannel *, channels);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSwizzleGetChannelCount"), int, SwizzleGetChannelCount, VPISwizzle, swizzle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakePacking"), VPIPacking, MakePacking, const VPIPackingParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPackingGetParams"), void, PackingGetParams, VPIPacking, packing, VPIPackingParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPackingGetComponentCount"), int, PackingGetComponentCount, VPIPacking, packing);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPackingGetBitsPerComponent"), void, PackingGetBitsPerComponent, VPIPacking, packing, int32_t *, bits);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPackingGetBitsPerPixel"), int, PackingGetBitsPerPixel, VPIPacking, packing);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakePixelType"), VPIPixelType, MakePixelType, VPIMemLayout, memLayout, VPIDataType, dataType, VPIPacking, packing);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetPacking"), VPIPacking, PixelTypeGetPacking, VPIPixelType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetBitsPerPixel"), int, PixelTypeGetBitsPerPixel, VPIPixelType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetBitsPerChannel"), void, PixelTypeGetBitsPerChannel, VPIPixelType, type, int32_t *, bits);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetDataType"), VPIDataType, PixelTypeGetDataType, VPIPixelType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetMemLayout"), VPIMemLayout, PixelTypeGetMemLayout, VPIPixelType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeSetMemLayout"), VPIPixelType, PixelTypeSetMemLayout, VPIPixelType, type, VPIMemLayout, layout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetChannelCount"), int, PixelTypeGetChannelCount, VPIPixelType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetName"), const char *, PixelTypeGetName, VPIPixelType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPixelTypeGetChannelType"), VPIPixelType, PixelTypeGetChannelType, VPIPixelType, type, int, channel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeColorSpec"), VPIColorSpec, MakeColorSpec, VPIColorSpace, cspace, VPIYCbCrEncoding, encoding, VPIColorTransferFunction, xferFunc, VPIColorRange, range, VPIChromaLocation, locHoriz, VPIChromaLocation, locVert);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeChromaSubsampling"), VPIChromaSubsampling, MakeChromaSubsampling, int, samplesHoriz, int, samplesVert);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiChromaSubsamplingGetSamplesHoriz"), int, ChromaSubsamplingGetSamplesHoriz, VPIChromaSubsampling, css);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiChromaSubsamplingGetSamplesVert"), int, ChromaSubsamplingGetSamplesVert, VPIChromaSubsampling, css);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecGetChromaLocHoriz"), VPIChromaLocation, ColorSpecGetChromaLocHoriz, VPIColorSpec, cspec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecGetChromaLocVert"), VPIChromaLocation, ColorSpecGetChromaLocVert, VPIColorSpec, cspec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecSetChromaLoc"), VPIColorSpec, ColorSpecSetChromaLoc, VPIColorSpec, cspec, VPIChromaLocation, locHoriz, VPIChromaLocation, locVert);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecGetSpace"), VPIColorSpace, ColorSpecGetSpace, VPIColorSpec, cspec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecSetSpace"), VPIColorSpec, ColorSpecSetSpace, VPIColorSpec, cspec, VPIColorSpace, cspace);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecGetYCbCrEncoding"), VPIYCbCrEncoding, ColorSpecGetYCbCrEncoding, VPIColorSpec, cspec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecSetYCbCrEncoding"), VPIColorSpec, ColorSpecSetYCbCrEncoding, VPIColorSpec, cspec, VPIYCbCrEncoding, encoding);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecGetTransferFunction"), VPIColorTransferFunction, ColorSpecGetTransferFunction, VPIColorSpec, cspec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecSetTransferFunction"), VPIColorSpec, ColorSpecSetTransferFunction, VPIColorSpec, cspec, VPIColorTransferFunction, xferFunc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecGetRange"), VPIColorRange, ColorSpecGetRange, VPIColorSpec, cspec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecSetRange"), VPIColorSpec, ColorSpecSetRange, VPIColorSpec, cspec, VPIColorRange, range);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiColorSpecGetName"), const char *, ColorSpecGetName, VPIColorSpec, cspec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiGetVersion"), int, GetVersion);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStatusGetName"), const char *, StatusGetName, VPIStatus, code);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiGetLastStatus"), VPIStatus, GetLastStatus);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiGetLastStatusMessage"), VPIStatus, GetLastStatusMessage, char *, msgBuffer, int32_t, lenBuffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPeekAtLastStatus"), VPIStatus, PeekAtLastStatus);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPeekAtLastStatusMessage"), VPIStatus, PeekAtLastStatusMessage, char *, msgBuffer, int32_t, lenBuffer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeYCbCrImageFormat"), VPIImageFormat, MakeYCbCrImageFormat, VPIColorSpec, colorSpec, VPIChromaSubsampling, chromaSub, VPIMemLayout, memLayout, VPIDataType, dataType, VPISwizzle, swizzle, VPIPacking, packing0, VPIPacking, packing1, VPIPacking, packing2, VPIPacking, packing3);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeColorImageFormat"), VPIImageFormat, MakeColorImageFormat, VPIColorModel, colorModel, VPIColorSpec, colorSpec, VPIMemLayout, memLayout, VPIDataType, dataType, VPISwizzle, swizzle, VPIPacking, packing0, VPIPacking, packing1, VPIPacking, packing2, VPIPacking, packing3);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeNonColorImageFormat"), VPIImageFormat, MakeNonColorImageFormat, VPIMemLayout, memLayout, VPIDataType, dataType, VPISwizzle, swizzle, VPIPacking, packing0, VPIPacking, packing1, VPIPacking, packing2, VPIPacking, packing3);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeRawImageFormat"), VPIImageFormat, MakeRawImageFormat, VPIRawPattern, rawPattern, VPIMemLayout, memLayout, VPIDataType, dataType, VPISwizzle, swizzle, VPIPacking, packing0, VPIPacking, packing1, VPIPacking, packing2, VPIPacking, packing3);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeImageFormatFromFourCC"), VPIImageFormat, MakeImageFormatFromFourCC, uint32_t, fourcc, VPIColorSpec, colorSpec, VPIMemLayout, memLayout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetFourCC"), uint32_t, ImageFormatGetFourCC, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlanePacking"), VPIPacking, ImageFormatGetPlanePacking, VPIImageFormat, fmt, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlaneWidth"), int32_t, ImageFormatGetPlaneWidth, VPIImageFormat, fmt, int32_t, imgWidth, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlaneHeight"), int32_t, ImageFormatGetPlaneHeight, VPIImageFormat, fmt, int32_t, imgHeight, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatSetSwizzleAndPacking"), VPIImageFormat, ImageFormatSetSwizzleAndPacking, VPIImageFormat, fmt, VPISwizzle, swizzle, VPIPacking, packing0, VPIPacking, packing1, VPIPacking, packing2, VPIPacking, packing3);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlaneBitsPerPixel"), int, ImageFormatGetPlaneBitsPerPixel, VPIImageFormat, fmt, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatSetDataType"), VPIImageFormat, ImageFormatSetDataType, VPIImageFormat, fmt, VPIDataType, dataType);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetDataType"), VPIDataType, ImageFormatGetDataType, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetSwizzle"), VPISwizzle, ImageFormatGetSwizzle, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlaneSwizzle"), VPISwizzle, ImageFormatGetPlaneSwizzle, VPIImageFormat, fmt, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatSetMemLayout"), VPIImageFormat, ImageFormatSetMemLayout, VPIImageFormat, fmt, VPIMemLayout, memLayout);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetMemLayout"), VPIMemLayout, ImageFormatGetMemLayout, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatSetColorSpec"), VPIImageFormat, ImageFormatSetColorSpec, VPIImageFormat, fmt, VPIColorSpec, colorSpec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetColorSpec"), VPIColorSpec, ImageFormatGetColorSpec, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetColorModel"), VPIColorModel, ImageFormatGetColorModel, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatSetChromaSubsampling"), VPIImageFormat, ImageFormatSetChromaSubsampling, VPIImageFormat, fmt, VPIChromaSubsampling, css);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetChromaSubsampling"), VPIChromaSubsampling, ImageFormatGetChromaSubsampling, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlaneChannelCount"), int, ImageFormatGetPlaneChannelCount, VPIImageFormat, fmt, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlaneCount"), int, ImageFormatGetPlaneCount, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetChannelCount"), int, ImageFormatGetChannelCount, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetBitsPerChannel"), void, ImageFormatGetBitsPerChannel, VPIImageFormat, fmt, int32_t *, bits);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlanePixelType"), VPIPixelType, ImageFormatGetPlanePixelType, VPIImageFormat, fmt, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetPlaneFormat"), VPIImageFormat, ImageFormatGetPlaneFormat, VPIImageFormat, fmt, int, plane);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiMakeImageFormatFromPlanes"), VPIImageFormat, MakeImageFormatFromPlanes, VPIImageFormat, plane0, VPIImageFormat, plane1, VPIImageFormat, plane2, VPIImageFormat, plane3);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetName"), const char *, ImageFormatGetName, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatGetRawPattern"), VPIRawPattern, ImageFormatGetRawPattern, VPIImageFormat, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatSetRawPattern"), VPIImageFormat, ImageFormatSetRawPattern, VPIImageFormat, fmt, VPIRawPattern, rawPattern);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageFormatHasSameDataLayout"), int, ImageFormatHasSameDataLayout, VPIImageFormat, a, VPIImageFormat, b);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageCreate"), VPIStatus, ImageCreate, int32_t, width, int32_t, height, VPIImageFormat, fmt, uint64_t, flags, VPIImage *, img);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitImageWrapperParams"), VPIStatus, InitImageWrapperParams, VPIImageWrapperParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageCreateView"), VPIStatus, ImageCreateView, VPIImage, imgParent, const VPIRectangleI *, clipBounds, uint64_t, flags, VPIImage *, imgView);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageSetView"), VPIStatus, ImageSetView, VPIImage, view, VPIImage, parent, const VPIRectangleI *, clipBounds);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageCreateWrapper"), VPIStatus, ImageCreateWrapper, const VPIImageData *, data, const VPIImageWrapperParams *, params, uint64_t, flags, VPIImage *, img);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageSetWrapper"), VPIStatus, ImageSetWrapper, VPIImage, img, const VPIImageData *, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageDestroy"), void, ImageDestroy, VPIImage, img);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageGetSize"), VPIStatus, ImageGetSize, VPIImage, img, int32_t *, width, int32_t *, height);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageGetFormat"), VPIStatus, ImageGetFormat, VPIImage, img, VPIImageFormat *, format);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageGetFlags"), VPIStatus, ImageGetFlags, VPIImage, img, uint64_t *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageLock"), VPIStatus, ImageLock, VPIImage, img, VPILockMode, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageLockData"), VPIStatus, ImageLockData, VPIImage, img, VPILockMode, mode, VPIImageBufferType, bufType, VPIImageData *, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageUnlock"), VPIStatus, ImageUnlock, VPIImage, img);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayTypeGetName"), const char *, ArrayTypeGetName, VPIArrayType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayTypeGetSize"), int, ArrayTypeGetSize, VPIArrayType, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiWarpMapAllocData"), VPIStatus, WarpMapAllocData, VPIWarpMap *, warpMap);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiWarpMapFreeData"), void, WarpMapFreeData, VPIWarpMap *, warpMap);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiWarpMapGenerateIdentity"), VPIStatus, WarpMapGenerateIdentity, VPIWarpMap *, warpMap);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitFASTCornerDetectorParams"), VPIStatus, InitFASTCornerDetectorParams, VPIFASTCornerDetectorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitFASTCornerDetector"), VPIStatus, SubmitFASTCornerDetector, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIArray, outCorners, const VPIFASTCornerDetectorParams *, params, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidCreate"), VPIStatus, PyramidCreate, int32_t, width, int32_t, height, VPIImageFormat, fmt, int32_t, numLevels, float, scale, uint64_t, flags, VPIPyramid *, pyr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidDestroy"), void, PyramidDestroy, VPIPyramid, pyr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidGetFlags"), VPIStatus, PyramidGetFlags, VPIPyramid, pyr, uint64_t *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidGetFormat"), VPIStatus, PyramidGetFormat, VPIPyramid, pyr, VPIImageFormat *, fmt);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidGetNumLevels"), VPIStatus, PyramidGetNumLevels, VPIPyramid, pyr, int32_t *, numLevels);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidGetSize"), VPIStatus, PyramidGetSize, VPIPyramid, pyr, int32_t, outSize, int32_t *, outWidth, int32_t *, outHeight);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidGetScale"), VPIStatus, PyramidGetScale, VPIPyramid, pyr, float *, scale);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidLock"), VPIStatus, PyramidLock, VPIPyramid, pyr, VPILockMode, lock);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidLockData"), VPIStatus, PyramidLockData, VPIPyramid, pyr, VPILockMode, lock, VPIImageBufferType, bufType, VPIPyramidData *, out);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPyramidUnlock"), VPIStatus, PyramidUnlock, VPIPyramid, pyr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiImageCreateWrapperPyramidLevel"), VPIStatus, ImageCreateWrapperPyramidLevel, VPIPyramid, pyr, int32_t, level, VPIImage *, img);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStreamCreate"), VPIStatus, StreamCreate, uint64_t, flags, VPIStream *, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStreamDestroy"), void, StreamDestroy, VPIStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStreamFlush"), VPIStatus, StreamFlush, VPIStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStreamSync"), VPIStatus, StreamSync, VPIStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStreamWaitEvent"), VPIStatus, StreamWaitEvent, VPIStream, stream, VPIEvent, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStreamGetThreadHandle"), VPIStatus, StreamGetThreadHandle, VPIStream, stream, VPINativeThreadHandle *, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiStreamGetFlags"), VPIStatus, StreamGetFlags, VPIStream, stream, uint64_t *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPayloadGetFlags"), VPIStatus, PayloadGetFlags, VPIPayload, payload, uint64_t *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiPayloadDestroy"), void, PayloadDestroy, VPIPayload, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiEventCreate"), VPIStatus, EventCreate, uint64_t, flags, VPIEvent *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiEventDestroy"), void, EventDestroy, VPIEvent, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiEventRecord"), VPIStatus, EventRecord, VPIEvent, event, VPIStream, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiEventSync"), VPIStatus, EventSync, VPIEvent, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiEventQuery"), VPIStatus, EventQuery, VPIEvent, event, VPIEventState *, state);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiEventElapsedTimeMillis"), VPIStatus, EventElapsedTimeMillis, VPIEvent, start, VPIEvent, end, float *, msec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiEventGetFlags"), VPIStatus, EventGetFlags, VPIEvent, event, uint64_t *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextCreate"), VPIStatus, ContextCreate, uint64_t, flags, VPIContext *, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextCreateWrapperCUDA"), VPIStatus, ContextCreateWrapperCUDA, uint64_t, flags, CUcontext, cudaCtx, VPIContext *, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextDestroy"), void, ContextDestroy, VPIContext, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextSetParallelFor"), VPIStatus, ContextSetParallelFor, VPIContext, ctx, const VPIParallelForConfig *, config);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextGetParallelFor"), VPIStatus, ContextGetParallelFor, VPIContext, ctx, VPIParallelForConfig *, config);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextGetCurrent"), VPIStatus, ContextGetCurrent, VPIContext *, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextSetCurrent"), VPIStatus, ContextSetCurrent, VPIContext, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextPush"), VPIStatus, ContextPush, VPIContext, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextPop"), VPIStatus, ContextPop, VPIContext *, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiContextGetFlags"), VPIStatus, ContextGetFlags, VPIContext, ctx, uint64_t *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayCreate"), VPIStatus, ArrayCreate, int32_t, capacity, VPIArrayType, type, uint64_t, flags, VPIArray *, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayCreateWrapper"), VPIStatus, ArrayCreateWrapper, const VPIArrayData *, data, uint64_t, flags, VPIArray *, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArraySetWrapper"), VPIStatus, ArraySetWrapper, VPIArray, array, const VPIArrayData *, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayDestroy"), void, ArrayDestroy, VPIArray, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayGetSize"), VPIStatus, ArrayGetSize, VPIArray, array, int32_t *, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArraySetSize"), VPIStatus, ArraySetSize, VPIArray, array, int32_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayGetCapacity"), VPIStatus, ArrayGetCapacity, VPIArray, array, int32_t *, capacity);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayGetStrideBytes"), VPIStatus, ArrayGetStrideBytes, VPIArray, array, int32_t *, strideBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayGetFlags"), VPIStatus, ArrayGetFlags, VPIArray, array, uint64_t *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayGetType"), VPIStatus, ArrayGetType, VPIArray, array, VPIArrayType *, type);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayLock"), VPIStatus, ArrayLock, VPIArray, array, VPILockMode, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayLockData"), VPIStatus, ArrayLockData, VPIArray, array, VPILockMode, mode, VPIArrayBufferType, bufType, VPIArrayData *, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiArrayUnlock"), VPIStatus, ArrayUnlock, VPIArray, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitRescale"), VPIStatus, SubmitRescale, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, VPIInterpolationType, interpolationType, VPIBorderExtension, border, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitHarrisCornerDetectorParams"), VPIStatus, InitHarrisCornerDetectorParams, VPIHarrisCornerDetectorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateHarrisCornerDetector"), VPIStatus, CreateHarrisCornerDetector, uint64_t, backends, int32_t, inputWidth, int32_t, inputHeight, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitHarrisCornerDetector"), VPIStatus, SubmitHarrisCornerDetector, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIArray, outFeatures, VPIArray, outScores, const VPIHarrisCornerDetectorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitKLTFeatureTrackerCreationParams"), VPIStatus, InitKLTFeatureTrackerCreationParams, VPIKLTFeatureTrackerCreationParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateKLTFeatureTracker"), VPIStatus, CreateKLTFeatureTracker, uint64_t, backends, int32_t, imageWidth, int32_t, imageHeight, VPIImageFormat, imageFormat, const VPIKLTFeatureTrackerCreationParams *, params, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitKLTFeatureTrackerParams"), VPIStatus, InitKLTFeatureTrackerParams, VPIKLTFeatureTrackerParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitKLTFeatureTracker"), VPIStatus, SubmitKLTFeatureTracker, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, templateImage, VPIArray, inputBoxList, VPIArray, inputPredictionList, VPIImage, referenceImage, VPIArray, outputBoxList, VPIArray, outputEstimationList, const VPIKLTFeatureTrackerParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateMinMaxLoc"), VPIStatus, CreateMinMaxLoc, uint64_t, backends, int32_t, imageWidth, int32_t, imageHeight, VPIImageFormat, imageFormat, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitMinMaxLoc"), VPIStatus, SubmitMinMaxLoc, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIArray, minCoords, VPIArray, maxCoords);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateHistogramEven"), VPIStatus, CreateHistogramEven, uint64_t, backends, VPIImageFormat, fmt, float, start, float, end, int32_t, numBins, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitHistogram"), VPIStatus, SubmitHistogram, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIArray, output, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitGaussianFilter"), VPIStatus, SubmitGaussianFilter, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, int32_t, kernelSizeX, int32_t, kernelSizeY, float, sigmaX, float, sigmaY, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitMixChannels"), VPIStatus, SubmitMixChannels, VPIStream, stream, uint64_t, backend, VPIImage *, inputs, int, numInputs, VPIImage *, outputs, int, numOutputs, const int *, inMapping, const int *, outMapping, int, numMapping);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitBoxFilter"), VPIStatus, SubmitBoxFilter, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, int32_t, kernelWidth, int32_t, kernelHeight, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitStereoDisparityEstimatorCreationParams"), VPIStatus, InitStereoDisparityEstimatorCreationParams, VPIStereoDisparityEstimatorCreationParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateStereoDisparityEstimator"), VPIStatus, CreateStereoDisparityEstimator, uint64_t, backends, int32_t, imageWidth, int32_t, imageHeight, VPIImageFormat, inputFormat, const VPIStereoDisparityEstimatorCreationParams *, params, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitStereoDisparityEstimatorParams"), VPIStatus, InitStereoDisparityEstimatorParams, VPIStereoDisparityEstimatorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitStereoDisparityEstimator"), VPIStatus, SubmitStereoDisparityEstimator, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, left, VPIImage, right, VPIImage, disparity, VPIImage, confidenceMap, const VPIStereoDisparityEstimatorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitPerspectiveWarp"), VPIStatus, SubmitPerspectiveWarp, VPIStream, stream, uint64_t, backend, VPIImage, input, const VPIPerspectiveTransform, xform, VPIImage, output, const VPIWarpGrid *, grid, VPIInterpolationType, interp, VPIBorderExtension, border, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitORBParams"), VPIStatus, InitORBParams, VPIORBParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateORBFeatureDetector"), VPIStatus, CreateORBFeatureDetector, uint64_t, backends, int32_t, capacity, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitORBFeatureDetector"), VPIStatus, SubmitORBFeatureDetector, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIPyramid, input, VPIArray, outCorners, VPIArray, outDescriptors, const VPIORBParams *, params, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateORBDescriptorExtractor"), VPIStatus, CreateORBDescriptorExtractor, uint64_t, backends, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitORBDescriptorExtractor"), VPIStatus, SubmitORBDescriptorExtractor, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIArray, inCorners, VPIArray, outDescriptors, uint32_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitOpticalFlowPyrLKParams"), VPIStatus, InitOpticalFlowPyrLKParams, VPIOpticalFlowPyrLKParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateOpticalFlowPyrLK"), VPIStatus, CreateOpticalFlowPyrLK, uint64_t, backends, int32_t, width, int32_t, height, VPIImageFormat, fmt, int32_t, levels, float, scale, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitOpticalFlowPyrLK"), VPIStatus, SubmitOpticalFlowPyrLK, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIPyramid, prevPyr, VPIPyramid, curPyr, VPIArray, prevPts, VPIArray, curPts, VPIArray, trackingStatus, const VPIOpticalFlowPyrLKParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateCannyEdgeDetector"), VPIStatus, CreateCannyEdgeDetector, uint64_t, backends, int32_t, imageWidth, int32_t, imageHeight, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitCannyEdgeDetectorParams"), VPIStatus, InitCannyEdgeDetectorParams, VPICannyEdgeDetectorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitCannyEdgeDetector"), VPIStatus, SubmitCannyEdgeDetector, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIImage, output, float, thresholdStrong, float, thresholdWeak, float, edgeValue, float, nonEdgeValue, const VPICannyEdgeDetectorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitConvertImageFormatParams"), VPIStatus, InitConvertImageFormatParams, VPIConvertImageFormatParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitConvertImageFormat"), VPIStatus, SubmitConvertImageFormat, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, const VPIConvertImageFormatParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitConvertImageFormatPyramid"), VPIStatus, SubmitConvertImageFormatPyramid, VPIStream, stream, uint64_t, backend, VPIPyramid, input, VPIPyramid, output, const VPIConvertImageFormatParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitImageStats"), VPIStatus, SubmitImageStats, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIArray, statistics, VPIImage, mask, uint32_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitGaussianPyramidGenerator"), VPIStatus, SubmitGaussianPyramidGenerator, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIPyramid, output, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitBruteForceMatcher"), VPIStatus, SubmitBruteForceMatcher, VPIStream, stream, uint64_t, backend, VPIArray, queryDescriptor, VPIArray, referenceDescriptor, VPINormType, normType, int32_t, maxMatchesPerQuery, VPIArray, matches, uint32_t, algoFlag);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateTransformEstimator"), VPIStatus, CreateTransformEstimator, uint64_t, backends, int32_t, maxKeypoints, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitTransformEstimatorParams"), VPIStatus, InitTransformEstimatorParams, VPITransformType, type, VPITransformEstimatorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitTransformEstimator"), VPIStatus, SubmitTransformEstimator, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIArray, srcKeypoints, VPIArray, tgtKeypoints, VPIArray, matches, VPIArray, outTransform, VPIArray, outInliers, const VPITransformEstimatorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitBackgroundSubtractorParams"), VPIStatus, InitBackgroundSubtractorParams, VPIBackgroundSubtractorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateBackgroundSubtractor"), VPIStatus, CreateBackgroundSubtractor, uint64_t, backends, int32_t, imageWidth, int32_t, imageHeight, VPIImageFormat, inputFormat, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitBackgroundSubtractor"), VPIStatus, SubmitBackgroundSubtractor, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, inFrame, VPIImage, outFGMask, VPIImage, outBGImage, const VPIBackgroundSubtractorParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateTemporalNoiseReduction"), VPIStatus, CreateTemporalNoiseReduction, uint64_t, backends, int32_t, width, int32_t, height, VPIImageFormat, imgFormat, VPITNRVersion, version, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiInitTemporalNoiseReductionParams"), VPIStatus, InitTemporalNoiseReductionParams, VPITNRParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitTemporalNoiseReduction"), VPIStatus, SubmitTemporalNoiseReduction, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, prevFrame, VPIImage, curFrame, VPIImage, outFrame, const VPITNRParams *, params);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitBilateralFilter"), VPIStatus, SubmitBilateralFilter, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, int32_t, kernelSize, float, sigmaRange, float, sigmaSpace, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateOpticalFlowDense"), VPIStatus, CreateOpticalFlowDense, uint64_t, backends, int32_t, width, int32_t, height, VPIImageFormat, inputFmt, const int32_t *, gridSize, int32_t, numLevels, VPIOpticalFlowQuality, quality, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitOpticalFlowDense"), VPIStatus, SubmitOpticalFlowDense, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, prevImg, VPIImage, curImg, VPIImage, mvImg);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitOpticalFlowDensePyramid"), VPIStatus, SubmitOpticalFlowDensePyramid, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIPyramid, prevPyr, VPIPyramid, curPyr, VPIImage, mvImg);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiOpticalFlowDenseGetSGMParams"), VPIStatus, OpticalFlowDenseGetSGMParams, VPIPayload, payload, VPIOpticalFlowDenseSGMParams *, sgmParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiOpticalFlowDenseSetSGMParams"), VPIStatus, OpticalFlowDenseSetSGMParams, VPIPayload, payload, const VPIOpticalFlowDenseSGMParams *, sgmParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitConvolution"), VPIStatus, SubmitConvolution, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, const float *, kernelData, int32_t, kernelWidth, int32_t, kernelHeight, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitSeparableConvolution"), VPIStatus, SubmitSeparableConvolution, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, const float *, kernelXData, int32_t, kernelXSize, const float *, kernelYData, int32_t, kernelYSize, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateTemplateMatching"), VPIStatus, CreateTemplateMatching, uint64_t, backends, int32_t, imageWidth, int32_t, imageHeight, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiTemplateMatchingSetSourceImage"), VPIStatus, TemplateMatchingSetSourceImage, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, srcImage);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiTemplateMatchingSetTemplateImage"), VPIStatus, TemplateMatchingSetTemplateImage, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, templImage, VPIImage, mask);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitTemplateMatching"), VPIStatus, SubmitTemplateMatching, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, output, VPITemplateMatchingMethod, method);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitImageFlip"), VPIStatus, SubmitImageFlip, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, VPIFlipMode, flipMode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitLaplacianPyramidGenerator"), VPIStatus, SubmitLaplacianPyramidGenerator, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIPyramid, output, VPIPyramid, gaussianPyr, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateRemap"), VPIStatus, CreateRemap, uint64_t, backends, const VPIWarpMap *, warpMap, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitRemap"), VPIStatus, SubmitRemap, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIImage, output, VPIInterpolationType, interp, VPIBorderExtension, border, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitErode"), VPIStatus, SubmitErode, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, const int8_t *, kernelData, int32_t, kernelWidth, int32_t, kernelHeight, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitDilate"), VPIStatus, SubmitDilate, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, const int8_t *, kernelData, int32_t, kernelWidth, int32_t, kernelHeight, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateEqualizeHist"), VPIStatus, CreateEqualizeHist, uint64_t, backend, VPIImageFormat, fmt, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitEqualizeHist"), VPIStatus, SubmitEqualizeHist, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIImage, output);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateFFT"), VPIStatus, CreateFFT, uint64_t, backends, int32_t, inputWidth, int32_t, inputHeight, const VPIImageFormat, inFormat, const VPIImageFormat, outFormat, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitFFT"), VPIStatus, SubmitFFT, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIImage, output, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateIFFT"), VPIStatus, CreateIFFT, uint64_t, backends, int32_t, outputWidth, int32_t, outputHeight, const VPIImageFormat, inFormat, const VPIImageFormat, outFormat, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitIFFT"), VPIStatus, SubmitIFFT, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIImage, output, uint64_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitMedianFilter"), VPIStatus, SubmitMedianFilter, VPIStream, stream, uint64_t, backend, VPIImage, input, VPIImage, output, int32_t, kernelWidth, int32_t, kernelHeight, const int8_t *, kernelData, VPIBorderExtension, border);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateExtractHOGFeatures"), VPIStatus, CreateExtractHOGFeatures, uint64_t, backends, int32_t, width, int32_t, height, int32_t, features, int32_t, cellSize, int32_t, numOrientations, int32_t *, outNumFeatures, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateExtractHOGFeaturesBatch"), VPIStatus, CreateExtractHOGFeaturesBatch, uint64_t, backends, int32_t, maxBatchWidth, int32_t, maxBatchHeight, int32_t, imgWidth, int32_t, imgHeight, int32_t, features, int32_t, cellSize, int32_t, numOrientations, int32_t *, outNumFeatures, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitExtractHOGFeatures"), VPIStatus, SubmitExtractHOGFeatures, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIImage *, outFeatures, int32_t, numFeatures);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiCreateExtractColorNameFeatures"), VPIStatus, CreateExtractColorNameFeatures, uint64_t, backends, VPIImageFormat, outFormat, VPIPayload *, payload);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitExtractColorNameFeatures"), VPIStatus, SubmitExtractColorNameFeatures, VPIStream, stream, uint64_t, backend, VPIPayload, payload, VPIImage, input, VPIImage *, output, int32_t, numOutputs);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiWarpMapGenerateFromFisheyeLensDistortionModel"), VPIStatus, WarpMapGenerateFromFisheyeLensDistortionModel, const VPICameraIntrinsic, Kin, const VPICameraExtrinsic, X, const VPICameraIntrinsic, Kout, const VPIFisheyeLensDistortionModel *, distModel, VPIWarpMap *, warpMap);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiWarpMapGenerateFromPolynomialLensDistortionModel"), VPIStatus, WarpMapGenerateFromPolynomialLensDistortionModel, const VPICameraIntrinsic, Kin, const VPICameraExtrinsic, X, const VPICameraIntrinsic, Kout, const VPIPolynomialLensDistortionModel *, distModel, VPIWarpMap *, warpMap);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitHostFunction"), VPIStatus, SubmitHostFunction, VPIStream, stream, VPIHostFunction, hostFunc, void *, hostData);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("vpiSubmitHostFunctionEx"), VPIStatus, SubmitHostFunctionEx, VPIStream, stream, VPIHostFunctionEx, hostFunc, void *, hostData);

};

} // namespace xsched::vpi
