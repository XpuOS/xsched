/// This file is auto-generated by command "python3 tools/autogen/gen.py --source platforms/hip/hal/include/xsched/hip/hal/hip.h --lib /opt/rocm/lib/libamdhip64.so --platform hip --prefix hip -I /usr/lib/gcc/x86_64-linux-gnu/13/include"
#pragma once

#include "xsched/protocol/def.h"
#include "xsched/utils/common.h"
#include "xsched/utils/symbol.h"
#include "xsched/utils/function.h"
#include "xsched/hip/hal/hip.h"
#include "xsched/hip/hal/amd_comgr.h"

namespace xsched::hip
{

class Driver
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, XSCHED_HIP_LIB_ENV_NAME,
                           std::vector<std::string>({"libamdhip64.so"}), // search name
                           std::vector<std::string>({"/opt/rocm/lib"})); // search path

public:
    STATIC_CLASS(Driver);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipGetPCH"), void, GetPCH, const char**, pch, unsigned int*, size);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__gnu_h2f_ieee"), float, h2f_ieee, unsigned short, value);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__gnu_f2h_ieee"), unsigned short, f2h_ieee, float, value);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipPopCallConfiguration"), hipError_t, PopCallConfiguration, dim3*, gridDim, dim3*, blockDim, size_t*, sharedMem, hipStream_t*, stream);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipPushCallConfiguration"), hipError_t, PushCallConfiguration, dim3, gridDim, dim3, blockDim, size_t, sharedMem, hipStream_t, stream);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipRegisterFatBinary"), void**, RegisterFatBinary, const void*, data);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipRegisterFunction"), void, RegisterFunction, void**, modules, const void*, hostFunction, char*, deviceFunction, const char*, deviceName, unsigned int, threadLimit, void*, tid, void*, bid, dim3*, blockDim, dim3*, gridDim, int*, wSize);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipRegisterManagedVar"), void, RegisterManagedVar, void*, hipModule, void**, pointer, void*, init_value, const char*, name, size_t, size, unsigned, align);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipRegisterSurface"), void, RegisterSurface, void**, modules, void*, var, char*, hostVar, char*, deviceVar, int, type, int, ext);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipRegisterTexture"), void, RegisterTexture, void**, modules, void*, var, char*, hostVar, char*, deviceVar, int, type, int, norm, int, ext);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipRegisterVar"), void, RegisterVar, void**, modules, void*, var, char*, hostVar, char*, deviceVar, int, ext, size_t, size, int, constant, int, global);
	DEFINE_STATIC_ADDRESS_CALL(GetSymbol("__hipUnregisterFatBinary"), void, UnregisterFatBinary, void**, modules);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipInit"), hipError_t, Init, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDriverGetVersion"), hipError_t, DriverGetVersion, int *, driverVersion);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipRuntimeGetVersion"), hipError_t, RuntimeGetVersion, int *, runtimeVersion);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGet"), hipError_t, DeviceGet, hipDevice_t *, device, int, ordinal);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceComputeCapability"), hipError_t, DeviceComputeCapability, int *, major, int *, minor, hipDevice_t, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetName"), hipError_t, DeviceGetName, char *, name, int, len, hipDevice_t, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetUuid"), hipError_t, DeviceGetUuid, hipUUID *, uuid, hipDevice_t, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetP2PAttribute"), hipError_t, DeviceGetP2PAttribute, int *, value, hipDeviceP2PAttr, attr, int, srcDevice, int, dstDevice);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetPCIBusId"), hipError_t, DeviceGetPCIBusId, char *, pciBusId, int, len, int, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetByPCIBusId"), hipError_t, DeviceGetByPCIBusId, int *, device, const char *, pciBusId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceTotalMem"), hipError_t, DeviceTotalMem, size_t *, bytes, hipDevice_t, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceSynchronize"), hipError_t, DeviceSynchronize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceReset"), hipError_t, DeviceReset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipSetDevice"), hipError_t, SetDevice, int, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipSetValidDevices"), hipError_t, SetValidDevices, int *, device_arr, int, len);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetDevice"), hipError_t, GetDevice, int *, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetDeviceCount"), hipError_t, GetDeviceCount, int *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetAttribute"), hipError_t, DeviceGetAttribute, int *, pi, hipDeviceAttribute_t, attr, int, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetDefaultMemPool"), hipError_t, DeviceGetDefaultMemPool, hipMemPool_t *, mem_pool, int, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceSetMemPool"), hipError_t, DeviceSetMemPool, int, device, hipMemPool_t, mem_pool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetMemPool"), hipError_t, DeviceGetMemPool, hipMemPool_t *, mem_pool, int, device);
    // DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetDevicePropertiesR0600"), hipError_t, GetDevicePropertiesR0600, hipDeviceProp_tR0600 *, prop, int, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetDevicePropertiesR0600"), hipError_t, GetDeviceProperties, hipDeviceProp_tR0600 *, prop, int, deviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceSetCacheConfig"), hipError_t, DeviceSetCacheConfig, hipFuncCache_t, cacheConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetCacheConfig"), hipError_t, DeviceGetCacheConfig, hipFuncCache_t *, cacheConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetLimit"), hipError_t, DeviceGetLimit, size_t *, pValue, enum hipLimit_t, limit);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceSetLimit"), hipError_t, DeviceSetLimit, enum hipLimit_t, limit, size_t, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetSharedMemConfig"), hipError_t, DeviceGetSharedMemConfig, hipSharedMemConfig *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetDeviceFlags"), hipError_t, GetDeviceFlags, unsigned int *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceSetSharedMemConfig"), hipError_t, DeviceSetSharedMemConfig, hipSharedMemConfig, config);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipSetDeviceFlags"), hipError_t, SetDeviceFlags, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipChooseDeviceR0600"), hipError_t, ChooseDeviceR0600, int *, device, const hipDeviceProp_tR0600 *, prop);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExtGetLinkTypeAndHopCount"), hipError_t, ExtGetLinkTypeAndHopCount, int, device1, int, device2, uint32_t *, linktype, uint32_t *, hopcount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipIpcGetMemHandle"), hipError_t, IpcGetMemHandle, hipIpcMemHandle_t *, handle, void *, devPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipIpcOpenMemHandle"), hipError_t, IpcOpenMemHandle, void **, devPtr, hipIpcMemHandle_t, handle, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipIpcCloseMemHandle"), hipError_t, IpcCloseMemHandle, void *, devPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipIpcGetEventHandle"), hipError_t, IpcGetEventHandle, hipIpcEventHandle_t *, handle, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipIpcOpenEventHandle"), hipError_t, IpcOpenEventHandle, hipEvent_t *, event, hipIpcEventHandle_t, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFuncSetAttribute"), hipError_t, FuncSetAttribute, const void *, func, hipFuncAttribute, attr, int, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFuncSetCacheConfig"), hipError_t, FuncSetCacheConfig, const void *, func, hipFuncCache_t, config);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFuncSetSharedMemConfig"), hipError_t, FuncSetSharedMemConfig, const void *, func, hipSharedMemConfig, config);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetLastError"), hipError_t, GetLastError);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExtGetLastError"), hipError_t, ExtGetLastError);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipPeekAtLastError"), hipError_t, PeekAtLastError);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetErrorName"), const char *, GetErrorName, hipError_t, hip_error);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetErrorString"), const char *, GetErrorString, hipError_t, hipError);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvGetErrorName"), hipError_t, DrvGetErrorName, hipError_t, hipError, const char **, errorString);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvGetErrorString"), hipError_t, DrvGetErrorString, hipError_t, hipError, const char **, errorString);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamCreate"), hipError_t, StreamCreate, hipStream_t *, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamCreateWithFlags"), hipError_t, StreamCreateWithFlags, hipStream_t *, stream, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamCreateWithPriority"), hipError_t, StreamCreateWithPriority, hipStream_t *, stream, unsigned int, flags, int, priority);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetStreamPriorityRange"), hipError_t, DeviceGetStreamPriorityRange, int *, leastPriority, int *, greatestPriority);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamDestroy"), hipError_t, StreamDestroy, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamQuery"), hipError_t, StreamQuery, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamSynchronize"), hipError_t, StreamSynchronize, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamWaitEvent"), hipError_t, StreamWaitEvent, hipStream_t, stream, hipEvent_t, event, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamGetFlags"), hipError_t, StreamGetFlags, hipStream_t, stream, unsigned int *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamGetPriority"), hipError_t, StreamGetPriority, hipStream_t, stream, int *, priority);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamGetDevice"), hipError_t, StreamGetDevice, hipStream_t, stream, hipDevice_t *, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExtStreamCreateWithCUMask"), hipError_t, ExtStreamCreateWithCUMask, hipStream_t *, stream, uint32_t, cuMaskSize, const uint32_t *, cuMask);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExtStreamGetCUMask"), hipError_t, ExtStreamGetCUMask, hipStream_t, stream, uint32_t, cuMaskSize, uint32_t *, cuMask);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamAddCallback"), hipError_t, StreamAddCallback, hipStream_t, stream, hipStreamCallback_t, callback, void *, userData, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamWaitValue32"), hipError_t, StreamWaitValue32, hipStream_t, stream, void *, ptr, uint32_t, value, unsigned int, flags, uint32_t, mask);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamWaitValue64"), hipError_t, StreamWaitValue64, hipStream_t, stream, void *, ptr, uint64_t, value, unsigned int, flags, uint64_t, mask);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamWriteValue32"), hipError_t, StreamWriteValue32, hipStream_t, stream, void *, ptr, uint32_t, value, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamWriteValue64"), hipError_t, StreamWriteValue64, hipStream_t, stream, void *, ptr, uint64_t, value, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipEventCreateWithFlags"), hipError_t, EventCreateWithFlags, hipEvent_t *, event, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipEventCreate"), hipError_t, EventCreate, hipEvent_t *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipEventRecord"), hipError_t, EventRecord, hipEvent_t, event, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipEventDestroy"), hipError_t, EventDestroy, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipEventSynchronize"), hipError_t, EventSynchronize, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipEventElapsedTime"), hipError_t, EventElapsedTime, float *, ms, hipEvent_t, start, hipEvent_t, stop);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipEventQuery"), hipError_t, EventQuery, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipPointerSetAttribute"), hipError_t, PointerSetAttribute, const void *, value, hipPointer_attribute, attribute, hipDeviceptr_t, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipPointerGetAttributes"), hipError_t, PointerGetAttributes, hipPointerAttribute_t *, attributes, const void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipPointerGetAttribute"), hipError_t, PointerGetAttribute, void *, data, hipPointer_attribute, attribute, hipDeviceptr_t, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvPointerGetAttributes"), hipError_t, DrvPointerGetAttributes, unsigned int, numAttributes, hipPointer_attribute *, attributes, void **, data, hipDeviceptr_t, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipImportExternalSemaphore"), hipError_t, ImportExternalSemaphore, hipExternalSemaphore_t *, extSem_out, const hipExternalSemaphoreHandleDesc *, semHandleDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipSignalExternalSemaphoresAsync"), hipError_t, SignalExternalSemaphoresAsync, const hipExternalSemaphore_t *, extSemArray, const hipExternalSemaphoreSignalParams *, paramsArray, unsigned int, numExtSems, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipWaitExternalSemaphoresAsync"), hipError_t, WaitExternalSemaphoresAsync, const hipExternalSemaphore_t *, extSemArray, const hipExternalSemaphoreWaitParams *, paramsArray, unsigned int, numExtSems, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDestroyExternalSemaphore"), hipError_t, DestroyExternalSemaphore, hipExternalSemaphore_t, extSem);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipImportExternalMemory"), hipError_t, ImportExternalMemory, hipExternalMemory_t *, extMem_out, const hipExternalMemoryHandleDesc *, memHandleDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExternalMemoryGetMappedBuffer"), hipError_t, ExternalMemoryGetMappedBuffer, void **, devPtr, hipExternalMemory_t, extMem, const hipExternalMemoryBufferDesc *, bufferDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDestroyExternalMemory"), hipError_t, DestroyExternalMemory, hipExternalMemory_t, extMem);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMalloc"), hipError_t, Malloc, void **, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExtMallocWithFlags"), hipError_t, ExtMallocWithFlags, void **, ptr, size_t, sizeBytes, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMallocHost"), hipError_t, MallocHost, void **, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemAllocHost"), hipError_t, MemAllocHost, void **, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipHostMalloc"), hipError_t, HostMalloc, void **, ptr, size_t, size, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMallocManaged"), hipError_t, MallocManaged, void **, dev_ptr, size_t, size, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPrefetchAsync"), hipError_t, MemPrefetchAsync, const void *, dev_ptr, size_t, count, int, device, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemAdvise"), hipError_t, MemAdvise, const void *, dev_ptr, size_t, count, hipMemoryAdvise, advice, int, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemRangeGetAttribute"), hipError_t, MemRangeGetAttribute, void *, data, size_t, data_size, hipMemRangeAttribute, attribute, const void *, dev_ptr, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemRangeGetAttributes"), hipError_t, MemRangeGetAttributes, void **, data, size_t *, data_sizes, hipMemRangeAttribute *, attributes, size_t, num_attributes, const void *, dev_ptr, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamAttachMemAsync"), hipError_t, StreamAttachMemAsync, hipStream_t, stream, void *, dev_ptr, size_t, length, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMallocAsync"), hipError_t, MallocAsync, void **, dev_ptr, size_t, size, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFreeAsync"), hipError_t, FreeAsync, void *, dev_ptr, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolTrimTo"), hipError_t, MemPoolTrimTo, hipMemPool_t, mem_pool, size_t, min_bytes_to_hold);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolSetAttribute"), hipError_t, MemPoolSetAttribute, hipMemPool_t, mem_pool, hipMemPoolAttr, attr, void *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolGetAttribute"), hipError_t, MemPoolGetAttribute, hipMemPool_t, mem_pool, hipMemPoolAttr, attr, void *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolSetAccess"), hipError_t, MemPoolSetAccess, hipMemPool_t, mem_pool, const hipMemAccessDesc *, desc_list, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolGetAccess"), hipError_t, MemPoolGetAccess, hipMemAccessFlags *, flags, hipMemPool_t, mem_pool, hipMemLocation *, location);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolCreate"), hipError_t, MemPoolCreate, hipMemPool_t *, mem_pool, const hipMemPoolProps *, pool_props);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolDestroy"), hipError_t, MemPoolDestroy, hipMemPool_t, mem_pool);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMallocFromPoolAsync"), hipError_t, MallocFromPoolAsync, void **, dev_ptr, size_t, size, hipMemPool_t, mem_pool, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolExportToShareableHandle"), hipError_t, MemPoolExportToShareableHandle, void *, shared_handle, hipMemPool_t, mem_pool, hipMemAllocationHandleType, handle_type, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolImportFromShareableHandle"), hipError_t, MemPoolImportFromShareableHandle, hipMemPool_t *, mem_pool, void *, shared_handle, hipMemAllocationHandleType, handle_type, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolExportPointer"), hipError_t, MemPoolExportPointer, hipMemPoolPtrExportData *, export_data, void *, dev_ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPoolImportPointer"), hipError_t, MemPoolImportPointer, void **, dev_ptr, hipMemPool_t, mem_pool, hipMemPoolPtrExportData *, export_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipHostAlloc"), hipError_t, HostAlloc, void **, ptr, size_t, size, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipHostGetDevicePointer"), hipError_t, HostGetDevicePointer, void **, devPtr, void *, hstPtr, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipHostGetFlags"), hipError_t, HostGetFlags, unsigned int *, flagsPtr, void *, hostPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipHostRegister"), hipError_t, HostRegister, void *, hostPtr, size_t, sizeBytes, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipHostUnregister"), hipError_t, HostUnregister, void *, hostPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMallocPitch"), hipError_t, MallocPitch, void **, ptr, size_t *, pitch, size_t, width, size_t, height);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemAllocPitch"), hipError_t, MemAllocPitch, hipDeviceptr_t *, dptr, size_t *, pitch, size_t, widthInBytes, size_t, height, unsigned int, elementSizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFree"), hipError_t, Free, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFreeHost"), hipError_t, FreeHost, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipHostFree"), hipError_t, HostFree, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy"), hipError_t, Memcpy, void *, dst, const void *, src, size_t, sizeBytes, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyWithStream"), hipError_t, MemcpyWithStream, void *, dst, const void *, src, size_t, sizeBytes, hipMemcpyKind, kind, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyHtoD"), hipError_t, MemcpyHtoD, hipDeviceptr_t, dst, void *, src, size_t, sizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyDtoH"), hipError_t, MemcpyDtoH, void *, dst, hipDeviceptr_t, src, size_t, sizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyDtoD"), hipError_t, MemcpyDtoD, hipDeviceptr_t, dst, hipDeviceptr_t, src, size_t, sizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyAtoD"), hipError_t, MemcpyAtoD, hipDeviceptr_t, dstDevice, hipArray_t, srcArray, size_t, srcOffset, size_t, ByteCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyDtoA"), hipError_t, MemcpyDtoA, hipArray_t, dstArray, size_t, dstOffset, hipDeviceptr_t, srcDevice, size_t, ByteCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyAtoA"), hipError_t, MemcpyAtoA, hipArray_t, dstArray, size_t, dstOffset, hipArray_t, srcArray, size_t, srcOffset, size_t, ByteCount);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyHtoDAsync"), hipError_t, MemcpyHtoDAsync, hipDeviceptr_t, dst, void *, src, size_t, sizeBytes, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyDtoHAsync"), hipError_t, MemcpyDtoHAsync, void *, dst, hipDeviceptr_t, src, size_t, sizeBytes, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyDtoDAsync"), hipError_t, MemcpyDtoDAsync, hipDeviceptr_t, dst, hipDeviceptr_t, src, size_t, sizeBytes, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyAtoHAsync"), hipError_t, MemcpyAtoHAsync, void *, dstHost, hipArray_t, srcArray, size_t, srcOffset, size_t, ByteCount, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyHtoAAsync"), hipError_t, MemcpyHtoAAsync, hipArray_t, dstArray, size_t, dstOffset, const void *, srcHost, size_t, ByteCount, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleGetGlobal"), hipError_t, ModuleGetGlobal, hipDeviceptr_t *, dptr, size_t *, bytes, hipModule_t, hmod, const char *, name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetSymbolAddress"), hipError_t, GetSymbolAddress, void **, devPtr, const void *, symbol);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetSymbolSize"), hipError_t, GetSymbolSize, size_t *, size, const void *, symbol);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetProcAddress"), hipError_t, GetProcAddress, const char *, symbol, void **, pfn, int, hipVersion, uint64_t, flags, hipDriverProcAddressQueryResult *, symbolStatus);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyToSymbol"), hipError_t, MemcpyToSymbol, const void *, symbol, const void *, src, size_t, sizeBytes, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyToSymbolAsync"), hipError_t, MemcpyToSymbolAsync, const void *, symbol, const void *, src, size_t, sizeBytes, size_t, offset, hipMemcpyKind, kind, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyFromSymbol"), hipError_t, MemcpyFromSymbol, void *, dst, const void *, symbol, size_t, sizeBytes, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyFromSymbolAsync"), hipError_t, MemcpyFromSymbolAsync, void *, dst, const void *, symbol, size_t, sizeBytes, size_t, offset, hipMemcpyKind, kind, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyAsync"), hipError_t, MemcpyAsync, void *, dst, const void *, src, size_t, sizeBytes, hipMemcpyKind, kind, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemset"), hipError_t, Memset, void *, dst, int, value, size_t, sizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemsetD8"), hipError_t, MemsetD8, hipDeviceptr_t, dest, unsigned char, value, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemsetD8Async"), hipError_t, MemsetD8Async, hipDeviceptr_t, dest, unsigned char, value, size_t, count, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemsetD16"), hipError_t, MemsetD16, hipDeviceptr_t, dest, unsigned short, value, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemsetD16Async"), hipError_t, MemsetD16Async, hipDeviceptr_t, dest, unsigned short, value, size_t, count, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemsetD32"), hipError_t, MemsetD32, hipDeviceptr_t, dest, int, value, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemsetAsync"), hipError_t, MemsetAsync, void *, dst, int, value, size_t, sizeBytes, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemsetD32Async"), hipError_t, MemsetD32Async, hipDeviceptr_t, dst, int, value, size_t, count, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemset2D"), hipError_t, Memset2D, void *, dst, size_t, pitch, int, value, size_t, width, size_t, height);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemset2DAsync"), hipError_t, Memset2DAsync, void *, dst, size_t, pitch, int, value, size_t, width, size_t, height, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemset3D"), hipError_t, Memset3D, hipPitchedPtr, pitchedDevPtr, int, value, hipExtent, extent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemset3DAsync"), hipError_t, Memset3DAsync, hipPitchedPtr, pitchedDevPtr, int, value, hipExtent, extent, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemGetInfo"), hipError_t, MemGetInfo, size_t *, free, size_t *, total);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemPtrGetInfo"), hipError_t, MemPtrGetInfo, void *, ptr, size_t *, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMallocArray"), hipError_t, MallocArray, hipArray_t *, array, const hipChannelFormatDesc *, desc, size_t, width, size_t, height, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipArrayCreate"), hipError_t, ArrayCreate, hipArray_t *, pHandle, const HIP_ARRAY_DESCRIPTOR *, pAllocateArray);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipArrayDestroy"), hipError_t, ArrayDestroy, hipArray_t, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipArray3DCreate"), hipError_t, Array3DCreate, hipArray_t *, array, const HIP_ARRAY3D_DESCRIPTOR *, pAllocateArray);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMalloc3D"), hipError_t, Malloc3D, hipPitchedPtr *, pitchedDevPtr, hipExtent, extent);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFreeArray"), hipError_t, FreeArray, hipArray_t, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMalloc3DArray"), hipError_t, Malloc3DArray, hipArray_t *, array, const struct hipChannelFormatDesc *, desc, struct hipExtent, extent, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipArrayGetInfo"), hipError_t, ArrayGetInfo, hipChannelFormatDesc *, desc, hipExtent *, extent, unsigned int *, flags, hipArray_t, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipArrayGetDescriptor"), hipError_t, ArrayGetDescriptor, HIP_ARRAY_DESCRIPTOR *, pArrayDescriptor, hipArray_t, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipArray3DGetDescriptor"), hipError_t, Array3DGetDescriptor, HIP_ARRAY3D_DESCRIPTOR *, pArrayDescriptor, hipArray_t, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy2D"), hipError_t, Memcpy2D, void *, dst, size_t, dpitch, const void *, src, size_t, spitch, size_t, width, size_t, height, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyParam2D"), hipError_t, MemcpyParam2D, const hip_Memcpy2D *, pCopy);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyParam2DAsync"), hipError_t, MemcpyParam2DAsync, const hip_Memcpy2D *, pCopy, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy2DAsync"), hipError_t, Memcpy2DAsync, void *, dst, size_t, dpitch, const void *, src, size_t, spitch, size_t, width, size_t, height, hipMemcpyKind, kind, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy2DToArray"), hipError_t, Memcpy2DToArray, hipArray_t, dst, size_t, wOffset, size_t, hOffset, const void *, src, size_t, spitch, size_t, width, size_t, height, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy2DToArrayAsync"), hipError_t, Memcpy2DToArrayAsync, hipArray_t, dst, size_t, wOffset, size_t, hOffset, const void *, src, size_t, spitch, size_t, width, size_t, height, hipMemcpyKind, kind, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy2DArrayToArray"), hipError_t, Memcpy2DArrayToArray, hipArray_t, dst, size_t, wOffsetDst, size_t, hOffsetDst, hipArray_const_t, src, size_t, wOffsetSrc, size_t, hOffsetSrc, size_t, width, size_t, height, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyToArray"), hipError_t, MemcpyToArray, hipArray_t, dst, size_t, wOffset, size_t, hOffset, const void *, src, size_t, count, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyFromArray"), hipError_t, MemcpyFromArray, void *, dst, hipArray_const_t, srcArray, size_t, wOffset, size_t, hOffset, size_t, count, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy2DFromArray"), hipError_t, Memcpy2DFromArray, void *, dst, size_t, dpitch, hipArray_const_t, src, size_t, wOffset, size_t, hOffset, size_t, width, size_t, height, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy2DFromArrayAsync"), hipError_t, Memcpy2DFromArrayAsync, void *, dst, size_t, dpitch, hipArray_const_t, src, size_t, wOffset, size_t, hOffset, size_t, width, size_t, height, hipMemcpyKind, kind, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyAtoH"), hipError_t, MemcpyAtoH, void *, dst, hipArray_t, srcArray, size_t, srcOffset, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyHtoA"), hipError_t, MemcpyHtoA, hipArray_t, dstArray, size_t, dstOffset, const void *, srcHost, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy3D"), hipError_t, Memcpy3D, const struct hipMemcpy3DParms *, p);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpy3DAsync"), hipError_t, Memcpy3DAsync, const struct hipMemcpy3DParms *, p, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvMemcpy3D"), hipError_t, DrvMemcpy3D, const HIP_MEMCPY3D *, pCopy);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvMemcpy3DAsync"), hipError_t, DrvMemcpy3DAsync, const HIP_MEMCPY3D *, pCopy, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceCanAccessPeer"), hipError_t, DeviceCanAccessPeer, int *, canAccessPeer, int, deviceId, int, peerDeviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceEnablePeerAccess"), hipError_t, DeviceEnablePeerAccess, int, peerDeviceId, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceDisablePeerAccess"), hipError_t, DeviceDisablePeerAccess, int, peerDeviceId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemGetAddressRange"), hipError_t, MemGetAddressRange, hipDeviceptr_t *, pbase, size_t *, psize, hipDeviceptr_t, dptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyPeer"), hipError_t, MemcpyPeer, void *, dst, int, dstDeviceId, const void *, src, int, srcDeviceId, size_t, sizeBytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemcpyPeerAsync"), hipError_t, MemcpyPeerAsync, void *, dst, int, dstDeviceId, const void *, src, int, srcDevice, size_t, sizeBytes, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxCreate"), hipError_t, CtxCreate, hipCtx_t *, ctx, unsigned int, flags, hipDevice_t, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxDestroy"), hipError_t, CtxDestroy, hipCtx_t, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxPopCurrent"), hipError_t, CtxPopCurrent, hipCtx_t *, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxPushCurrent"), hipError_t, CtxPushCurrent, hipCtx_t, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxSetCurrent"), hipError_t, CtxSetCurrent, hipCtx_t, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxGetCurrent"), hipError_t, CtxGetCurrent, hipCtx_t *, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxGetDevice"), hipError_t, CtxGetDevice, hipDevice_t *, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxGetApiVersion"), hipError_t, CtxGetApiVersion, hipCtx_t, ctx, int *, apiVersion);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxGetCacheConfig"), hipError_t, CtxGetCacheConfig, hipFuncCache_t *, cacheConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxSetCacheConfig"), hipError_t, CtxSetCacheConfig, hipFuncCache_t, cacheConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxSetSharedMemConfig"), hipError_t, CtxSetSharedMemConfig, hipSharedMemConfig, config);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxGetSharedMemConfig"), hipError_t, CtxGetSharedMemConfig, hipSharedMemConfig *, pConfig);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxSynchronize"), hipError_t, CtxSynchronize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxGetFlags"), hipError_t, CtxGetFlags, unsigned int *, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxEnablePeerAccess"), hipError_t, CtxEnablePeerAccess, hipCtx_t, peerCtx, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCtxDisablePeerAccess"), hipError_t, CtxDisablePeerAccess, hipCtx_t, peerCtx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDevicePrimaryCtxGetState"), hipError_t, DevicePrimaryCtxGetState, hipDevice_t, dev, unsigned int *, flags, int *, active);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDevicePrimaryCtxRelease"), hipError_t, DevicePrimaryCtxRelease, hipDevice_t, dev);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDevicePrimaryCtxRetain"), hipError_t, DevicePrimaryCtxRetain, hipCtx_t *, pctx, hipDevice_t, dev);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDevicePrimaryCtxReset"), hipError_t, DevicePrimaryCtxReset, hipDevice_t, dev);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDevicePrimaryCtxSetFlags"), hipError_t, DevicePrimaryCtxSetFlags, hipDevice_t, dev, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleLoad"), hipError_t, ModuleLoad, hipModule_t *, module, const char *, fname);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleUnload"), hipError_t, ModuleUnload, hipModule_t, module);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleGetFunction"), hipError_t, ModuleGetFunction, hipFunction_t *, function, hipModule_t, module, const char *, kname);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFuncGetAttributes"), hipError_t, FuncGetAttributes, struct hipFuncAttributes *, attr, const void *, func);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFuncGetAttribute"), hipError_t, FuncGetAttribute, int *, value, hipFunction_attribute, attrib, hipFunction_t, hfunc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetFuncBySymbol"), hipError_t, GetFuncBySymbol, hipFunction_t *, functionPtr, const void *, symbolPtr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleGetTexRef"), hipError_t, ModuleGetTexRef, textureReference **, texRef, hipModule_t, hmod, const char *, name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleLoadData"), hipError_t, ModuleLoadData, hipModule_t *, module, const void *, image);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleLoadDataEx"), hipError_t, ModuleLoadDataEx, hipModule_t *, module, const void *, image, unsigned int, numOptions, hipJitOption *, options, void **, optionValues);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleLaunchKernel"), hipError_t, ModuleLaunchKernel, hipFunction_t, f, unsigned int, gridDimX, unsigned int, gridDimY, unsigned int, gridDimZ, unsigned int, blockDimX, unsigned int, blockDimY, unsigned int, blockDimZ, unsigned int, sharedMemBytes, hipStream_t, stream, void **, kernelParams, void **, extra);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleLaunchCooperativeKernel"), hipError_t, ModuleLaunchCooperativeKernel, hipFunction_t, f, unsigned int, gridDimX, unsigned int, gridDimY, unsigned int, gridDimZ, unsigned int, blockDimX, unsigned int, blockDimY, unsigned int, blockDimZ, unsigned int, sharedMemBytes, hipStream_t, stream, void **, kernelParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleLaunchCooperativeKernelMultiDevice"), hipError_t, ModuleLaunchCooperativeKernelMultiDevice, hipFunctionLaunchParams *, launchParamsList, unsigned int, numDevices, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipLaunchCooperativeKernel"), hipError_t, LaunchCooperativeKernel, const void *, f, dim3, gridDim, dim3, blockDimX, void **, kernelParams, unsigned int, sharedMemBytes, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipLaunchCooperativeKernelMultiDevice"), hipError_t, LaunchCooperativeKernelMultiDevice, hipLaunchParams *, launchParamsList, int, numDevices, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExtLaunchMultiKernelMultiDevice"), hipError_t, ExtLaunchMultiKernelMultiDevice, hipLaunchParams *, launchParamsList, int, numDevices, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleOccupancyMaxPotentialBlockSize"), hipError_t, ModuleOccupancyMaxPotentialBlockSize, int *, gridSize, int *, blockSize, hipFunction_t, f, size_t, dynSharedMemPerBlk, int, blockSizeLimit);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleOccupancyMaxPotentialBlockSizeWithFlags"), hipError_t, ModuleOccupancyMaxPotentialBlockSizeWithFlags, int *, gridSize, int *, blockSize, hipFunction_t, f, size_t, dynSharedMemPerBlk, int, blockSizeLimit, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleOccupancyMaxActiveBlocksPerMultiprocessor"), hipError_t, ModuleOccupancyMaxActiveBlocksPerMultiprocessor, int *, numBlocks, hipFunction_t, f, int, blockSize, size_t, dynSharedMemPerBlk);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"), hipError_t, ModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, int *, numBlocks, hipFunction_t, f, int, blockSize, size_t, dynSharedMemPerBlk, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipOccupancyMaxActiveBlocksPerMultiprocessor"), hipError_t, OccupancyMaxActiveBlocksPerMultiprocessor, int *, numBlocks, const void *, f, int, blockSize, size_t, dynSharedMemPerBlk);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"), hipError_t, OccupancyMaxActiveBlocksPerMultiprocessorWithFlags, int *, numBlocks, const void *, f, int, blockSize, size_t, dynSharedMemPerBlk, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipOccupancyMaxPotentialBlockSize"), hipError_t, OccupancyMaxPotentialBlockSize, int *, gridSize, int *, blockSize, const void *, f, size_t, dynSharedMemPerBlk, int, blockSizeLimit);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipProfilerStart"), hipError_t, ProfilerStart);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipProfilerStop"), hipError_t, ProfilerStop);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipConfigureCall"), hipError_t, ConfigureCall, dim3, gridDim, dim3, blockDim, size_t, sharedMem, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipSetupArgument"), hipError_t, SetupArgument, const void *, arg, size_t, size, size_t, offset);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipLaunchByPtr"), hipError_t, LaunchByPtr, const void *, func);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipLaunchKernel"), hipError_t, LaunchKernel, const void *, function_address, dim3, numBlocks, dim3, dimBlocks, void **, args, size_t, sharedMemBytes, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipLaunchHostFunc"), hipError_t, LaunchHostFunc, hipStream_t, stream, hipHostFn_t, fn, void *, userData);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvMemcpy2DUnaligned"), hipError_t, DrvMemcpy2DUnaligned, const hip_Memcpy2D *, pCopy);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipExtLaunchKernel"), hipError_t, ExtLaunchKernel, const void *, function_address, dim3, numBlocks, dim3, dimBlocks, void **, args, size_t, sharedMemBytes, hipStream_t, stream, hipEvent_t, startEvent, hipEvent_t, stopEvent, int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("_Z24hipExtModuleLaunchKernelP18ihipModuleSymbol_tjjjjjjmP12ihipStream_tPPvS4_P11ihipEvent_tS6_j"), hipError_t, ExtModuleLaunchKernel, ihipModuleSymbol_t*, f, uint32_t, globalWorkSizeX, uint32_t, globalWorkSizeY, uint32_t, globalWorkSizeZ, uint32_t, localWorkSizeX, uint32_t, localWorkSizeY, uint32_t, localWorkSizeZ, size_t, sharedMemBytes, hipStream_t, hStream, void **, kernelParams, void **, extra, hipEvent_t, startEvent, hipEvent_t, stopEvent, uint32_t, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCreateTextureObject"), hipError_t, CreateTextureObject, hipTextureObject_t *, pTexObject, const hipResourceDesc *, pResDesc, const hipTextureDesc *, pTexDesc, const struct hipResourceViewDesc *, pResViewDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDestroyTextureObject"), hipError_t, DestroyTextureObject, hipTextureObject_t, textureObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetChannelDesc"), hipError_t, GetChannelDesc, hipChannelFormatDesc *, desc, hipArray_const_t, array);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetTextureObjectResourceDesc"), hipError_t, GetTextureObjectResourceDesc, hipResourceDesc *, pResDesc, hipTextureObject_t, textureObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetTextureObjectResourceViewDesc"), hipError_t, GetTextureObjectResourceViewDesc, struct hipResourceViewDesc *, pResViewDesc, hipTextureObject_t, textureObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetTextureObjectTextureDesc"), hipError_t, GetTextureObjectTextureDesc, hipTextureDesc *, pTexDesc, hipTextureObject_t, textureObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexObjectCreate"), hipError_t, TexObjectCreate, hipTextureObject_t *, pTexObject, const HIP_RESOURCE_DESC *, pResDesc, const HIP_TEXTURE_DESC *, pTexDesc, const HIP_RESOURCE_VIEW_DESC *, pResViewDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexObjectDestroy"), hipError_t, TexObjectDestroy, hipTextureObject_t, texObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexObjectGetResourceDesc"), hipError_t, TexObjectGetResourceDesc, HIP_RESOURCE_DESC *, pResDesc, hipTextureObject_t, texObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexObjectGetResourceViewDesc"), hipError_t, TexObjectGetResourceViewDesc, HIP_RESOURCE_VIEW_DESC *, pResViewDesc, hipTextureObject_t, texObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexObjectGetTextureDesc"), hipError_t, TexObjectGetTextureDesc, HIP_TEXTURE_DESC *, pTexDesc, hipTextureObject_t, texObject);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMallocMipmappedArray"), hipError_t, MallocMipmappedArray, hipMipmappedArray_t *, mipmappedArray, const struct hipChannelFormatDesc *, desc, struct hipExtent, extent, unsigned int, numLevels, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipFreeMipmappedArray"), hipError_t, FreeMipmappedArray, hipMipmappedArray_t, mipmappedArray);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetMipmappedArrayLevel"), hipError_t, GetMipmappedArrayLevel, hipArray_t *, levelArray, hipMipmappedArray_const_t, mipmappedArray, unsigned int, level);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMipmappedArrayCreate"), hipError_t, MipmappedArrayCreate, hipMipmappedArray_t *, pHandle, HIP_ARRAY3D_DESCRIPTOR *, pMipmappedArrayDesc, unsigned int, numMipmapLevels);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMipmappedArrayDestroy"), hipError_t, MipmappedArrayDestroy, hipMipmappedArray_t, hMipmappedArray);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMipmappedArrayGetLevel"), hipError_t, MipmappedArrayGetLevel, hipArray_t *, pLevelArray, hipMipmappedArray_t, hMipMappedArray, unsigned int, level);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipBindTextureToMipmappedArray"), hipError_t, BindTextureToMipmappedArray, const textureReference *, tex, hipMipmappedArray_const_t, mipmappedArray, const hipChannelFormatDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetTextureReference"), hipError_t, GetTextureReference, const textureReference **, texref, const void *, symbol);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetBorderColor"), hipError_t, TexRefGetBorderColor, float *, pBorderColor, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetArray"), hipError_t, TexRefGetArray, hipArray_t *, pArray, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetAddressMode"), hipError_t, TexRefSetAddressMode, textureReference *, texRef, int, dim, enum hipTextureAddressMode, am);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetArray"), hipError_t, TexRefSetArray, textureReference *, tex, hipArray_const_t, array, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetFilterMode"), hipError_t, TexRefSetFilterMode, textureReference *, texRef, enum hipTextureFilterMode, fm);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetFlags"), hipError_t, TexRefSetFlags, textureReference *, texRef, unsigned int, Flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetFormat"), hipError_t, TexRefSetFormat, textureReference *, texRef, hipArray_Format, fmt, int, NumPackedComponents);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipBindTexture"), hipError_t, BindTexture, size_t *, offset, const textureReference *, tex, const void *, devPtr, const hipChannelFormatDesc *, desc, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipBindTexture2D"), hipError_t, BindTexture2D, size_t *, offset, const textureReference *, tex, const void *, devPtr, const hipChannelFormatDesc *, desc, size_t, width, size_t, height, size_t, pitch);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipBindTextureToArray"), hipError_t, BindTextureToArray, const textureReference *, tex, hipArray_const_t, array, const hipChannelFormatDesc *, desc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetTextureAlignmentOffset"), hipError_t, GetTextureAlignmentOffset, size_t *, offset, const textureReference *, texref);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipUnbindTexture"), hipError_t, UnbindTexture, const textureReference *, tex);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetAddress"), hipError_t, TexRefGetAddress, hipDeviceptr_t *, dev_ptr, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetAddressMode"), hipError_t, TexRefGetAddressMode, enum hipTextureAddressMode *, pam, const textureReference *, texRef, int, dim);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetFilterMode"), hipError_t, TexRefGetFilterMode, enum hipTextureFilterMode *, pfm, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetFlags"), hipError_t, TexRefGetFlags, unsigned int *, pFlags, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetFormat"), hipError_t, TexRefGetFormat, hipArray_Format *, pFormat, int *, pNumChannels, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetMaxAnisotropy"), hipError_t, TexRefGetMaxAnisotropy, int *, pmaxAnsio, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetMipmapFilterMode"), hipError_t, TexRefGetMipmapFilterMode, enum hipTextureFilterMode *, pfm, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetMipmapLevelBias"), hipError_t, TexRefGetMipmapLevelBias, float *, pbias, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetMipmapLevelClamp"), hipError_t, TexRefGetMipmapLevelClamp, float *, pminMipmapLevelClamp, float *, pmaxMipmapLevelClamp, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefGetMipMappedArray"), hipError_t, TexRefGetMipMappedArray, hipMipmappedArray_t *, pArray, const textureReference *, texRef);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetAddress"), hipError_t, TexRefSetAddress, size_t *, ByteOffset, textureReference *, texRef, hipDeviceptr_t, dptr, size_t, bytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetAddress2D"), hipError_t, TexRefSetAddress2D, textureReference *, texRef, const HIP_ARRAY_DESCRIPTOR *, desc, hipDeviceptr_t, dptr, size_t, Pitch);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetMaxAnisotropy"), hipError_t, TexRefSetMaxAnisotropy, textureReference *, texRef, unsigned int, maxAniso);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetBorderColor"), hipError_t, TexRefSetBorderColor, textureReference *, texRef, float *, pBorderColor);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetMipmapFilterMode"), hipError_t, TexRefSetMipmapFilterMode, textureReference *, texRef, enum hipTextureFilterMode, fm);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetMipmapLevelBias"), hipError_t, TexRefSetMipmapLevelBias, textureReference *, texRef, float, bias);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetMipmapLevelClamp"), hipError_t, TexRefSetMipmapLevelClamp, textureReference *, texRef, float, minMipMapLevelClamp, float, maxMipMapLevelClamp);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipTexRefSetMipmappedArray"), hipError_t, TexRefSetMipmappedArray, textureReference *, texRef, struct hipMipmappedArray *, mipmappedArray, unsigned int, Flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipApiName"), const char *, ApiName, uint32_t, id);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipKernelNameRef"), const char *, KernelNameRef, const hipFunction_t, f);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipKernelNameRefByPtr"), const char *, KernelNameRefByPtr, const void *, hostFunction, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGetStreamDeviceId"), int, GetStreamDeviceId, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamBeginCapture"), hipError_t, StreamBeginCapture, hipStream_t, stream, hipStreamCaptureMode, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamBeginCaptureToGraph"), hipError_t, StreamBeginCaptureToGraph, hipStream_t, stream, hipGraph_t, graph, const hipGraphNode_t *, dependencies, const hipGraphEdgeData *, dependencyData, size_t, numDependencies, hipStreamCaptureMode, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamEndCapture"), hipError_t, StreamEndCapture, hipStream_t, stream, hipGraph_t *, pGraph);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamGetCaptureInfo"), hipError_t, StreamGetCaptureInfo, hipStream_t, stream, hipStreamCaptureStatus *, pCaptureStatus, unsigned long long *, pId);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamGetCaptureInfo_v2"), hipError_t, StreamGetCaptureInfo_v2, hipStream_t, stream, hipStreamCaptureStatus *, captureStatus_out, unsigned long long *, id_out, hipGraph_t *, graph_out, const hipGraphNode_t **, dependencies_out, size_t *, numDependencies_out);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamIsCapturing"), hipError_t, StreamIsCapturing, hipStream_t, stream, hipStreamCaptureStatus *, pCaptureStatus);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipStreamUpdateCaptureDependencies"), hipError_t, StreamUpdateCaptureDependencies, hipStream_t, stream, hipGraphNode_t *, dependencies, size_t, numDependencies, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipThreadExchangeStreamCaptureMode"), hipError_t, ThreadExchangeStreamCaptureMode, hipStreamCaptureMode *, mode);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphCreate"), hipError_t, GraphCreate, hipGraph_t *, pGraph, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphDestroy"), hipError_t, GraphDestroy, hipGraph_t, graph);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddDependencies"), hipError_t, GraphAddDependencies, hipGraph_t, graph, const hipGraphNode_t *, from, const hipGraphNode_t *, to, size_t, numDependencies);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphRemoveDependencies"), hipError_t, GraphRemoveDependencies, hipGraph_t, graph, const hipGraphNode_t *, from, const hipGraphNode_t *, to, size_t, numDependencies);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphGetEdges"), hipError_t, GraphGetEdges, hipGraph_t, graph, hipGraphNode_t *, from, hipGraphNode_t *, to, size_t *, numEdges);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphGetNodes"), hipError_t, GraphGetNodes, hipGraph_t, graph, hipGraphNode_t *, nodes, size_t *, numNodes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphGetRootNodes"), hipError_t, GraphGetRootNodes, hipGraph_t, graph, hipGraphNode_t *, pRootNodes, size_t *, pNumRootNodes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphNodeGetDependencies"), hipError_t, GraphNodeGetDependencies, hipGraphNode_t, node, hipGraphNode_t *, pDependencies, size_t *, pNumDependencies);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphNodeGetDependentNodes"), hipError_t, GraphNodeGetDependentNodes, hipGraphNode_t, node, hipGraphNode_t *, pDependentNodes, size_t *, pNumDependentNodes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphNodeGetType"), hipError_t, GraphNodeGetType, hipGraphNode_t, node, hipGraphNodeType *, pType);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphDestroyNode"), hipError_t, GraphDestroyNode, hipGraphNode_t, node);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphClone"), hipError_t, GraphClone, hipGraph_t *, pGraphClone, hipGraph_t, originalGraph);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphNodeFindInClone"), hipError_t, GraphNodeFindInClone, hipGraphNode_t *, pNode, hipGraphNode_t, originalNode, hipGraph_t, clonedGraph);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphInstantiate"), hipError_t, GraphInstantiate, hipGraphExec_t *, pGraphExec, hipGraph_t, graph, hipGraphNode_t *, pErrorNode, char *, pLogBuffer, size_t, bufferSize);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphInstantiateWithFlags"), hipError_t, GraphInstantiateWithFlags, hipGraphExec_t *, pGraphExec, hipGraph_t, graph, unsigned long long, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphInstantiateWithParams"), hipError_t, GraphInstantiateWithParams, hipGraphExec_t *, pGraphExec, hipGraph_t, graph, hipGraphInstantiateParams *, instantiateParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphLaunch"), hipError_t, GraphLaunch, hipGraphExec_t, graphExec, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphUpload"), hipError_t, GraphUpload, hipGraphExec_t, graphExec, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddNode"), hipError_t, GraphAddNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, hipGraphNodeParams *, nodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecDestroy"), hipError_t, GraphExecDestroy, hipGraphExec_t, graphExec);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecUpdate"), hipError_t, GraphExecUpdate, hipGraphExec_t, hGraphExec, hipGraph_t, hGraph, hipGraphNode_t *, hErrorNode_out, hipGraphExecUpdateResult *, updateResult_out);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddKernelNode"), hipError_t, GraphAddKernelNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, const hipKernelNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphKernelNodeGetParams"), hipError_t, GraphKernelNodeGetParams, hipGraphNode_t, node, hipKernelNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphKernelNodeSetParams"), hipError_t, GraphKernelNodeSetParams, hipGraphNode_t, node, const hipKernelNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecKernelNodeSetParams"), hipError_t, GraphExecKernelNodeSetParams, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, const hipKernelNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvGraphAddMemcpyNode"), hipError_t, DrvGraphAddMemcpyNode, hipGraphNode_t *, phGraphNode, hipGraph_t, hGraph, const hipGraphNode_t *, dependencies, size_t, numDependencies, const HIP_MEMCPY3D *, copyParams, hipCtx_t, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddMemcpyNode"), hipError_t, GraphAddMemcpyNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, const hipMemcpy3DParms *, pCopyParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemcpyNodeGetParams"), hipError_t, GraphMemcpyNodeGetParams, hipGraphNode_t, node, hipMemcpy3DParms *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemcpyNodeSetParams"), hipError_t, GraphMemcpyNodeSetParams, hipGraphNode_t, node, const hipMemcpy3DParms *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphKernelNodeSetAttribute"), hipError_t, GraphKernelNodeSetAttribute, hipGraphNode_t, hNode, hipLaunchAttributeID, attr, const hipLaunchAttributeValue *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphKernelNodeGetAttribute"), hipError_t, GraphKernelNodeGetAttribute, hipGraphNode_t, hNode, hipLaunchAttributeID, attr, hipLaunchAttributeValue *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecMemcpyNodeSetParams"), hipError_t, GraphExecMemcpyNodeSetParams, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, hipMemcpy3DParms *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddMemcpyNode1D"), hipError_t, GraphAddMemcpyNode1D, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, void *, dst, const void *, src, size_t, count, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemcpyNodeSetParams1D"), hipError_t, GraphMemcpyNodeSetParams1D, hipGraphNode_t, node, void *, dst, const void *, src, size_t, count, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecMemcpyNodeSetParams1D"), hipError_t, GraphExecMemcpyNodeSetParams1D, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, void *, dst, const void *, src, size_t, count, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddMemcpyNodeFromSymbol"), hipError_t, GraphAddMemcpyNodeFromSymbol, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, void *, dst, const void *, symbol, size_t, count, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemcpyNodeSetParamsFromSymbol"), hipError_t, GraphMemcpyNodeSetParamsFromSymbol, hipGraphNode_t, node, void *, dst, const void *, symbol, size_t, count, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecMemcpyNodeSetParamsFromSymbol"), hipError_t, GraphExecMemcpyNodeSetParamsFromSymbol, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, void *, dst, const void *, symbol, size_t, count, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddMemcpyNodeToSymbol"), hipError_t, GraphAddMemcpyNodeToSymbol, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, const void *, symbol, const void *, src, size_t, count, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemcpyNodeSetParamsToSymbol"), hipError_t, GraphMemcpyNodeSetParamsToSymbol, hipGraphNode_t, node, const void *, symbol, const void *, src, size_t, count, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecMemcpyNodeSetParamsToSymbol"), hipError_t, GraphExecMemcpyNodeSetParamsToSymbol, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, const void *, symbol, const void *, src, size_t, count, size_t, offset, hipMemcpyKind, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddMemsetNode"), hipError_t, GraphAddMemsetNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, const hipMemsetParams *, pMemsetParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemsetNodeGetParams"), hipError_t, GraphMemsetNodeGetParams, hipGraphNode_t, node, hipMemsetParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemsetNodeSetParams"), hipError_t, GraphMemsetNodeSetParams, hipGraphNode_t, node, const hipMemsetParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecMemsetNodeSetParams"), hipError_t, GraphExecMemsetNodeSetParams, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, const hipMemsetParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddHostNode"), hipError_t, GraphAddHostNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, const hipHostNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphHostNodeGetParams"), hipError_t, GraphHostNodeGetParams, hipGraphNode_t, node, hipHostNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphHostNodeSetParams"), hipError_t, GraphHostNodeSetParams, hipGraphNode_t, node, const hipHostNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecHostNodeSetParams"), hipError_t, GraphExecHostNodeSetParams, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, const hipHostNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddChildGraphNode"), hipError_t, GraphAddChildGraphNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, hipGraph_t, childGraph);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphChildGraphNodeGetGraph"), hipError_t, GraphChildGraphNodeGetGraph, hipGraphNode_t, node, hipGraph_t *, pGraph);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecChildGraphNodeSetParams"), hipError_t, GraphExecChildGraphNodeSetParams, hipGraphExec_t, hGraphExec, hipGraphNode_t, node, hipGraph_t, childGraph);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddEmptyNode"), hipError_t, GraphAddEmptyNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddEventRecordNode"), hipError_t, GraphAddEventRecordNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphEventRecordNodeGetEvent"), hipError_t, GraphEventRecordNodeGetEvent, hipGraphNode_t, node, hipEvent_t *, event_out);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphEventRecordNodeSetEvent"), hipError_t, GraphEventRecordNodeSetEvent, hipGraphNode_t, node, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecEventRecordNodeSetEvent"), hipError_t, GraphExecEventRecordNodeSetEvent, hipGraphExec_t, hGraphExec, hipGraphNode_t, hNode, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddEventWaitNode"), hipError_t, GraphAddEventWaitNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphEventWaitNodeGetEvent"), hipError_t, GraphEventWaitNodeGetEvent, hipGraphNode_t, node, hipEvent_t *, event_out);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphEventWaitNodeSetEvent"), hipError_t, GraphEventWaitNodeSetEvent, hipGraphNode_t, node, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphExecEventWaitNodeSetEvent"), hipError_t, GraphExecEventWaitNodeSetEvent, hipGraphExec_t, hGraphExec, hipGraphNode_t, hNode, hipEvent_t, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddMemAllocNode"), hipError_t, GraphAddMemAllocNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, hipMemAllocNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemAllocNodeGetParams"), hipError_t, GraphMemAllocNodeGetParams, hipGraphNode_t, node, hipMemAllocNodeParams *, pNodeParams);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphAddMemFreeNode"), hipError_t, GraphAddMemFreeNode, hipGraphNode_t *, pGraphNode, hipGraph_t, graph, const hipGraphNode_t *, pDependencies, size_t, numDependencies, void *, dev_ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphMemFreeNodeGetParams"), hipError_t, GraphMemFreeNodeGetParams, hipGraphNode_t, node, void *, dev_ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGetGraphMemAttribute"), hipError_t, DeviceGetGraphMemAttribute, int, device, hipGraphMemAttributeType, attr, void *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceSetGraphMemAttribute"), hipError_t, DeviceSetGraphMemAttribute, int, device, hipGraphMemAttributeType, attr, void *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDeviceGraphMemTrim"), hipError_t, DeviceGraphMemTrim, int, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipUserObjectCreate"), hipError_t, UserObjectCreate, hipUserObject_t *, object_out, void *, ptr, hipHostFn_t, destroy, unsigned int, initialRefcount, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipUserObjectRelease"), hipError_t, UserObjectRelease, hipUserObject_t, object, unsigned int, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipUserObjectRetain"), hipError_t, UserObjectRetain, hipUserObject_t, object, unsigned int, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphRetainUserObject"), hipError_t, GraphRetainUserObject, hipGraph_t, graph, hipUserObject_t, object, unsigned int, count, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphReleaseUserObject"), hipError_t, GraphReleaseUserObject, hipGraph_t, graph, hipUserObject_t, object, unsigned int, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphDebugDotPrint"), hipError_t, GraphDebugDotPrint, hipGraph_t, graph, const char *, path, unsigned int, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphKernelNodeCopyAttributes"), hipError_t, GraphKernelNodeCopyAttributes, hipGraphNode_t, hSrc, hipGraphNode_t, hDst);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphNodeSetEnabled"), hipError_t, GraphNodeSetEnabled, hipGraphExec_t, hGraphExec, hipGraphNode_t, hNode, unsigned int, isEnabled);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphNodeGetEnabled"), hipError_t, GraphNodeGetEnabled, hipGraphExec_t, hGraphExec, hipGraphNode_t, hNode, unsigned int *, isEnabled);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDrvGraphAddMemsetNode"), hipError_t, DrvGraphAddMemsetNode, hipGraphNode_t *, phGraphNode, hipGraph_t, hGraph, const hipGraphNode_t *, dependencies, size_t, numDependencies, const HIP_MEMSET_NODE_PARAMS *, memsetParams, hipCtx_t, ctx);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemAddressFree"), hipError_t, MemAddressFree, void *, devPtr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemAddressReserve"), hipError_t, MemAddressReserve, void **, ptr, size_t, size, size_t, alignment, void *, addr, unsigned long long, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemCreate"), hipError_t, MemCreate, hipMemGenericAllocationHandle_t *, handle, size_t, size, const hipMemAllocationProp *, prop, unsigned long long, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemExportToShareableHandle"), hipError_t, MemExportToShareableHandle, void *, shareableHandle, hipMemGenericAllocationHandle_t, handle, hipMemAllocationHandleType, handleType, unsigned long long, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemGetAccess"), hipError_t, MemGetAccess, unsigned long long *, flags, const hipMemLocation *, location, void *, ptr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemGetAllocationGranularity"), hipError_t, MemGetAllocationGranularity, size_t *, granularity, const hipMemAllocationProp *, prop, hipMemAllocationGranularity_flags, option);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemGetAllocationPropertiesFromHandle"), hipError_t, MemGetAllocationPropertiesFromHandle, hipMemAllocationProp *, prop, hipMemGenericAllocationHandle_t, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemImportFromShareableHandle"), hipError_t, MemImportFromShareableHandle, hipMemGenericAllocationHandle_t *, handle, void *, osHandle, hipMemAllocationHandleType, shHandleType);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemMap"), hipError_t, MemMap, void *, ptr, size_t, size, size_t, offset, hipMemGenericAllocationHandle_t, handle, unsigned long long, flags);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemMapArrayAsync"), hipError_t, MemMapArrayAsync, hipArrayMapInfo *, mapInfoList, unsigned int, count, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemRelease"), hipError_t, MemRelease, hipMemGenericAllocationHandle_t, handle);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemRetainAllocationHandle"), hipError_t, MemRetainAllocationHandle, hipMemGenericAllocationHandle_t *, handle, void *, addr);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemSetAccess"), hipError_t, MemSetAccess, void *, ptr, size_t, size, const hipMemAccessDesc *, desc, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipMemUnmap"), hipError_t, MemUnmap, void *, ptr, size_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphicsMapResources"), hipError_t, GraphicsMapResources, int, count, hipGraphicsResource_t *, resources, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphicsSubResourceGetMappedArray"), hipError_t, GraphicsSubResourceGetMappedArray, hipArray_t *, array, hipGraphicsResource_t, resource, unsigned int, arrayIndex, unsigned int, mipLevel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphicsResourceGetMappedPointer"), hipError_t, GraphicsResourceGetMappedPointer, void **, devPtr, size_t *, size, hipGraphicsResource_t, resource);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphicsUnmapResources"), hipError_t, GraphicsUnmapResources, int, count, hipGraphicsResource_t *, resources, hipStream_t, stream);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipGraphicsUnregisterResource"), hipError_t, GraphicsUnregisterResource, hipGraphicsResource_t, resource);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipCreateSurfaceObject"), hipError_t, CreateSurfaceObject, hipSurfaceObject_t *, pSurfObject, const hipResourceDesc *, pResDesc);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("hipDestroySurfaceObject"), hipError_t, DestroySurfaceObject, hipSurfaceObject_t, surfaceObject);

};

/// This file is auto-generated by command "python3 tools/autogen/gen.py --source platforms/hip/hal/include/xsched/hip/hal/amd_comgr.h --lib /opt/rocm/lib/libamd_comgr.so --platform hip --prefix amd_comgr_ -I /usr/lib/gcc/x86_64-linux-gnu/13/include"
typedef void (*amd_comgr_create_symbolizer_info_arg1_t)(const char *, void *);
typedef const char * amd_comgr_action_info_set_option_list_arg1_t[];
typedef const char * amd_comgr_action_info_set_bundle_entry_ids_arg1_t[];
typedef amd_comgr_status_t (*amd_comgr_iterate_map_metadata_arg1_t)(amd_comgr_metadata_node_t, amd_comgr_metadata_node_t, void *);
typedef amd_comgr_status_t (*amd_comgr_iterate_symbols_arg1_t)(amd_comgr_symbol_t, void *);
typedef uint64_t (*amd_comgr_create_disassembly_info_arg1_t)(uint64_t, char *, uint64_t, void *);
typedef void (*amd_comgr_create_disassembly_info_arg2_t)(const char *, void *);
typedef void (*amd_comgr_create_disassembly_info_arg3_t)(uint64_t, void *);

class CodeObjectManager
{
private:
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, "XSCHED_HIP_COMGR_LIB",
                           std::vector<std::string>({"libamd_comgr.so"}), // search name
                           std::vector<std::string>({"/opt/rocm/lib"})); // search path

public:
    STATIC_CLASS(CodeObjectManager);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_status_string"), amd_comgr_status_t, status_string, amd_comgr_status_t, status, const char **, status_string);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_version"), void, get_version, size_t *, major, size_t *, minor);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_isa_count"), amd_comgr_status_t, get_isa_count, size_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_isa_name"), amd_comgr_status_t, get_isa_name, size_t, index, const char **, isa_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_isa_metadata"), amd_comgr_status_t, get_isa_metadata, const char *, isa_name, amd_comgr_metadata_node_t *, metadata);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_create_data"), amd_comgr_status_t, create_data, amd_comgr_data_kind_t, kind, amd_comgr_data_t *, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_release_data"), amd_comgr_status_t, release_data, amd_comgr_data_t, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_data_kind"), amd_comgr_status_t, get_data_kind, amd_comgr_data_t, data, amd_comgr_data_kind_t *, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_set_data"), amd_comgr_status_t, set_data, amd_comgr_data_t, data, size_t, size, const char *, bytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_set_data_from_file_slice"), amd_comgr_status_t, set_data_from_file_slice, amd_comgr_data_t, data, int, file_descriptor, uint64_t, offset, uint64_t, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_set_data_name"), amd_comgr_status_t, set_data_name, amd_comgr_data_t, data, const char *, name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_data"), amd_comgr_status_t, get_data, amd_comgr_data_t, data, size_t *, size, char *, bytes);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_data_name"), amd_comgr_status_t, get_data_name, amd_comgr_data_t, data, size_t *, size, char *, name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_data_isa_name"), amd_comgr_status_t, get_data_isa_name, amd_comgr_data_t, data, size_t *, size, char *, isa_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_create_symbolizer_info"), amd_comgr_status_t, create_symbolizer_info, amd_comgr_data_t, code_object, amd_comgr_create_symbolizer_info_arg1_t, print_symbol_callback, amd_comgr_symbolizer_info_t *, symbolizer_info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_destroy_symbolizer_info"), amd_comgr_status_t, destroy_symbolizer_info, amd_comgr_symbolizer_info_t, symbolizer_info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_symbolize"), amd_comgr_status_t, symbolize, amd_comgr_symbolizer_info_t, symbolizer_info, uint64_t, address, bool, is_code, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_data_metadata"), amd_comgr_status_t, get_data_metadata, amd_comgr_data_t, data, amd_comgr_metadata_node_t *, metadata);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_destroy_metadata"), amd_comgr_status_t, destroy_metadata, amd_comgr_metadata_node_t, metadata);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_create_data_set"), amd_comgr_status_t, create_data_set, amd_comgr_data_set_t *, data_set);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_destroy_data_set"), amd_comgr_status_t, destroy_data_set, amd_comgr_data_set_t, data_set);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_data_set_add"), amd_comgr_status_t, data_set_add, amd_comgr_data_set_t, data_set, amd_comgr_data_t, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_data_set_remove"), amd_comgr_status_t, data_set_remove, amd_comgr_data_set_t, data_set, amd_comgr_data_kind_t, data_kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_data_count"), amd_comgr_status_t, action_data_count, amd_comgr_data_set_t, data_set, amd_comgr_data_kind_t, data_kind, size_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_data_get_data"), amd_comgr_status_t, action_data_get_data, amd_comgr_data_set_t, data_set, amd_comgr_data_kind_t, data_kind, size_t, index, amd_comgr_data_t *, data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_create_action_info"), amd_comgr_status_t, create_action_info, amd_comgr_action_info_t *, action_info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_destroy_action_info"), amd_comgr_status_t, destroy_action_info, amd_comgr_action_info_t, action_info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_set_isa_name"), amd_comgr_status_t, action_info_set_isa_name, amd_comgr_action_info_t, action_info, const char *, isa_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_isa_name"), amd_comgr_status_t, action_info_get_isa_name, amd_comgr_action_info_t, action_info, size_t *, size, char *, isa_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_set_language"), amd_comgr_status_t, action_info_set_language, amd_comgr_action_info_t, action_info, amd_comgr_language_t, language);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_language"), amd_comgr_status_t, action_info_get_language, amd_comgr_action_info_t, action_info, amd_comgr_language_t *, language);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_set_options"), amd_comgr_status_t, action_info_set_options, amd_comgr_action_info_t, action_info, const char *, options);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_options"), amd_comgr_status_t, action_info_get_options, amd_comgr_action_info_t, action_info, size_t *, size, char *, options);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_set_option_list"), amd_comgr_status_t, action_info_set_option_list, amd_comgr_action_info_t, action_info, amd_comgr_action_info_set_option_list_arg1_t, options, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_option_list_count"), amd_comgr_status_t, action_info_get_option_list_count, amd_comgr_action_info_t, action_info, size_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_option_list_item"), amd_comgr_status_t, action_info_get_option_list_item, amd_comgr_action_info_t, action_info, size_t, index, size_t *, size, char *, option);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_set_bundle_entry_ids"), amd_comgr_status_t, action_info_set_bundle_entry_ids, amd_comgr_action_info_t, action_info, amd_comgr_action_info_set_bundle_entry_ids_arg1_t, bundle_entry_ids, size_t, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_bundle_entry_id_count"), amd_comgr_status_t, action_info_get_bundle_entry_id_count, amd_comgr_action_info_t, action_info, size_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_bundle_entry_id"), amd_comgr_status_t, action_info_get_bundle_entry_id, amd_comgr_action_info_t, action_info, size_t, index, size_t *, size, char *, bundle_entry_id);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_set_working_directory_path"), amd_comgr_status_t, action_info_set_working_directory_path, amd_comgr_action_info_t, action_info, const char *, path);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_working_directory_path"), amd_comgr_status_t, action_info_get_working_directory_path, amd_comgr_action_info_t, action_info, size_t *, size, char *, path);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_set_logging"), amd_comgr_status_t, action_info_set_logging, amd_comgr_action_info_t, action_info, bool, logging);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_action_info_get_logging"), amd_comgr_status_t, action_info_get_logging, amd_comgr_action_info_t, action_info, bool *, logging);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_do_action"), amd_comgr_status_t, do_action, amd_comgr_action_kind_t, kind, amd_comgr_action_info_t, info, amd_comgr_data_set_t, input, amd_comgr_data_set_t, result);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_metadata_kind"), amd_comgr_status_t, get_metadata_kind, amd_comgr_metadata_node_t, metadata, amd_comgr_metadata_kind_t *, kind);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_metadata_string"), amd_comgr_status_t, get_metadata_string, amd_comgr_metadata_node_t, metadata, size_t *, size, char *, string);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_metadata_map_size"), amd_comgr_status_t, get_metadata_map_size, amd_comgr_metadata_node_t, metadata, size_t *, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_iterate_map_metadata"), amd_comgr_status_t, iterate_map_metadata, amd_comgr_metadata_node_t, metadata, amd_comgr_iterate_map_metadata_arg1_t, callback, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_metadata_lookup"), amd_comgr_status_t, metadata_lookup, amd_comgr_metadata_node_t, metadata, const char *, key, amd_comgr_metadata_node_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_metadata_list_size"), amd_comgr_status_t, get_metadata_list_size, amd_comgr_metadata_node_t, metadata, size_t *, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_index_list_metadata"), amd_comgr_status_t, index_list_metadata, amd_comgr_metadata_node_t, metadata, size_t, index, amd_comgr_metadata_node_t *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_iterate_symbols"), amd_comgr_status_t, iterate_symbols, amd_comgr_data_t, data, amd_comgr_iterate_symbols_arg1_t, callback, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_symbol_lookup"), amd_comgr_status_t, symbol_lookup, amd_comgr_data_t, data, const char *, name, amd_comgr_symbol_t *, symbol);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_symbol_get_info"), amd_comgr_status_t, symbol_get_info, amd_comgr_symbol_t, symbol, amd_comgr_symbol_info_t, attribute, void *, value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_create_disassembly_info"), amd_comgr_status_t, create_disassembly_info, const char *, isa_name, amd_comgr_create_disassembly_info_arg1_t, read_memory_callback, amd_comgr_create_disassembly_info_arg2_t, print_instruction_callback, amd_comgr_create_disassembly_info_arg3_t, print_address_annotation_callback, amd_comgr_disassembly_info_t *, disassembly_info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_destroy_disassembly_info"), amd_comgr_status_t, destroy_disassembly_info, amd_comgr_disassembly_info_t, disassembly_info);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_disassemble_instruction"), amd_comgr_status_t, disassemble_instruction, amd_comgr_disassembly_info_t, disassembly_info, uint64_t, address, void *, user_data, uint64_t *, size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_demangle_symbol_name"), amd_comgr_status_t, demangle_symbol_name, amd_comgr_data_t, mangled_symbol_name, amd_comgr_data_t *, demangled_symbol_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_populate_mangled_names"), amd_comgr_status_t, populate_mangled_names, amd_comgr_data_t, data, size_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_get_mangled_name"), amd_comgr_status_t, get_mangled_name, amd_comgr_data_t, data, size_t, index, size_t *, size, char *, mangled_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_populate_name_expression_map"), amd_comgr_status_t, populate_name_expression_map, amd_comgr_data_t, data, size_t *, count);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_map_name_expression_to_symbol_name"), amd_comgr_status_t, map_name_expression_to_symbol_name, amd_comgr_data_t, data, size_t *, size, char *, name_expression, char *, symbol_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_lookup_code_object"), amd_comgr_status_t, lookup_code_object, amd_comgr_data_t, data, amd_comgr_code_object_info_t *, info_list, size_t, info_list_size);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("amd_comgr_map_elf_virtual_address_to_code_object_offset"), amd_comgr_status_t, map_elf_virtual_address_to_code_object_offset, amd_comgr_data_t, data, uint64_t, elf_virtual_address, uint64_t *, code_object_offset, uint64_t *, slice_size, bool *, nobits);

};

} // namespace xsched::hip
