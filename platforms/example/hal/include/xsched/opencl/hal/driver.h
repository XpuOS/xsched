/// This file is auto-generated by command "python3 tools/autogen/gen.py --source platforms/example/hal/include/xsched/opencl/hal/cl.h --lib /usr/lib/x86_64-linux-gnu/libOpenCL.so --platform opencl --prefix cl --driver platforms/example/hal/include/xsched/opencl/hal/driver.h --intercept platforms/example/shim/src/intercept.cpp"
#pragma once

#include "xsched/protocol/def.h"
#include "xsched/utils/common.h"
#include "xsched/utils/symbol.h"
#include "xsched/utils/function.h"
#include "xsched/opencl/hal/cl.h"

namespace xsched::opencl
{

typedef void (*clCreateContext_arg3_t)(const char *, const void *, size_t, void *);
typedef void (*clCreateContextFromType_arg2_t)(const char *, const void *, size_t, void *);
typedef void (*clSetContextDestructorCallback_arg1_t)(cl_context, void *);
typedef void (*clSetMemObjectDestructorCallback_arg1_t)(cl_mem, void *);
typedef void (*clBuildProgram_arg4_t)(cl_program, void *);
typedef void (*clCompileProgram_arg7_t)(cl_program, void *);
typedef void (*clLinkProgram_arg6_t)(cl_program, void *);
typedef void (*clSetProgramReleaseCallback_arg1_t)(cl_program, void *);
typedef void (*clSetEventCallback_arg2_t)(cl_event, cl_int, void *);
typedef void (*clEnqueueNativeKernel_arg1_t)(void *);
typedef void * clEnqueueSVMFree_arg2_t[];
typedef void (*clEnqueueSVMFree_arg3_t)(cl_command_queue, cl_uint, void *[], void *);

class Driver
{
private:
    /// FIXME
    DEFINE_GET_SYMBOL_FUNC(GetSymbol, "XSCHED_OPENCL_LIB",
                           std::vector<std::string>({"libOpenCL.so"}), // search name
                           std::vector<std::string>({})); // search path

public:
    STATIC_CLASS(Driver);

    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetPlatformIDs"), cl_int, GetPlatformIDs, cl_uint, num_entries, cl_platform_id *, platforms, cl_uint *, num_platforms);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetPlatformInfo"), cl_int, GetPlatformInfo, cl_platform_id, platform, cl_platform_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetDeviceIDs"), cl_int, GetDeviceIDs, cl_platform_id, platform, cl_device_type, device_type, cl_uint, num_entries, cl_device_id *, devices, cl_uint *, num_devices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetDeviceInfo"), cl_int, GetDeviceInfo, cl_device_id, device, cl_device_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateSubDevices"), cl_int, CreateSubDevices, cl_device_id, in_device, const cl_device_partition_property *, properties, cl_uint, num_devices, cl_device_id *, out_devices, cl_uint *, num_devices_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainDevice"), cl_int, RetainDevice, cl_device_id, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseDevice"), cl_int, ReleaseDevice, cl_device_id, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetDefaultDeviceCommandQueue"), cl_int, SetDefaultDeviceCommandQueue, cl_context, context, cl_device_id, device, cl_command_queue, command_queue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetDeviceAndHostTimer"), cl_int, GetDeviceAndHostTimer, cl_device_id, device, cl_ulong *, device_timestamp, cl_ulong *, host_timestamp);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetHostTimer"), cl_int, GetHostTimer, cl_device_id, device, cl_ulong *, host_timestamp);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateContext"), cl_context, CreateContext, const cl_context_properties *, properties, cl_uint, num_devices, const cl_device_id *, devices, clCreateContext_arg3_t, pfn_notify, void *, user_data, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateContextFromType"), cl_context, CreateContextFromType, const cl_context_properties *, properties, cl_device_type, device_type, clCreateContextFromType_arg2_t, pfn_notify, void *, user_data, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainContext"), cl_int, RetainContext, cl_context, context);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseContext"), cl_int, ReleaseContext, cl_context, context);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetContextInfo"), cl_int, GetContextInfo, cl_context, context, cl_context_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetContextDestructorCallback"), cl_int, SetContextDestructorCallback, cl_context, context, clSetContextDestructorCallback_arg1_t, pfn_notify, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateCommandQueueWithProperties"), cl_command_queue, CreateCommandQueueWithProperties, cl_context, context, cl_device_id, device, const cl_queue_properties *, properties, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainCommandQueue"), cl_int, RetainCommandQueue, cl_command_queue, command_queue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseCommandQueue"), cl_int, ReleaseCommandQueue, cl_command_queue, command_queue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetCommandQueueInfo"), cl_int, GetCommandQueueInfo, cl_command_queue, command_queue, cl_command_queue_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateBuffer"), cl_mem, CreateBuffer, cl_context, context, cl_mem_flags, flags, size_t, size, void *, host_ptr, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateSubBuffer"), cl_mem, CreateSubBuffer, cl_mem, buffer, cl_mem_flags, flags, cl_buffer_create_type, buffer_create_type, const void *, buffer_create_info, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateImage"), cl_mem, CreateImage, cl_context, context, cl_mem_flags, flags, const cl_image_format *, image_format, const cl_image_desc *, image_desc, void *, host_ptr, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreatePipe"), cl_mem, CreatePipe, cl_context, context, cl_mem_flags, flags, cl_uint, pipe_packet_size, cl_uint, pipe_max_packets, const cl_pipe_properties *, properties, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateBufferWithProperties"), cl_mem, CreateBufferWithProperties, cl_context, context, const cl_mem_properties *, properties, cl_mem_flags, flags, size_t, size, void *, host_ptr, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateImageWithProperties"), cl_mem, CreateImageWithProperties, cl_context, context, const cl_mem_properties *, properties, cl_mem_flags, flags, const cl_image_format *, image_format, const cl_image_desc *, image_desc, void *, host_ptr, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainMemObject"), cl_int, RetainMemObject, cl_mem, memobj);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseMemObject"), cl_int, ReleaseMemObject, cl_mem, memobj);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetSupportedImageFormats"), cl_int, GetSupportedImageFormats, cl_context, context, cl_mem_flags, flags, cl_mem_object_type, image_type, cl_uint, num_entries, cl_image_format *, image_formats, cl_uint *, num_image_formats);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetMemObjectInfo"), cl_int, GetMemObjectInfo, cl_mem, memobj, cl_mem_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetImageInfo"), cl_int, GetImageInfo, cl_mem, image, cl_image_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetPipeInfo"), cl_int, GetPipeInfo, cl_mem, pipe, cl_pipe_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetMemObjectDestructorCallback"), cl_int, SetMemObjectDestructorCallback, cl_mem, memobj, clSetMemObjectDestructorCallback_arg1_t, pfn_notify, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSVMAlloc"), void *, SVMAlloc, cl_context, context, cl_svm_mem_flags, flags, size_t, size, cl_uint, alignment);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSVMFree"), void, SVMFree, cl_context, context, void *, svm_pointer);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateSamplerWithProperties"), cl_sampler, CreateSamplerWithProperties, cl_context, context, const cl_sampler_properties *, sampler_properties, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainSampler"), cl_int, RetainSampler, cl_sampler, sampler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseSampler"), cl_int, ReleaseSampler, cl_sampler, sampler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetSamplerInfo"), cl_int, GetSamplerInfo, cl_sampler, sampler, cl_sampler_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateProgramWithSource"), cl_program, CreateProgramWithSource, cl_context, context, cl_uint, count, const char **, strings, const size_t *, lengths, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateProgramWithBinary"), cl_program, CreateProgramWithBinary, cl_context, context, cl_uint, num_devices, const cl_device_id *, device_list, const size_t *, lengths, const unsigned char **, binaries, cl_int *, binary_status, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateProgramWithBuiltInKernels"), cl_program, CreateProgramWithBuiltInKernels, cl_context, context, cl_uint, num_devices, const cl_device_id *, device_list, const char *, kernel_names, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateProgramWithIL"), cl_program, CreateProgramWithIL, cl_context, context, const void *, il, size_t, length, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainProgram"), cl_int, RetainProgram, cl_program, program);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseProgram"), cl_int, ReleaseProgram, cl_program, program);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clBuildProgram"), cl_int, BuildProgram, cl_program, program, cl_uint, num_devices, const cl_device_id *, device_list, const char *, options, clBuildProgram_arg4_t, pfn_notify, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCompileProgram"), cl_int, CompileProgram, cl_program, program, cl_uint, num_devices, const cl_device_id *, device_list, const char *, options, cl_uint, num_input_headers, const cl_program *, input_headers, const char **, header_include_names, clCompileProgram_arg7_t, pfn_notify, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clLinkProgram"), cl_program, LinkProgram, cl_context, context, cl_uint, num_devices, const cl_device_id *, device_list, const char *, options, cl_uint, num_input_programs, const cl_program *, input_programs, clLinkProgram_arg6_t, pfn_notify, void *, user_data, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetProgramReleaseCallback"), cl_int, SetProgramReleaseCallback, cl_program, program, clSetProgramReleaseCallback_arg1_t, pfn_notify, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetProgramSpecializationConstant"), cl_int, SetProgramSpecializationConstant, cl_program, program, cl_uint, spec_id, size_t, spec_size, const void *, spec_value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clUnloadPlatformCompiler"), cl_int, UnloadPlatformCompiler, cl_platform_id, platform);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetProgramInfo"), cl_int, GetProgramInfo, cl_program, program, cl_program_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetProgramBuildInfo"), cl_int, GetProgramBuildInfo, cl_program, program, cl_device_id, device, cl_program_build_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateKernel"), cl_kernel, CreateKernel, cl_program, program, const char *, kernel_name, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateKernelsInProgram"), cl_int, CreateKernelsInProgram, cl_program, program, cl_uint, num_kernels, cl_kernel *, kernels, cl_uint *, num_kernels_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCloneKernel"), cl_kernel, CloneKernel, cl_kernel, source_kernel, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainKernel"), cl_int, RetainKernel, cl_kernel, kernel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseKernel"), cl_int, ReleaseKernel, cl_kernel, kernel);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetKernelArg"), cl_int, SetKernelArg, cl_kernel, kernel, cl_uint, arg_index, size_t, arg_size, const void *, arg_value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetKernelArgSVMPointer"), cl_int, SetKernelArgSVMPointer, cl_kernel, kernel, cl_uint, arg_index, const void *, arg_value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetKernelExecInfo"), cl_int, SetKernelExecInfo, cl_kernel, kernel, cl_kernel_exec_info, param_name, size_t, param_value_size, const void *, param_value);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetKernelInfo"), cl_int, GetKernelInfo, cl_kernel, kernel, cl_kernel_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetKernelArgInfo"), cl_int, GetKernelArgInfo, cl_kernel, kernel, cl_uint, arg_indx, cl_kernel_arg_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetKernelWorkGroupInfo"), cl_int, GetKernelWorkGroupInfo, cl_kernel, kernel, cl_device_id, device, cl_kernel_work_group_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetKernelSubGroupInfo"), cl_int, GetKernelSubGroupInfo, cl_kernel, kernel, cl_device_id, device, cl_kernel_sub_group_info, param_name, size_t, input_value_size, const void *, input_value, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clWaitForEvents"), cl_int, WaitForEvents, cl_uint, num_events, const cl_event *, event_list);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetEventInfo"), cl_int, GetEventInfo, cl_event, event, cl_event_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateUserEvent"), cl_event, CreateUserEvent, cl_context, context, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainEvent"), cl_int, RetainEvent, cl_event, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseEvent"), cl_int, ReleaseEvent, cl_event, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetUserEventStatus"), cl_int, SetUserEventStatus, cl_event, event, cl_int, execution_status);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clSetEventCallback"), cl_int, SetEventCallback, cl_event, event, cl_int, command_exec_callback_type, clSetEventCallback_arg2_t, pfn_notify, void *, user_data);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetEventProfilingInfo"), cl_int, GetEventProfilingInfo, cl_event, event, cl_profiling_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clFlush"), cl_int, Flush, cl_command_queue, command_queue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clFinish"), cl_int, Finish, cl_command_queue, command_queue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueReadBuffer"), cl_int, EnqueueReadBuffer, cl_command_queue, command_queue, cl_mem, buffer, cl_bool, blocking_read, size_t, offset, size_t, size, void *, ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueReadBufferRect"), cl_int, EnqueueReadBufferRect, cl_command_queue, command_queue, cl_mem, buffer, cl_bool, blocking_read, const size_t *, buffer_origin, const size_t *, host_origin, const size_t *, region, size_t, buffer_row_pitch, size_t, buffer_slice_pitch, size_t, host_row_pitch, size_t, host_slice_pitch, void *, ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueWriteBuffer"), cl_int, EnqueueWriteBuffer, cl_command_queue, command_queue, cl_mem, buffer, cl_bool, blocking_write, size_t, offset, size_t, size, const void *, ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueWriteBufferRect"), cl_int, EnqueueWriteBufferRect, cl_command_queue, command_queue, cl_mem, buffer, cl_bool, blocking_write, const size_t *, buffer_origin, const size_t *, host_origin, const size_t *, region, size_t, buffer_row_pitch, size_t, buffer_slice_pitch, size_t, host_row_pitch, size_t, host_slice_pitch, const void *, ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueFillBuffer"), cl_int, EnqueueFillBuffer, cl_command_queue, command_queue, cl_mem, buffer, const void *, pattern, size_t, pattern_size, size_t, offset, size_t, size, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueCopyBuffer"), cl_int, EnqueueCopyBuffer, cl_command_queue, command_queue, cl_mem, src_buffer, cl_mem, dst_buffer, size_t, src_offset, size_t, dst_offset, size_t, size, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueCopyBufferRect"), cl_int, EnqueueCopyBufferRect, cl_command_queue, command_queue, cl_mem, src_buffer, cl_mem, dst_buffer, const size_t *, src_origin, const size_t *, dst_origin, const size_t *, region, size_t, src_row_pitch, size_t, src_slice_pitch, size_t, dst_row_pitch, size_t, dst_slice_pitch, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueReadImage"), cl_int, EnqueueReadImage, cl_command_queue, command_queue, cl_mem, image, cl_bool, blocking_read, const size_t *, origin, const size_t *, region, size_t, row_pitch, size_t, slice_pitch, void *, ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueWriteImage"), cl_int, EnqueueWriteImage, cl_command_queue, command_queue, cl_mem, image, cl_bool, blocking_write, const size_t *, origin, const size_t *, region, size_t, input_row_pitch, size_t, input_slice_pitch, const void *, ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueFillImage"), cl_int, EnqueueFillImage, cl_command_queue, command_queue, cl_mem, image, const void *, fill_color, const size_t *, origin, const size_t *, region, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueCopyImage"), cl_int, EnqueueCopyImage, cl_command_queue, command_queue, cl_mem, src_image, cl_mem, dst_image, const size_t *, src_origin, const size_t *, dst_origin, const size_t *, region, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueCopyImageToBuffer"), cl_int, EnqueueCopyImageToBuffer, cl_command_queue, command_queue, cl_mem, src_image, cl_mem, dst_buffer, const size_t *, src_origin, const size_t *, region, size_t, dst_offset, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueCopyBufferToImage"), cl_int, EnqueueCopyBufferToImage, cl_command_queue, command_queue, cl_mem, src_buffer, cl_mem, dst_image, size_t, src_offset, const size_t *, dst_origin, const size_t *, region, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueMapBuffer"), void *, EnqueueMapBuffer, cl_command_queue, command_queue, cl_mem, buffer, cl_bool, blocking_map, cl_map_flags, map_flags, size_t, offset, size_t, size, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueMapImage"), void *, EnqueueMapImage, cl_command_queue, command_queue, cl_mem, image, cl_bool, blocking_map, cl_map_flags, map_flags, const size_t *, origin, const size_t *, region, size_t *, image_row_pitch, size_t *, image_slice_pitch, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueUnmapMemObject"), cl_int, EnqueueUnmapMemObject, cl_command_queue, command_queue, cl_mem, memobj, void *, mapped_ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueMigrateMemObjects"), cl_int, EnqueueMigrateMemObjects, cl_command_queue, command_queue, cl_uint, num_mem_objects, const cl_mem *, mem_objects, cl_mem_migration_flags, flags, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueNDRangeKernel"), cl_int, EnqueueNDRangeKernel, cl_command_queue, command_queue, cl_kernel, kernel, cl_uint, work_dim, const size_t *, global_work_offset, const size_t *, global_work_size, const size_t *, local_work_size, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueNativeKernel"), cl_int, EnqueueNativeKernel, cl_command_queue, command_queue, clEnqueueNativeKernel_arg1_t, user_func, void *, args, size_t, cb_args, cl_uint, num_mem_objects, const cl_mem *, mem_list, const void **, args_mem_loc, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueMarkerWithWaitList"), cl_int, EnqueueMarkerWithWaitList, cl_command_queue, command_queue, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueBarrierWithWaitList"), cl_int, EnqueueBarrierWithWaitList, cl_command_queue, command_queue, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueSVMFree"), cl_int, EnqueueSVMFree, cl_command_queue, command_queue, cl_uint, num_svm_pointers, clEnqueueSVMFree_arg2_t, svm_pointers, clEnqueueSVMFree_arg3_t, pfn_free_func, void *, user_data, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueSVMMemcpy"), cl_int, EnqueueSVMMemcpy, cl_command_queue, command_queue, cl_bool, blocking_copy, void *, dst_ptr, const void *, src_ptr, size_t, size, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueSVMMemFill"), cl_int, EnqueueSVMMemFill, cl_command_queue, command_queue, void *, svm_ptr, const void *, pattern, size_t, pattern_size, size_t, size, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueSVMMap"), cl_int, EnqueueSVMMap, cl_command_queue, command_queue, cl_bool, blocking_map, cl_map_flags, flags, void *, svm_ptr, size_t, size, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueSVMUnmap"), cl_int, EnqueueSVMUnmap, cl_command_queue, command_queue, void *, svm_ptr, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueSVMMigrateMem"), cl_int, EnqueueSVMMigrateMem, cl_command_queue, command_queue, cl_uint, num_svm_pointers, const void **, svm_pointers, const size_t *, sizes, cl_mem_migration_flags, flags, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetExtensionFunctionAddressForPlatform"), void *, GetExtensionFunctionAddressForPlatform, cl_platform_id, platform, const char *, func_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateImage2D"), cl_mem, CreateImage2D, cl_context, context, cl_mem_flags, flags, const cl_image_format *, image_format, size_t, image_width, size_t, image_height, size_t, image_row_pitch, void *, host_ptr, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateImage3D"), cl_mem, CreateImage3D, cl_context, context, cl_mem_flags, flags, const cl_image_format *, image_format, size_t, image_width, size_t, image_height, size_t, image_depth, size_t, image_row_pitch, size_t, image_slice_pitch, void *, host_ptr, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueMarker"), cl_int, EnqueueMarker, cl_command_queue, command_queue, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueWaitForEvents"), cl_int, EnqueueWaitForEvents, cl_command_queue, command_queue, cl_uint, num_events, const cl_event *, event_list);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueBarrier"), cl_int, EnqueueBarrier, cl_command_queue, command_queue);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clUnloadCompiler"), cl_int, UnloadCompiler);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetExtensionFunctionAddress"), void *, GetExtensionFunctionAddress, const char *, func_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateCommandQueue"), cl_command_queue, CreateCommandQueue, cl_context, context, cl_device_id, device, cl_command_queue_properties, properties, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateSampler"), cl_sampler, CreateSampler, cl_context, context, cl_bool, normalized_coords, cl_addressing_mode, addressing_mode, cl_filter_mode, filter_mode, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueTask"), cl_int, EnqueueTask, cl_command_queue, command_queue, cl_kernel, kernel, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clReleaseDeviceEXT"), cl_int, ReleaseDeviceEXT, cl_device_id, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clRetainDeviceEXT"), cl_int, RetainDeviceEXT, cl_device_id, device);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateSubDevicesEXT"), cl_int, CreateSubDevicesEXT, cl_device_id, in_device, const cl_device_partition_property_ext *, properties, cl_uint, num_entries, cl_device_id *, out_devices, cl_uint *, num_devices);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetKernelSubGroupInfoKHR"), cl_int, GetKernelSubGroupInfoKHR, cl_kernel, in_kernel, cl_device_id, in_device, cl_kernel_sub_group_info, param_name, size_t, input_value_size, const void *, input_value, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetGLContextInfoKHR"), cl_int, GetGLContextInfoKHR, const cl_context_properties *, properties, cl_gl_context_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateFromGLBuffer"), cl_mem, CreateFromGLBuffer, cl_context, context, cl_mem_flags, flags, cl_GLuint, bufobj, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateFromGLTexture"), cl_mem, CreateFromGLTexture, cl_context, context, cl_mem_flags, flags, cl_GLenum, target, cl_GLint, miplevel, cl_GLuint, texture, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateFromGLRenderbuffer"), cl_mem, CreateFromGLRenderbuffer, cl_context, context, cl_mem_flags, flags, cl_GLuint, renderbuffer, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetGLObjectInfo"), cl_int, GetGLObjectInfo, cl_mem, memobj, cl_gl_object_type *, gl_object_type, cl_GLuint *, gl_object_name);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clGetGLTextureInfo"), cl_int, GetGLTextureInfo, cl_mem, memobj, cl_gl_texture_info, param_name, size_t, param_value_size, void *, param_value, size_t *, param_value_size_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueAcquireGLObjects"), cl_int, EnqueueAcquireGLObjects, cl_command_queue, command_queue, cl_uint, num_objects, const cl_mem *, mem_objects, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueReleaseGLObjects"), cl_int, EnqueueReleaseGLObjects, cl_command_queue, command_queue, cl_uint, num_objects, const cl_mem *, mem_objects, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateFromGLTexture2D"), cl_mem, CreateFromGLTexture2D, cl_context, context, cl_mem_flags, flags, cl_GLenum, target, cl_GLint, miplevel, cl_GLuint, texture, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateFromGLTexture3D"), cl_mem, CreateFromGLTexture3D, cl_context, context, cl_mem_flags, flags, cl_GLenum, target, cl_GLint, miplevel, cl_GLuint, texture, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateEventFromGLsyncKHR"), cl_event, CreateEventFromGLsyncKHR, cl_context, context, cl_GLsync, sync, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateFromEGLImageKHR"), cl_mem, CreateFromEGLImageKHR, cl_context, context, CLeglDisplayKHR, egldisplay, CLeglImageKHR, eglimage, cl_mem_flags, flags, const cl_egl_image_properties_khr *, properties, cl_int *, errcode_ret);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueAcquireEGLObjectsKHR"), cl_int, EnqueueAcquireEGLObjectsKHR, cl_command_queue, command_queue, cl_uint, num_objects, const cl_mem *, mem_objects, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clEnqueueReleaseEGLObjectsKHR"), cl_int, EnqueueReleaseEGLObjectsKHR, cl_command_queue, command_queue, cl_uint, num_objects, const cl_mem *, mem_objects, cl_uint, num_events_in_wait_list, const cl_event *, event_wait_list, cl_event *, event);
    DEFINE_STATIC_ADDRESS_CALL(GetSymbol("clCreateEventFromEGLSyncKHR"), cl_event, CreateEventFromEGLSyncKHR, cl_context, context, CLeglSyncKHR, sync, CLeglDisplayKHR, display, cl_int *, errcode_ret);

};

} // namespace xsched::opencl
